%<*!showexpl>
%#! lualatex -shell-escape

% To typeset this manual, you need following two fonts:
%  - KozMinPr6N-Regular.otf
%  - KozGoPr6N-Medium.otf
%  - KozGoPr6N-Regular.otf

%%%%% section ==> 章
%%%%% subsection => 節

%<en>\documentclass[a4paper,titlepage]{article}
%<ja>\documentclass[a4paper,titlepage]{ltjsarticle}

%%%%%%%%
\makeatletter
%%%%%%%%

%%%%%%%% record loaded packages
\let\ltjpkglist\empty
\newif\if@real@append@list
\def\@append@newentry#1#2{{%
  \@real@append@listtrue \def\@tempa{#2}%
  \let\@pkglist\@append@newentry@pkglist#1%
  \if@real@append@list
    \let\@pkglist=\relax\xdef#1{#1\@pkglist{#2}}%
  \fi}}
\def\@append@newentry@pkglist#1{%
  \def\@tempb{#1}%
  \ifx\@tempa\@tempb\@real@append@listfalse\fi}
\def\@addtofilelist#1{\@append@newentry\ltjpkglist{#1}}
\let\@listfiles\empty

%<*en>
\usepackage[margin=25mm,lmargin=30mm,rmargin=30mm,footskip=6mm]{geometry}
\usepackage{luatexja-adjust}\ltjdisableadjust
\parskip=\smallskipamount
\renewcommand\paragraph{\@startsection{paragraph}{4}{\z@}%
    {3.25ex \@plus1ex \@minus.2ex}%
    {-1em}%
    {\normalfont\normalsize\bfseries\raisebox{.2ex}{$\mdlgblksquare\mkern1mu$}}}
%</en>
%<*ja>
\usepackage[textwidth=45\zw, lines=45, footskip=6mm]{geometry}
\usepackage{luatexja-adjust}%\ltjdisableadjust
\advance\leftmargini-1\zw\advance\leftmarginii-1\zw
%</ja>

\usepackage{amsmath,array,tikz,pict2e,multienum,float}
\usepackage{booktabs,multicol,luatexja-ruby}
\usepackage{xy,lltjext}

%%%%%%%% listings

%%%%%%%% IVS

\def\IVS#1{\char\numexpr "E0100+#1\relax}%"
\def\IVSA#1#2#3#4#5{%
  \textcolor{blue}{\raisebox{3.5pt}{\tt%
    \fboxsep=0.5pt\fbox{\tiny \oalign{0#1#2\crcr#3#4#5\crcr}}}}%
}
{\catcode`\%=11
  \gdef\IVSB#1{\expandafter\IVSA\directlua{
    local cat_str = luatexbase.catcodetables['string']
    tex.sprint(cat_str, string.format('%X', 0xE00EF+#1))
}}}

\usepackage{listings,showexpl,enumitem}
\lstset{
  basicstyle=\ttfamily\small, pos=r, breaklines=true,
  numbers=none, rframe={}, basewidth=0.5em, numberstyle=\tiny, numbersep=0.5em,
  explpreset={numberstyle=\tiny, numbers=left, numbersep=1em, columns=fixed}
}
% Suppress output from showexpl to stdout.
\let\SX@Info\relax

%%%%%%%% hyperref
\usepackage{hyperref,bookmark}
%<*en>
\title{The \LuaTeX-ja package}
\author{The \LuaTeX-ja project team}
%</en>
%<*ja>
\title{\LuaTeX-jaパッケージ}
\author{\LuaTeX-jaプロジェクトチーム}
%</ja>
\hypersetup{%
	unicode,
	colorlinks,
	allbordercolors=1 1 1,
	allcolors=blue,
%<*en>
	pdfauthor={The LuaTeX-ja project team},
	pdftitle={The LuaTeX-ja package}
%</en>
%<*ja>
	pdfauthor={LuaTeX-jaプロジェクトチーム},
	pdftitle={LuaTeX-jaパッケージ}
%</ja>
}

%%%%%%%% definition env.
\usepackage{amsthm}
\theoremstyle{definition}
%<en>\newtheorem{defn}{Definition}
%<ja>\newtheorem{defn}{定義}

%%%%%%%% fonts
\usepackage{luatexja-otf}
%<ja>\usepackage{lmodern}
\directlua{luatexja.otf.enable_ivs()}
\usepackage[match]{luatexja-fontspec}
\usepackage[kozuka-pr6n]{luatexja-preset}
\setmonojfont{KozGoPr6N-Regular.otf}
%<*ja>
\def\emph#1{\textbf{\textgt{#1}}}
\def\headfont{\normalfont\bfseries\gtfamily}
\usepackage{amssymb}
%</ja>
%<*en>
\usepackage{unicode-math}
\setmainfont[Ligatures=TeX]{TeX Gyre Termes}
\setsansfont[Scale=0.95,Ligatures=TeX]{TeX Gyre Heros}
\setmathfont{xits-math.otf}
\frenchspacing
%</en>

%%%%%%%% logo
\usepackage{metalogo}
\DeclareRobustCommand\eTeX{\ensuremath{\varepsilon}-\kern-.125em\TeX}
\DeclareRobustCommand\LuaTeX{Lua\TeX}
\DeclareRobustCommand\pdfTeX{pdf\TeX}
\DeclareRobustCommand\pTeX{p\kern-.15em\TeX}
\DeclareRobustCommand\upTeX{up\kern-.15em\TeX}
\DeclareRobustCommand\pLaTeX{p\kern-.05em\LaTeX}
\DeclareRobustCommand\pLaTeXe{p\kern-.05em\LaTeXe}
\DeclareRobustCommand\epTeX{\ensuremath{\varepsilon}-\kern-.125em\pTeX}

%%%%%%%% other macros
\newlist{cslist}{description}{1}
\setlist[cslist]{%
    style=nextline,font=\mdseries\ttfamily,
    before*=\def\<{\char`\<}\def\>{\char`\>}\def\{{\char`\{}\def\}{\char`\}},
%<ja> leftmargin=2\zw,
%<en> leftmargin=2em,
}

\def\labelenumii{(\arabic{enumii})}
\long\def\@makecaption#1#2{%
  \vskip\abovecaptionskip
  \sbox\@tempboxa{{\small #1. #2}}%
  \ifdim \wd\@tempboxa >\hsize
    {\small #1. #2}\par
  \else
    \global \@minipagefalse
    \hb@xt@\hsize{\hfil\box\@tempboxa\hfil}%
  \fi
  \vskip\belowcaptionskip}

\def\_{\leavevmode \kern .06em\vbox {\hrule \@width .333em}}
\def\cs#1{\texttt{\upshape\textbackslash #1}}

%%%%%%%%
\makeatother
%%%%%%%%

\def\Node#1#2{\,\vcenter{\hbox{\fboxsep=1pt\fbox{\vbox{\small\halign{\hfil##\hfil\cr
  #1\mathstrut\cr\noalign{\hrule height.4pt}\strut#2\cr}}}}\,}}

\protected\def\Param#1{\hyperlink{fld:#1}{\textsf{#1}}} % parameter name
\protected\def\DParam#1{\hypertarget{fld:#1}{\textsf{#1}}} % parameter name (definition)
\protected\def\Pkg#1{\underline{\smash{\texttt{#1}}}} % packages/classes


\begin{document}
\lstset{
  vscmd=\IVSB
}

\catcode`\<=13
\def<#1>{{\normalfont\rm\itshape$\langle$#1\/$\rangle$}}
\let\LARG=<
\maketitle

\tableofcontents
\bigskip

%<*en>
\textbf{This documentation is far from complete. It may have many
grammatical (and contextual) errors.} Also, several parts
are written in Japanese only.
%</en>
%<*ja>
\emph{\large 本ドキュメントはまだまだ未完成です．}
%</ja>

\clearpage
%<en>\part{User's manual}
%<ja>\part{ユーザーズマニュアル}

%<en>\section{Introduction}
%<ja>\section{はじめに}


%<*en>
The \LuaTeX-ja package is a macro package for typesetting high-quality
Japanese documents when using \LuaTeX.
%</en>
%<*ja>
\LuaTeX-jaパッケージは，次世代標準\TeX である\LuaTeX の上で，\pTeX と同等
／それ以上の品質の日本語組版を実現させようとするマクロパッケージである．
%</ja>
%<en>\subsection{Backgrounds}
%<ja>\subsection{背景}

%<*en>
Traditionally, ASCII \pTeX, an extension of \TeX, and its derivatives
are used to typeset Japanese documents in \TeX. \pTeX\ is an engine
extension of \TeX: so it can produce high-quality Japanese documents
without using very complicated macros. But this point is a mixed
blessing: \pTeX\ is left behind from other extensions of \TeX,
especially \eTeX\ and \pdfTeX, and from changes about
Japanese processing in computers (\textit{e.g.}, the UTF-8 encoding).
%</en>
%<*ja>
従来，「\TeX を用いて日本語組版を行う」といったとき，エンジンとしては
ASCII \pTeX やそれの拡張物が用いられることが一般的であった．\pTeX は\TeX
のエンジン拡張であり，（少々仕様上不便な点はあるものの）商業印刷の分野に
も用いられるほどの高品質な日本語組版を可能としている．だが，それは弱点に
もなってしまった：\pTeX という（組版的に）満足なものがあったため，海外で
行われている数々の\TeX の拡張――例えば\eTeX や\pdfTeX ――や，TrueType,
OpenType, Unicodeといった計算機で日本語を扱う際の状況の変化に追従すること
を怠ってしまったのだ．
%</ja>

%<*en>
Recently extensions of \pTeX, namely \upTeX\ (Unicode-implementation
of \pTeX) and \epTeX\ (merging of \pTeX\ and
\eTeX\ extension), have developed to fill those gaps to some
extent, but gaps still exist.
%</en>
%<*ja>
ここ数年，若干状況は改善されてきた．現在手に入る大半の\pTeX バイナリでは
外部UTF-8入力が利用可能となり，さらにUnicode化を推進し，\pTeX の内部処理
までUnicode化した\upTeX も開発されている．また，\pTeX に\eTeX 拡張をマー
ジした\epTeX も登場し，\TeX\ Live\ 2011では\pLaTeX が\epTeX の上で動作す
るようになった．だが，\pdfTeX 拡張（PDF直接出力やmicro-typesetting）を
\pTeX に対応させようという動きはなく，海外とのgapは未だにあるのが現状であ
る．
%</ja>

%<*en>
However, the appearance of \LuaTeX\ changed the whole situation. With
using Lua ``callbacks'', users can customize the internal processing of
\LuaTeX. So there is no need to modify sources of engines to
support Japanese typesetting: to do this, we only have to write Lua
scripts for appropriate callbacks.
%</en>
%<*ja>
しかし，\LuaTeX の登場で，状況は大きく変わることになった．Luaコードで
``callback''を書くことにより，\LuaTeX の内部処理に割り込みをかけることが可
能となった．これは，エンジン拡張という真似をしなくても，Luaコードとそれに
関する\TeX マクロを書けば，エンジン拡張とほぼ同程度のことができるようになっ
たということを意味する．\LuaTeX-jaは，このアプローチによってLuaコード・
\TeX マクロによって日本語組版を\LuaTeX の上で実現させようという目的で開発
が始まったパッケージである．
%</ja>

%<en>\subsection{Major Changes from \pTeX}
%<ja>\subsection{\pTeX からの主な変更点}
\label{ssec:chgptex}

%<*en>
The \LuaTeX-ja package is under much influence of \pTeX\ engine. The initial
target of development was to implement features of \pTeX. However,
\emph{\LuaTeX-ja is not a just porting of \pTeX; unnatural
specifications/behaviors of \pTeX\ were not adopted}.
%</en>
%<*ja>
\LuaTeX-jaは，\pTeX に多大な影響を受けている．初期の開発目標は，\pTeX の機
能をLuaコードにより実装することであった．しかし，開発が進むにつれ，\pTeX
の完全な移植は不可能であり，また\pTeX における実装がいささか不可解になっ
ているような状況も発見された．そのため，\emph{\LuaTeX-jaは，もはや
\pTeX の完全な移植は目標とはしない．\pTeX における不自然な仕様・挙動があ
れば，そこは積極的に改める．}
%</ja>

%<*en>
The followings are major changes from \pTeX:
%</en>
%<*ja>
以下は \pTeX からの主な変更点である．
%</ja>

\begin{itemize}
%<*en>
\item A Japanese font is a tuple of a ``real'' font, a Japanese font
      metric (\emph{JFM}, for short).
%</en>
%<*ja>
\item 和文フォントは（小塚明朝，IPA明朝などの）実際のフォント，和文フォン
      トメトリック（JFMと呼ぶ\footnote{混乱を防ぐため，p\TeX の意味での
      JFM (\texttt{min10.tfm}) などは本ドキュメントでは\emph{和文用
      TFM}とよぶことにする．}）の組である．
%</ja>

%<*en>
\item In \pTeX, a line break after Japanese character is ignored (and
      doesn't yield a space), since line breaks (in source files) are
      permitted almost everywhere in Japanese texts. However, \LuaTeX-ja
      doesn't have this function completely, because of a specification
      of \LuaTeX.
%</en>
%<*ja>
\item 日本語の文書中では改行はほとんどどこでも許されるので，\pTeX では和文文字
      直後の改行は無視される（スペースが入らない）ようになっていた．しかし，
      \LuaTeX-ja では \LuaTeX の仕様のためにこの機能は完全には実装されていない．
%</ja>

%<*en>
\item The insertion process of glues/kerns between two Japanese
      characters and between a Japanese character and other characters
      (we refer glues/kerns of both kinds as \textbf{JAglue}) is rewritten from
      scratch.
%</en>
%<*ja>
\item 2つの和文文字の間や，和文文字と欧文文字の間に入るグルー／カーン
      （両者をあわせて\textbf{JAglue}と呼ぶ）の挿入処理が0から書き直されている．
%</ja>

\begin{itemize}
%<*en>
\item As \LuaTeX's internal ligature handling is ``node-based''
      (\textit{e.g.}, \verb+of{}fice+ doesn't prevent ligatures), the
      insertion process of \textbf{JAglue} is now ``node-based''.
%</en>
%<*ja>
\item \LuaTeX の内部での合字の扱いは「ノード」を単位として行われるようになっている（例えば，
      \verb+of{}fice+ で合字は抑制されない）．それに合わせ，\textbf{JAglue}の挿入処理も
      ノード単位で実行される．
%</ja>

%<*en>
\item Furthermore, nodes between two characters which have no effects in
      line break (\textit{e.g.}, \cs{special} node) and kerns from
      italic correction are ignored in the insertion process.
%</en>
%<*ja>
\item さらに，2つの文字の間にある行末では効果を持たないノード（例えば \cs{special} ノード）や，
  イタリック補正に伴い挿入されるカーンは挿入処理中では無視される．
%</ja>

%<*en>
\item \emph{Caution: due to above two points, many methods which did for the
      dividing the process of the insertion of \textbf{JAglue} in \pTeX\ are not
      effective anymore.} In concrete terms, the following two methods are not effective anymore:
%</en>
%<*ja>
\item \emph{注意：上の2つの変更により，従来\textbf{JAglue}の挿入処理を分断するのに
      使われていたいくつかの方法は用いることができない．具体的には，次の方法はもはや無効である：}
%</ja>
\begin{verbatim}
ちょ{}っと    ちょ\/っと
\end{verbatim}
%<*en>
      If you want to do so, please put an empty horizontal box (hbox) between it instead:
%</en>
%<*ja>
      もし同じことをやりたければ，空の水平ボックス(hbox)を間に挟めばよい：
%</ja>
\begin{verbatim}
ちょ\hbox{}っと
\end{verbatim}


%<*en>
\item In the process, two Japanese fonts which only differ in their ``real''
      fonts are identified.
%</en>
%<*ja>
\item 処理中では，2つの和文フォントは，実フォントが異なるだけの場合には同一視
      される．
%</ja>
\end{itemize}

%<*ja>
\item \LuaTeX-jaでは，\pTeX と同様に漢字・仮名を制御綴内に用いることができ，
\cs{西暦} などが正しく動作するようにしている．
但し，制御綴中に使える和文文字が\pTeX・\upTeX と全く同じではないことに注意すること．
%</ja>

%<*ja>
\item ****版からは，不安定ながらも\LuaTeX-ja における縦組みをサポートしている．
\LuaTeX のコールバックの制限などにより，特に異なった組方向のボックスを扱う場合には
仕様が異なるので注意すること．
%</ja>
\end{itemize}

%<*en>
For detailed information, see Part~\ref{part-imp}.
%</en>
%<*ja>
詳細については第\ref{part-imp}部を参照．
%</ja>

%<en>\subsection{Notations}
%<ja>\subsection{用語と記法}

%<*en>
In this document, the following terms and notations are used:
%</en>
%<*ja>
本ドキュメントでは，以下の用語と記法を用いる：
%</ja>
\begin{itemize}
%<*en>
\item Characters are classified into following two types.
      Note that the classification can be customized by a user
      (see Subsection~\ref{ssec-setrange}).
%</en>
%<*ja>
\item 文字は次の2種類に分けられる．この類別はユーザが後から変更可能である
      （\ref{ssec-setrange}節を参照）．
%</ja>
\begin{itemize}
%<*en>
\item \textbf{JAchar}: standing for characters which used in Japanese typesetting,
      such as Hiragana,~Katakana, Kanji, and~other Japanese punctuation marks.
%</en>
%<*ja>
\item \textbf{JAchar}: ひらがな，カタカナ，漢字，和文用の約物といった
      日本語組版に使われる文字のことを指す．
%</ja>

%<en>\item \textbf{ALchar}: standing for all other characters like latin alphabets.
%<ja>\item \textbf{ALchar}: ラテンアルファベットを始めとする，その他全ての文字を指す．
\end{itemize}

%<*en>
We say \emph{alphabetic fonts} for fonts used in \textbf{ALchar},
and \emph{Japanese fonts} for fonts used in \textbf{JAchar}.
%</en>
%<*ja>
そして，\textbf{ALchar}の出力に用いられるフォントを\emph{欧文フォント}と呼び，
\textbf{JAchar}の出力に用いられるフォントを\emph{和文フォント}と呼ぶ．
%</ja>
%<*en>
\item A word in a sans-serif font (like \Param{prebreakpenalty})
      means an internal parameter for Japanese typesetting, and it
      is used as a key in \cs{ltjsetparameter} command.
%</en>
%<*ja>
\item サンセリフ体で書かれた語（例：\Param{prebreakpenalty}）は日本語組版用の
      パラメータを表し，これらは \cs{ltjsetparameter} 命令のキーとして
      用いられる．
%</ja>
%<*en>
\item A word in typewriter font with underline (like \Pkg{fontspec})
      means a package or a class of \LaTeX.
%</en>
%<*ja>
\item 下線付きタイプライタ体の語（例：\Pkg{fontspec}）は\LaTeX の
      パッケージやクラスを表す．
%</ja>
%<*en>
\item In this document, natural numbers start from~zero.
  $\omega$ denotes the set of all natural numbers.
%</en>
%<*ja>
\item 本ドキュメントでは，自然数は0から始まる．自然数全体の集合は$\omega$と表記する．
%</ja>
\end{itemize}

%<en>\subsection{About the Project}
%<ja>\subsection{プロジェクトについて}

%<en>\paragraph{Project Wiki} Project Wiki is under construction.
%<ja>\paragraph{プロジェクトWiki} プロジェクトWikiは構築中である．
%<*en>
\begin{itemize}
\item \url{http://sourceforge.jp/projects/luatex-ja/wiki/FrontPage%28en%29} (English)
\item \url{http://sourceforge.jp/projects/luatex-ja/wiki/FrontPage} (Japanese)
\item \url{http://sourceforge.jp/projects/luatex-ja/wiki/FrontPage%28zh%29} (Chinese)
\end{itemize}
%</en>
%<*ja>
\begin{itemize}
\item \url{http://sourceforge.jp/projects/luatex-ja/wiki/FrontPage}（日本語）
\item \url{http://sourceforge.jp/projects/luatex-ja/wiki/FrontPage%28en%29}（英語）
\item \url{http://sourceforge.jp/projects/luatex-ja/wiki/FrontPage%28zh%29}（中国語）
\end{itemize}
%</ja>

%<en>This project is hosted by SourceForge.JP.
%<ja>本プロジェクトはSourceForge.JPのサービスを用いて運営されている．

%<en>\paragraph{Members}\
%<ja>\paragraph{開発メンバー}\

%<*en>
\begin{multienumerate}
\def\labelenumi{$\bullet$}
\mitemxxx{Hironori KITAGAWA}{Kazuki MAEDA}{Takayuki YATO}
\mitemxxx{Yusuke KUROKI}{Noriyuki ABE}{Munehiro YAMAMOTO}
\mitemxxx{Tomoaki HONDA}{Shuzaburo SAITO}{MA Qiyuan}
\end{multienumerate}
%</en>
%<*ja>
\begin{multienumerate}
\def\labelenumi{$\bullet$}
\mitemxxx{北川 弘典}{前田 一貴}{八登 崇之}
\mitemxxx{黒木 裕介}{阿部 紀行}{山本 宗宏}
\mitemxxx{本田 知亮}{齋藤 修三郎}{馬 起園}
\end{multienumerate}
%</ja>

% \paragraph{Acknowledgments} -- 挿入するならここ

\clearpage
%<en>\section{Getting Started}
%<ja>\section{使い方}
%<en>\subsection{Installation}
%<ja>\subsection{インストール}

%<en>To install the \LuaTeX-ja\ package, you will need:
%<ja>\LuaTeX-jaパッケージのインストールには，次のものが必要である．
\begin{itemize}
\item \LuaTeX\ beta-0.74.0 (or later)
\item \Pkg{luaotfload} v2.2 (or later)
\item \Pkg{luatexbase} v0.6
\item \Pkg{xunicode} v0.981~(2011/09/09)
\item \Pkg{adobemapping} (Adobe cmap and pdfmapping files)
\item \Pkg{everysel}
\end{itemize}

%<*en>
\emph{This version of \LuaTeX-ja no longer supports \TeX~Live~2012 (or older version),
since \LuaTeX\ binary and \Pkg{luaotfload} is updated in
\TeX~Live~2013.}

\medskip

Now \LuaTeX-ja is available from the following archive and distributions:
  \begin{itemize}
  \item CTAN (in the \texttt{macros/luatex/generic/luatexja} directory)
  \item MiK\TeX\ (in \texttt{luatexja.tar.lzma}); see the next subsection
  \item \TeX\ Live (in \texttt{texmf-dist/tex/luatex/luatexja})
  \item W32\TeX\ (in \texttt{luatexja.tar.xz})
  \end{itemize}

If you are using \TeX~Live~2014, you can install \LuaTeX-ja
from \TeX~Live manager (\texttt{tlmgr}):
\begin{verbatim}
$ tlmgr install luatexja
\end{verbatim}
%</en>
%<*ja>
\emph{本バージョンの\LuaTeX-jaは\TeX~Live~2012以前では動作しない．}
これは，\LuaTeX と\Pkg{luaotfload}が\TeX~Live~2013において更新されたことによる．

\medskip

現在，\LuaTeX-jaは以下のアーカイブ，およびディストリビューションに収録されている：
  \begin{itemize}
  \item CTAN (\texttt{macros/luatex/generic/luatexja})
  \item MiK\TeX\ (\texttt{luatexja.tar.lzma})
  \item \TeX\ Live (\texttt{texmf-dist/tex/luatex/luatexja})
  \item W32\TeX\ (\texttt{luatexja.tar.xz})
  \end{itemize}

例えば\TeX~Live~2014を利用しているなら，\LuaTeX-jaは\TeX~Live manager (\texttt{tlmgr})を
使ってインストールすることができる．
\begin{verbatim}
$ tlmgr install luatexja
\end{verbatim}
%</ja>

%<en>\paragraph{Manual installation}
%<ja>\paragraph{手動インストール方法}

\begin{enumerate}
%<*en>
\item Download the source archive, by one of the following method.
      At the present, \LuaTeX-ja has no \emph{stable} release.

\begin{itemize}
\item Copy the Git repository:
\begin{verbatim}
$ git clone git://git.sourceforge.jp/gitroot/luatex-ja/luatexja.git
\end{verbatim}
\item Download the \texttt{tar.gz} archive of HEAD in the \texttt{master} branch from
\begin{flushleft}
\url{http://git.sourceforge.jp/view?p=luatex-ja/luatexja.git;a=snapshot;h=HEAD;sf=tgz}.
\end{flushleft}
\end{itemize}

Note that the \texttt{master} branch, and hence the archive in CTAN, are not updated frequently;
the forefront of development is not the \texttt{master} branch.
%</en>
%<*ja>
\item ソースアーカイブを以下のいずれかの方法で取得する．現在公開されているのはあくまでも
      開発版であって，安定版でないことに注意．

\begin{itemize}
\item Gitリポジトリの内容をコピーする：
\begin{verbatim}
$ git clone git://git.sourceforge.jp/gitroot/luatex-ja/luatexja.git
\end{verbatim}
\item \texttt{master}ブランチのスナップショット（\texttt{tar.gz}形式）をダウンロードする．
\begin{flushleft}
\url{http://git.sourceforge.jp/view?p=luatex-ja/luatexja.git;a=snapshot;h=HEAD;sf=tgz}.
\end{flushleft}
\end{itemize}
\texttt{master}ブランチ（従って，CTAN内のアーカイブも）はたまにしか更新されないことに注意．
主な開発は\texttt{master}の外で行われ，比較的まとまってきたらそれを\texttt{master}に
反映させることにしている．
%</ja>

%<*en>
\item Extract the archive. You will see \texttt{src/} and several other sub-directories.
But only the contents in \texttt{src/} are needed to work \LuaTeX-ja.
%</en>
%<*ja>
\item 「Gitリポジトリをコピー」以外の方法でアーカイブを取得したならば，それを展開する．
      \texttt{src/}をはじめとしたいくつかのディレクトリができるが，
      動作には\texttt{src/}以下の内容だけで十分．
%</ja>

%<*en>
\item If you downloaded this package from CTAN, you have to run following commands
    to generate classes
    and \texttt{ltj-kinsoku.lua} (the file which stores default ``\textit{kinsoku}'' parameters):
%</en>
%<*ja>
\item もしCTANから本パッケージを取得したのであれば，日本語用クラスファイルや
標準の禁則処理用パラメータを
格納した \texttt{ltj-kinsoku.lua} を生成するために，
以下を実行する必要がある：
%</ja>
\begin{verbatim}
$ cd src
$ lualatex ltjclasses.ins
$ lualatex ltjsclasses.ins
$ lualatex ltjltxdoc.ins
$ luatex   ltj-kinsoku_make.tex
\end{verbatim}
%<*en>
Note that \texttt{*.\{dtx,ins\}} and \texttt{ltj-kinsoku\_make.tex} are not needed in regular use.
%</en>
%<*ja>
ここで使用した \texttt{*.\{dtx,ins\}} と \texttt{ltj-kinsoku\_make.tex} は
通常の使用にあたっては必要ない．
%</ja>



%<*en>
\item Copy all the contents of \texttt{src/} into one of your \texttt{TEXMF} tree.
      \texttt{TEXMF/tex/luatex/luatexja/} is an example location.
      If you cloned entire Git repository, making a symbolic link of \texttt{src/}
      instead copying is also good.
%</en>
%<*ja>
\item \texttt{src}の中身を自分の\texttt{TEXMF}ツリーにコピーする．
      場所の例としては，例えば\texttt{TEXMF/tex/luatex/luatexja/}がある．
      シンボリックリンクが利用できる環境で，かつリポジトリを直接取得したのであれば，
      （更新を容易にするために）コピーではなくリンクを貼ることを勧める．
%</ja>
%<*en>
\item If \texttt{mktexlsr} is needed to update the file name database, make it so.
%</en>
%<*ja>
\item 必要があれば，\texttt{mktexlsr}を実行する．
%</ja>
\end{enumerate}

%<en>\subsection{Cautions}
%<ja>\subsection{注意点}

\begin{itemize}
%<*en>
\item The encoding of your source file must be UTF-8. No other
      encodings, such as EUC-JP or Shift-JIS, are not supported.
%</en>
%<*ja>
\item 原稿のソースファイルの文字コードはUTF-8固定である．
      従来日本語の文字コードとして用いられてきたEUC-JPやShift-JISは使用できない．
%</ja>
%<*en>
\item \LuaTeX-ja is very slower than \pTeX.
Generally speaking, LuaJIT\TeX\ processes \LuaTeX-ja
about 30\% faster than \LuaTeX, but not always.
%</en>
%<*ja>
\item \LuaTeX-jaは動作が\pTeX に比べて非常に遅い．
コードを調整して徐々に速くしているが，まだ満足できる速度ではない．
LuaJIT\TeX を用いると\LuaTeX のだいたい1.3倍の速度で動くようであるが，
IPA mj明朝などの大きいフォントを用いた場合には\LuaTeX よりも遅くなることもある．
%</ja>
\item%
%<*en>
\textbf{Note for MiK\TeX\ users}\quad
\LuaTeX-ja requires that several CMap files%
\footnote{\texttt{UniJIS2004-UTF32-\{H,V\}} and \texttt{Adobe-Japan1-UCS2}.}
must be found from \LuaTeX.
Strictly speaking, those CMaps are needed
only in the first run of \LuaTeX-ja after installing or updating.
But it seems that MiK\TeX\ does not satisfy this condition,
so you will encounter an error like the following:
%</en>
%<*ja>
\LuaTeX-jaが動作するためには，\emph{導入・更新後の初回起動時に}
\texttt{UniJIS2004-UTF32-\{H,V\}}, \texttt{Adobe-Japan1-UCS2}という3つのCMapが
\LuaTeX によって見つけられることが必要である．
しかしMiK\TeX ではそのようになっていないので，次のエラーが発生するだろう：
%</ja>
\begin{verbatim}
! LuaTeX error ...iles (x86)/MiKTeX 2.9/tex/luatex/luatexja/ltj-rmlgbm.lua
bad argument #1 to 'open' (string expected, got nil)
\end{verbatim}

%<*en>
If so, please execute a batch file which is written on
\href{http://sourceforge.jp/projects/luatex-ja/wiki/FrontPage%28en%29}{ the Project Wiki (English)}.
This batch file creates a temporary directory, copy CMaps in it,
run \LuaTeX-ja in this directory, and finally delete the temporary directory.
%</en>
%<*ja>
そのような場合には，
\href{http://sourceforge.jp/projects/luatex-ja/wiki/FrontPage%28en%29}{%
  プロジェクトWiki英語版トップページ}中に書かれているバッチファイルを
実行して欲しい．このバッチファイルは，作業用ディレクトリにCMap達を
コピーし，その中で\LuaTeX-ja の初回起動を行い，作業用ディレクトリを消す作業をしている．
%</ja>

\end{itemize}

%<en>\subsection{Using in plain \TeX}
%<ja>\subsection{plain \TeX で使う}
\label{ssec-plain}

%<en>To use \LuaTeX-ja in plain \TeX, simply put the following at the beginning of the document:
%<ja>\LuaTeX-jaを plain \TeX で使うためには，単に次の行をソースファイルの冒頭に追加すればよい：
\begin{verbatim}
\input luatexja.sty
\end{verbatim}
%<en>This does minimal settings (like \texttt{ptex.tex}) for typesetting Japanese documents:
%<ja>これで（\texttt{ptex.tex}のように）日本語組版のための最低限の設定がなされる：

\begin{itemize}
%<*en>
\item The following 12~Japanese fonts are preloaded:
\begin{center}\small
\begin{tabular}{cccccc}
\toprule
\textbf{direction}&
\textbf{classification}&\textbf{font name}&\bf `10\,pt'&\bf`7\,pt'&\bf`5\,pt'\\\midrule
\smash{\raisebox{-1ex}{\emph{yoko} (horizontal)}}&
\emph{mincho}&Ryumin-Light    &\cs{tenmin}&\cs{sevenmin}&\cs{fivemin}\\
&\emph{gothic}&GothicBBB-Medium&\cs{tengt} &\cs{sevengt} &\cs{fivegt}\\
\midrule
\smash{\raisebox{-1ex}{\emph{tate} (vertical)}}&
\emph{mincho}&Ryumin-Light    &\cs{tentmin}&\cs{seventmin}&\cs{fivetmin}\\
&\emph{gothic}&GothicBBB-Medium&\cs{tentgt} &\cs{seventgt} &\cs{fivetgt}\\
\bottomrule
\end{tabular}
\end{center}
%</en>
%<*ja>
\item 以下の12個の和文フォントが定義される：
\begin{center}\small
\begin{tabular}{cccccc}
\toprule
\emph{組方向}&\emph{字体}&\emph{フォント名}&\bf `10\,pt'&\bf`7\,pt'&\bf`5\,pt'\\\midrule
\smash{\raisebox{-1ex}{横組}}&
明朝体&Ryumin-Light    &\cs{tenmin}&\cs{sevenmin}&\cs{fivemin}\\
&ゴシック体&GothicBBB-Medium&\cs{tengt} &\cs{sevengt} &\cs{fivegt}\\
\midrule
\smash{\raisebox{-1ex}{縦組}}&
明朝体&Ryumin-Light    &\cs{tentmin}&\cs{seventmin}&\cs{fivetmin}\\
&ゴシック体&GothicBBB-Medium&\cs{tentgt} &\cs{seventgt} &\cs{fivetgt}\\
\bottomrule
\end{tabular}
\end{center}
%</ja>
\begin{itemize}
%<*en>
\item It is widely accepted that fonts ``Ryumin-Light'' and
      ``GothicBBB-Medium'' aren't embedded into PDF files, and a PDF reader
      substitute them by some external Japanese fonts (\textit{e.g.},
      Ryumin-Light is substituted with Kozuka Mincho in Adobe Reader).
      We adopt this custom to the default setting.
%</en>
%<*ja>
\item ``Ryumin-Light''と``GothicBBB-Medium''はPDFファイルに埋め込まずに
      名前参照のみで用いることが広く受け入れられており，この場合PDFリーダーが
      適切な外部フォントで代用する（例えば，Adobe ReaderではRyumin-Lightは
      小塚明朝で代替される）．そこで，これらを引き続きデフォルトのフォントと
      して採用する．
%</ja>

%<*en>
\item A character in an alphabetic font is generally smaller than a
      Japanese font in the same size. So actual size specification of
      these Japanese fonts is in fact smaller than that of alphabetic
      fonts, namely scaled by 0.962216.
%</en>
%<*ja>
\item 欧文フォントの文字は和文フォントの文字よりも，同じ文字サイズでも
      一般に小さくデザインされている．そこで，標準ではこれらの和文フォントの実際のサイズは指定された値よりも
      小さくなるように設定されており，具体的には指定の0.962216倍にスケールされる．
      この0.962216という数値も，\pTeX におけるスケーリングを踏襲した値である．
%</ja>
\end{itemize}

%<*en>
\item The amount of glue that are inserted between a \textbf{JAchar} and
      an \textbf{ALchar} (the parameter \Param{xkanjiskip}) is set to
%</en>
%<*ja>
\item \textbf{JAchar}と\textbf{ALchar}の間に入るグルー(\Param{xkanjiskip})の
      量は次のように設定されている：
%</ja>
\[
 (0.25\cdot 0.962216\cdot 10\,\mathrm{pt})^{+1\,\text{pt}}_{-1\,\text{pt}}
 = 2.40554\,\mathrm{pt}^{+1\,\text{pt}}_{-1\,\text{pt}}.
\]
\end{itemize}

%<en>\subsection{Using in \LaTeX}
%<ja>\subsection{\LaTeX で使う}
\label{ssec-ltx}

\paragraph{\LaTeXe}

%<*en>
Using in \LaTeXe\ is basically same. To set up the minimal environment
for Japanese, you only have to load \texttt{luatexja.sty}:
%</en>
%<*ja>
\LaTeXe を用いる場合も基本的には同じである．日本語組版のための最低限の環境を
設定するためには，\texttt{luatexja.sty}を読み込むだけでよい：
%</ja>
\begin{verbatim}
\usepackage{luatexja}
\end{verbatim}
%<*en>
It also does minimal settings (counterparts in \pLaTeX\ are \texttt{%
plfonts.dtx} and \texttt{pldefs.ltx}):
%</en>
%<*ja>
これで\pLaTeX の\texttt{plfonts.dtx}と\texttt{pldefs.ltx}に相当する最低限の設定が
なされる：
%</ja>

\begin{itemize}
%<*en>
\item Font encodings for Japanese fonts is \texttt{JY3}~(for horizontal direction) and
\texttt{JT3}~(for vertical direction).
%</en>
%<*ja>
\item 和文フォントのエンコーディングとしては，横組用には \texttt{JY3}，縦組用には\
\texttt{JT3}が用いられる．
%</ja>

%<*en>
\item Traditionally, Japanese documents use two typeface categories: \emph{mincho}~(明朝体) and
 \emph{gothic}~(\textgt{ゴシック体}). \emph{mincho} is used in the main text, while \emph{gothic}
      is used in the headings or for emphasis.
\begin{center}\small
\begin{tabular}{lllc}
\toprule
\textbf{classification}&&&\textbf{family name}\\\midrule
\emph{mincho} (明朝体)&\verb+\textmc{...}+&\verb+{\mcfamily ...}+&\cs{mcdefault}\\
\emph{gothic} (\textgt{ゴシック体})&\verb+\textgt{...}+&\verb+{\gtfamily ...}+&\cs{gtdefault}\\
\bottomrule
\end{tabular}
\end{center}
\item
By default, the following fonts are used for \emph{mincho} and \emph{gothic}:
\begin{center}\small
\begin{tabular}{ccccc}
\toprule
\textbf{classification}&\textbf{family name}&\cs{mdseries}&\cs{bfseries}&\textbf{scale}\\\midrule
\emph{mincho} (明朝体)&\tt mc&Ryumin-Light    &GothicBBB-Medium&0.962216\\
\emph{gothic} (\textgt{ゴシック体})&\tt gt&GothicBBB-Medium&GothicBBB-Medium&0.962216\\
\bottomrule
\end{tabular}
\end{center}
Note that the bold series in both family are same as the medium series of \emph{gothic} family.
This is a convention in \pLaTeX. This is trace that there were only 2~fonts (these are Ryumin-Light
and GothicBBB-Medium) in early years of DTP. There is no italic nor slanted shape for
      these \texttt{mc}~and~\texttt{gt}.
%</en>
%<*ja>
\item \pLaTeX と同様に，標準では「明朝体」「ゴシック体」の2種類を用いる：
\begin{center}\small
\begin{tabular}{cllc}
\toprule
\emph{字体}&&&\emph{ファミリ名}\\\midrule
明朝体&\verb+\textmc{...}+&\verb+{\mcfamily ...}+&\cs{mcdefault}\\
\textgt{ゴシック体}&\verb+\textgt{...}+&\verb+{\gtfamily ...}+&\cs{gtdefault}\\
\bottomrule
\end{tabular}
\end{center}
\item 標準では，次のフォントファミリが用いられる：
\begin{center}\small
\begin{tabular}{ccccc}
\toprule
\emph{字体}&\emph{ファミリ}&\cs{mdseries}&\cs{bfseries}&\emph{スケール}\\\midrule
明朝体&\tt mc&Ryumin-Light    &GothicBBB-Medium&0.962216\\
ゴシック体&\tt gt&GothicBBB-Medium&GothicBBB-Medium&0.962216\\
\bottomrule
\end{tabular}
\end{center}
どちらのファミリにおいても，そのboldシリーズで使われるフォントは
ゴシック体のmediumシリーズで使われるフォントと同じあることに注意．
これは初期のDTPにおいて和文フォントが2つ（それがちょうど\
Ryumin-Light, GothicBBB-Mediumだった）しか利用できなかった時の名残であり，\pLaTeX{}
での標準設定とも同じである．
%</ja>


%<en>\item Japanese characters in math mode are typeset by the font family \texttt{mc}.
%<ja>\item 数式モード中の和文文字は明朝体(\texttt{mc})で出力される．
\end{itemize}

%<*en>
However, above settings are not sufficient for Japanese-based
documents. To typeset Japanese-based documents, you are better to use
class files other than \texttt{article.cls}, \texttt{book.cls}, and so on.  At
the present, we have the counterparts of \Pkg{jclasses} (standard
classes in \pLaTeX) and \Pkg{jsclasses} (classes by Haruhiko
Okumura), namely, \Pkg{ltjclasses}\footnote{%
  \texttt{ltjarticle.cls},~\texttt{ltjbook.cls}, \texttt{ltjreport.cls},
  \texttt{ltjtarticle.cls}, \texttt{ltjtbook.cls}, \texttt{ltjtreport.cls}.
  The latter \texttt{ltjt*.cls} are for vertically writtened Japanese documents.
} and \Pkg{ltjsclasses}\footnote{%
  \texttt{ltjsarticle.cls},~\texttt{ltjsbook.cls},~\texttt{ltjskiyou.cls}.}.
%</en>
%<*ja>
しかしながら，上記の設定は日本語の文書にとって十分とは言えない．
日本語文書を組版するためには，\texttt{article.cls}, \texttt{book.cls}といった
欧文用のクラスファイルではなく，和文用のクラスファイルを用いた方がよい．
現時点では，\Pkg{jclasses}（\pLaTeX の標準クラス）と\Pkg{jsclasses}
（奥村晴彦氏による「\pLaTeXe 新ドキュメントクラス」）に対応するものとして，
\Pkg{ltjclasses}\footnote{%
  横組用は \texttt{ltjarticle.cls},~\texttt{ltjbook.cls}, \texttt{ltjreport.cls} であり，
  縦組用は \texttt{ltjtarticle.cls}, \texttt{ltjtbook.cls}, \texttt{ltjtreport.cls} である．
}，
\Pkg{ltjsclasses}\footnote{%
  \texttt{ltjsarticle.cls},~\texttt{ltjsbook.cls},~\texttt{ltjskiyou.cls}.}%
がそれぞれ用意されている．
%</ja>

%<en>\section{Changing Fonts}
%<ja>\section{フォントの変更}

\subsection{plain \TeX~and~\LaTeXe}
\label{ssec-chgfnt}

\paragraph{plain \TeX}
%<*en>
To change Japanese fonts in plain \TeX, you must use the command
\cs{jfont}~and~\cs{tfont}. So please see Subsection~\ref{ssec-jfont}.
%</en>
%<*ja>
plain \TeX で和文フォントを変更するためには，
\pTeX のように \cs{jfont} 命令や \cs{tfont} 命令を直接用いる．
\ref{ssec-jfont}節を参照．
%</ja>

\paragraph{\LaTeXe\ (NFSS2)}
%<*en>
For \LaTeXe, \LuaTeX-ja adopted most of the font selection system of \pLaTeXe\ (in \texttt{plfonts.dtx}).
%</en>
%<*ja>
\LaTeXe については，\LuaTeX-jaではフォント選択システムを\pLaTeXe\ (\texttt{plfonts.dtx})
の大部分をそのまま採用している．
%</ja>
\begin{itemize}
%<*en>
\item Commands \cs{fontfamily}, \cs{fontseries},
      \cs{fontshape}, and \cs{selectfont} can be used to change
      attributes of Japanese fonts.
%</en>
%<*ja>
\item \cs{fontfamily}, \cs{fontseries}, \cs{fontshape}, そして
      \cs{selectfont} が和文フォントの属性を変更するために使用できる．
%</ja>

%<*en>
\begin{center}\small
\begin{tabular}{cccccc}
\toprule
&\textbf{encoding}&\textbf{family}&\textbf{series}&\textbf{shape}&\textbf{selection}\\\midrule
alphabetic fonts
&\cs{romanencoding}&\cs{romanfamily}&\cs{romanseries}&\cs{romanshape}
&\cs{useroman}\\
Japanese fonts
&\cs{kanjiencoding}&\cs{kanjifamily}&\cs{kanjiseries}&\cs{kanjishape}
&\cs{usekanji}\\
both&---&--&\cs{fontseries}&\cs{fontshape}&---\\
auto select&\cs{fontencoding}&\cs{fontfamily}&---&---&\cs{usefont}\\
\bottomrule
\end{tabular}
\end{center}
%</en>
%<*ja>
\begin{center}\small
\begin{tabular}{cccccc}
\toprule
&\emph{エンコーディング}&\emph{ファミリ}&\emph{シリーズ}&\emph{シェープ}&\emph{選択}\\\midrule
欧文
&\cs{romanencoding}&\cs{romanfamily}&\cs{romanseries}&\cs{romanshape}
&\cs{useroman}\\
和文
&\cs{kanjiencoding}&\cs{kanjifamily}&\cs{kanjiseries}&\cs{kanjishape}
&\cs{usekanji}\\
両方&---&--&\cs{fontseries}&\cs{fontshape}&---\\
自動選択&\cs{fontencoding}&\cs{fontfamily}&---&---&\cs{usefont}\\
\bottomrule
\end{tabular}
\end{center}
%</ja>

%<*en>
      \verb+\fontencoding{+<encoding>\verb+}+ changes the encoding of alphabetic fonts
      or Japanese fonts depending on the argument. For example,
      \verb+\fontencoding{JY3}+ changes the encoding of Japanese fonts to
      \texttt{JY3},and \verb+\fontencoding{T1}+ changes the encoding of
      alphabetic fonts to \texttt{T1}.
      \cs{fontfamily} also changes the current Japanese font family,
      the current alphabetic font family, \emph{or both}.
      For the detail, see Subsection~\ref{ssec-nfsspat}.
%</en>
%<*ja>
      ここで，\verb+\fontencoding{+<encoding>\verb+}+ は，引数により和文側か欧文
      側かのどちらかのエンコーディングを変更する．例えば，
      \verb+\fontencoding{JY3}+ は和文フォントのエンコーディングを
      \texttt{JY3}に変更し，\verb+\fontencoding{T1}+ は欧文フォント側を
      \texttt{T1}へと変更する．\cs{fontfamily} も引数により和文側，欧文
      側，\emph{あるいは両方}のフォントファミリを変更する．詳細は
      \ref{ssec-nfsspat}節を参照すること．
%</ja>

%<*en>
\item For defining a Japanese font family, use
      \cs{DeclareKanjiFamily} instead of
      \cs{DeclareFontFamily}. However, in the present implementation,
      using \cs{DeclareFontFamily} doesn't cause any problem.
\item Defining a Japanese font shape can be done by usual \cs{DeclareFontShape}:
%</en>
%<*ja>
\item 和文フォントファミリの定義には \cs{DeclareFontFamily} の
      代わりに \cs{DeclareKanjiFamily} を用いる．しかし，現在の
      実装では \cs{DeclareFontFamily} を用いても問題は生じない．
\item 和文フォントのシェイプを定義するには，通常の \cs{DeclareFontShape} を使えば良い：
%</ja>
\begin{verbatim}
\DeclareFontShape{JY3}{mc}{bx}{n}{<-> s*KozMinPr6N-Bold:jfm=ujis;-kern}{}
    % Kozuka Mincho Pr6N Bold
\end{verbatim}
%<*ja>
仮名書体を使う場合など，複数の和文フォントを組み合わせて使いたい場合は
\ref{ssec-altfont}節の \cs{ltjdeclarealtfont} と，その\LaTeX 版の\
\cs{DeclareAlternateKanjiFont}（\ref{ssec-nfsspat}節）を参照せよ．
%</ja>
\end{itemize}

%<*en>
\paragraph{Remark: Japanese characters in math mode}
Since \pTeX\ supports Japanese characters in math mode, there are
sources like the following:
%</en>
%<*ja>
\paragraph{注意：数式モード中の和文文字}
\pTeX では，特に何もしないでも数式中に和文文字を記述することができた．そのため，
以下のようなソースが見られた：
%</ja>

\begin{LTXexample}
$f_{高温}$~($f_{\text{high temperature}}$).
\[ y=(x-1)^2+2\quad よって\quad y>0 \]
$5\in 素:=\{\,p\in\mathbb N:\text{$p$ is a prime}\,\}$.
\end{LTXexample}
%<*en>
We (the project members of \LuaTeX-ja) think that using
Japanese characters in math mode are allowed if and only if these are used as identifiers.
In this point of view,
%</en>
%<*ja>
\LuaTeX-jaプロジェクトでは，数式モード中での和文文字はそれらが識別子として用いられる
ときのみ許されると考えている．
この観点から，
%</ja>

\begin{itemize}
%<*en>
\item The lines 1~and~2 above are not correct, since ``高温'' in above is used as a textual label, and
``よって'' is used as a conjunction.
%</en>
%<*ja>
\item 上記数式のうち1, 2行目は正しくない．なぜならば「高温」が意味のあるラベルと
      して，「よって」が接続詞として用いられているからである．
%</ja>
%<en>\item However, the line~3 is correct, since ``素'' is used as an identifier.
%<ja>\item しかしながら，3行目は「素」が単なる識別子として用いられているので正しい．
\end{itemize}
%<en>Hence, in our opinion, the above input should be corrected as:
%<ja>したがって，\LuaTeX-jaプロジェクトの意見としては，上記の入力は次のように直されるべきである：
\begin{LTXexample}
$f_{\text{高温}}$~%
($f_{\text{high temperature}}$).
\[ y=(x-1)^2+2\quad
  \mathrel{\text{よって}}\quad y>0 \]
$5\in 素:=\{\,p\in\mathbb N:\text{$p$ is a prime}\,\}$.
\end{LTXexample}
%<*en>
We also believe that using Japanese characters as identifiers is rare,
hence we don't describe how to change Japanese fonts in math mode in
this chapter. For the method, please see Subsection~\ref{ssec-math}.
%</en>
%<*ja>
また\LuaTeX-jaプロジェクトでは，和文文字が識別子として用いられることはほとんどない
と考えており，したがってこの節では数式モード中の和文フォントを変更する方法については
記述しない．この方法については\ref{ssec-math}節を参照のこと．
%</ja>


\subsection{fontspec}
\label{ssec-fontspec}
%<*en>
To coexist with the \Pkg{fontspec} package, it is needed to load
\Pkg{luatexja-fontspec} package in the preamble, as follows:
\begin{quote}
\ttfamily \textbackslash usepackage[<options>]\{luatexja-fontspec\}
\end{quote}
This \Pkg{luatexja-fontspec} package
automatically loads \Pkg{luatexja} and \Pkg{fontspec}
package, if needed.
%</en>
%<*ja>
\Pkg{fontspec}パッケージと同様の機能を和文フォントに対しても用いる場合，
\Pkg{luatexja-fontspec}パッケージを読み込む：
\begin{quote}
\ttfamily \textbackslash usepackage[<options>]\{luatexja-fontspec\}
\end{quote}
このパッケージ
は必要ならば自動で\Pkg{luatexja}パッケージと\Pkg{fontspec}パッケージを読み込む．
%</ja>

%<*en>
In \Pkg{luatexja-fontspec} package, the following seven~commands are defined as
counterparts of original commands in the \Pkg{fontspec} package:
%</en>
%<*ja>
\Pkg{luatexja-fontspec}パッケージでは，以下の7つのコマンドを\Pkg{fontspec}
パッケージの元のコマンドに対応するものとして定義している：
%</ja>
%<*en>
\begin{center}\small
\begin{tabular}{ccccc}
\toprule
Japanese fonts
&\cs{jfontspec}&\cs{setmainjfont}&\cs{setsansjfont}&\cs{setmonojfont}$^*$\\
alphabetic fonts
&\cs{fontspec}&\cs{setmainfont}&\cs{setsansfont}&\cs{setmonofont}\\
\midrule
Japanese fonts
&\cs{newjfontfamily}&\cs{newjfontface}
&\cs{defaultjfontfeatures}&\cs{addjfontfeatures}\\
alphabetic fonts
&\cs{newfontfamily}&\cs{newfontface}
&\cs{defaultfontfeatures}&\cs{addfontfeatures}\\
\bottomrule
\end{tabular}
\end{center}
%</en>
%<*ja>
\begin{center}\small
\begin{tabular}{cccc}
\toprule
和文
&\cs{jfontspec}&\cs{setmainjfont}&\cs{setsansjfont}\\
欧文
&\cs{fontspec}&\cs{setmainfont}&\cs{setsansfont}\\
\midrule
和文
&\cs{newjfontfamily}&\cs{newjfontface}&\cs{defaultjfontfeatures}\\
欧文
&\cs{newfontfamily}&\cs{newfontface}&\cs{defaultfontfeatures}\\
\midrule
和文
&\cs{addjfontfeatures}\\
欧文
&\cs{addfontfeatures}\\
\bottomrule
\end{tabular}
\end{center}
%</ja>
%<*en>
The package option of \Pkg{luatexja-fontspec} are the followings:
\begin{cslist}
 \item[match]
If this option is specified, usual family-changing commands such as
\cs{rmfamily},~\cs{textrm}, \cs{sffamily},~\dots\ also change Japanese font family.

Note that \emph{\cs{setmonojfont} is defined
if and only if this \texttt{\textup{match}} option is specified}.

 \item[pass=<opts>]
Specify options <opts> which will be passed to the \Pkg{fontspec} package.
\end{cslist}
The reason that \cs{setmonojfont} is not defined by default is that
it is popular for Japanese fonts that nearly all Japanese glyphs have same
widths.  Also note that kerning information in a font is not used
(that is, \texttt{kern} feature is set off) by default in these seven (or~eight) commands.
This is because of the compatibility with previous versions of \LuaTeX-ja
(see \ref{para-kern}).
%</en>
%<*ja>
\Pkg{luatexja-fontspec} パッケージのオプションは以下の通りである：
\begin{cslist}
 \item[match]
このオプションが指定されると，「\pLaTeXe 新ドキュメントクラス」のように\
\cs{rmfamily}, \verb+\textrm{...}+, \cs{sffamily} 等が
欧文フォントだけでなく和文フォントも変更するようになる．

\emph{なお，\cs{setmonojfont} はこの \texttt{match} オプションが
指定された時のみ定義される．}この命令は標準の「タイプライタ体に対応する和文フォント」を指定する．

 \item[pass=<opts>]
\Pkg{fontspec} パッケージに渡すオプション <opts> を指定する．
\end{cslist}
標準で \cs{setmonojfont} コマンドが定義されないのは，
和文フォントではほぼ全ての和文文字のグリフが等幅であるのが伝統的であったことによる．
また，これらの和文用のコマンドではフォント内のペアカーニング情報は標準では使用されない，
言い換えれば \texttt{kern} featureは標準では無効化となっている．
これは以前のバージョンの\LuaTeX-jaとの互換性のためである（\ref{para-kern}節を参照）．
%</ja>

\begin{LTXexample}[width=0.4\textwidth]
\fontspec[Numbers=OldStyle]{LMSans10-Regular}
\jfontspec[CJKShape=NLC]{KozMinPr6N-Regular}
JIS~X~0213:2004→辻

\jfontspec[CJKShape=JIS1990]{KozMinPr6N-Regular}
JIS~X~0208:1990→辻
\end{LTXexample}

%<en>\subsection{Presets}
%<ja>\subsection{プリセット設定}
\label{ssec-preset}

%<*en>
To use standard Japanese font settings easily, one can load \Pkg{luatexja-preset}
package with several options. This package provides functions in a part of
\Pkg{japanese-otf} package and a part of \Pkg{PXchfon} package by Takayuki Yato,
and loads \Pkg{luatexja-fontspec}, hence \Pkg{fontspec} internally.

If you need to pass some options to \Pkg{fontspec}, load \Pkg{fontspec} manually
before \Pkg{luatexja-preset}:
%</en>
%<*ja>
よく使われている和文フォント設定を一行で指定できるようにしたのが
\Pkg{luatexja-preset}パッケージである．このパッケージは，
\Pkg{otf}パッケージの一部機能と八登崇之氏による\Pkg{PXchfon}パッケージの一部機能とを
合わせたような格好をしており，内部で\Pkg{luatexja-fontspec}，従って
\Pkg{fontspec}を読み込んでいる．

もし\Pkg{fontspec}パッケージに何らかのオプションを渡す必要がある
\footnote{例えば，数式フォントまで置換されてしまい，\cs{mathit}によってギリシャ文字の
斜体大文字が出なくなる，など．}場合は，
次のように\Pkg{luatexja-preset}の前に\Pkg{fontspec}を手動で読みこめば良い：
%</ja>
\begin{verbatim}
\usepackage[no-math]{fontspec}
\usepackage[...]{luatexja-preset}
\end{verbatim}

%<en>\paragraph{General options}
%<ja>\paragraph{一般的なオプション}
\begin{cslist}

\item[nodeluxe]
%<*en>
Use one-weighted \textit{mincho} and \textit{gothic} font families.
This means that \verb+\mcfamily\bfseries+, \verb+\gtfamily\bfseries+ and
\verb+\gtfamily\mdseries+ use the same font.
\emph{This option is enabled by default.}
%</en>
%<*ja>
\LaTeXe 環境下での標準設定のように，明朝体・ゴシック体を各1ウェイトで使用する．
より具体的に言うと，この設定の下では
\ \verb+\mcfamily\bfseries+, \verb+\gtfamily\bfseries+, 
\verb+\gtfamily\mdseries+はみな同じフォントとなる．
\emph{このオプションは標準で有効になっている．}
%</ja>
\item[deluxe]
%<*en>
Use \textit{mincho} with two weights (medium~and~bold),
\textit{gothic} with three weights (medium, bold~and~heavy), and \textit{rounded gothic}%
\footnote{Provided by \cs{mgfamily} and \cs{textmg},
because \textit{rounded gothic} is called \textit{maru gothic} (丸ゴシック) in Japanese.}.
The heavy weight of \textit{gothic} can be used by ``changing the family'' \cs{gtebfamily},
or \verb+\textgteb{...}+.
This is because \Pkg{fontspec} package can handle only medium (\cs{mdseries}) and
bold (\cs{bfseries}).
%</en>
%<*ja>
明朝体2ウェイト・ゴシック体3ウェイトと，
丸ゴシック体 (\cs{mgfamily}, \verb+\textmg{...}+) を使用可能とする．
ゴシック体は細字・太字・極太の3ウェイトがあるが，
極太ゴシック体はファミリの切り替え (\cs{gtebfamily}, \verb+\textgteb{...}+) %
で実現している．\Pkg{fontspec}では通常 (\cs{mdseries}) と太字 (\cs{bfseries}) しか扱えないために
このような中途半端な実装になっている．
%</ja>
\item[expert]
%<*en>
Use horizontal kana alternates, and define a command \cs{rubyfamily} to use kana
characters designed for ruby.
%</en>
%<ja>横組専用仮名を用いる．また，\cs{rubyfamily} でルビ用仮名が使用可能となる．
\item[bold]
%<en>Substitute bold series of \textit{gothic} for  bold series of \textit{mincho}.
%<ja>「明朝の太字」をゴシック体の太字によって代替する．
\item[90jis]
%<en>Use 90JIS glyph variants if possible.
%<ja>出来る限り90JISの字形を使う．
\item[jis2004]
%<en>Use JIS2004 glyph variants if possible.
%<ja>出来る限りJIS2004の字形を使う．
\item[jis]
%<*en>
Use the JFM \texttt{jfm-jis.lua}, instead of \texttt{jfm-ujis.lua}, which is the default JFM of
\LuaTeX-ja.
%</en>
%<*ja>
用いるJFMを（JISフォントメトリック類似の）\texttt{jfm-jis.lua}にする．このオプションがない時は
\LuaTeX-ja標準の\texttt{jfm-ujis.lua}が用いられる．
%</ja>
\end{cslist}
%<*en>
Note that \texttt{90jis} and \texttt{jis2004} only affect with \textit{mincho},
\textit{gothic} (and possibly \textit{rounded gothic}) defined by this package.
We didn't taken account of  when both \texttt{90jis} and \texttt{jis2004} are specified.
%</en>
%<*ja>
\texttt{90jis}と\texttt{jis2004}については本パッケージで定義された
明朝体・ゴシック体（・丸ゴシック体）にのみ有効である．両オプションが
同時に指定された場合の動作については全く考慮していない．
%</ja>

\newpage
%<en>\paragraph{Presets for multi weight}
%<ja>\paragraph{多ウェイト用プリセットの一覧}
%<*en>
Besides \texttt{morisawa-pro}~and~\texttt{morisawa-pr6n} presets,
fonts are specified by font name, not by file name.
%</en>
%<*ja>
\texttt{morisawa-pro}, \texttt{morisawa-pr6n}以外はフォントの指定は
（ファイル名でなく）フォント名で行われる．
%</ja>
\begin{cslist}[style=standard]
 \item[kozuka-pro] Kozuka Pro (Adobe-Japan1-4) fonts.
%<en>    \\*[-\dimexpr\medskipamount+\baselineskip\relax]
 \item[kozuka-pr6] Kozuka Pr6 (Adobe-Japan1-6)  fonts.
%<en>    \\*[-\dimexpr\medskipamount+\baselineskip\relax]
 \item[kozuka-pr6n] Kozuka Pr6N (Adobe-Japan1-6, JIS04-savvy) fonts.

%<*en>
Kozuka Pro/Pr6N fonts are bundled with Adobe's software, such as Adobe~InDesign.
There is not rounded gothic family in Kozuka fonts.
%</en>
%<*ja>
小塚Pro書体・Pr6N書体はAdobe InDesign等のAdobe製品にバンドルされている．
「小塚丸ゴシック」は存在しないので，便宜的に小塚ゴシックHによって代用している．
%</ja>
\begin{center}\small
\begin{tabular}{cllll}
\toprule
\bf family&\bf series&\tt kozuka-pro&\tt kozuka-pr6&\tt kozuka-pr6n\\
\midrule
 &medium&KozMinPro-Regular&KozMinProVI-Regular&KozMinPr6N-Regular\\
%<en>\smash{\raisebox{1.5ex}{\textit{mincho}}}%
%<ja>\smash{\raisebox{1.5ex}{\gt 明朝}}%
 &bold&KozMinPro-Bold&KozMinProVI-Bold&KozMinPr6N-Bold\\
\midrule
 &&KozGoPro-Regular*&KozGoProVI-Regular*&KozGoPr6N-Regular*\\
 &\smash{\raisebox{1.5ex}{medium}}
 &KozGoPro-Medium&KozGoProVI-Medium&KozGoPr6N-Medium\\
\cmidrule(l){2-5}
%<en>\smash{\raisebox{2ex}{\textit{gothic}}}%
%<ja>\smash{\raisebox{2ex}{\gt ゴシック}}%
 &bold&KozGoPro-Bold&KozGoProVI-Bold&KozGoPr6N-Bold\\
 &heavy&KozGoPro-Heavy&KozGoProVI-Heavy&KozGoPr6N-Heavy\\
\midrule
%<en>\textit{rounded gothic}
%<ja>\gt 丸ゴシック
&&KozGoPro-Heavy&KozGoProVI-Heavy&KozGoPr6N-Heavy\\
\bottomrule
\end{tabular}
\end{center}

%<*en>
In above table, starred fonts (KozGo\dots-Regular) are used for medium series of \textit{gothic},
\emph{if and only if \texttt{deluxe} option is specified}.
%</en>
%<*ja>
上の表において，*つきのフォント(KozGo\dots-Regular)は，\emph{\texttt{deluxe}オプション非指定時に}
ゴシック体細字として用いられる．
%</ja>

%<ja>\medskip

 \item[hiragino-pro]  Hiragino Pro (Adobe-Japan1-5) fonts.
%<en>    \\*[-\dimexpr\medskipamount+\baselineskip\relax]
 \item[hiragino-pron] Hiragino ProN (Adobe-Japan1-5, JIS04-savvy) fonts.

%<*en>
Hiragino fonts are bundled with Mac OS~X 10.5 or later.
Some editions of a Japanese word-processor ``一太郎2012'' includes Hiragino ProN fonts.
Note that the heavy weight of \textit{gothic} family only supports
Adobe-Japan1-3 character collection (Std/StdN).
%</en>
%<*ja>
ヒラギノフォントは，Mac OS~X以外にも，一太郎2012の上位エディションにもバンドルされている．
極太ゴシックとして用いるヒラギノ角ゴW8は，Adobe-Japan1-3の範囲しかカバーしていない
Std/StdNフォントであり，その他はAdobe-Japan1-5対応である．
%</ja>
\begin{center}\small
\begin{tabular}{clll}
\toprule
\bf family&\bf series&\tt hiragino-pro&\tt hiragino-pron\\
\midrule
 &medium&Hiragino~Mincho~Pro~W3&Hiragino~Mincho~ProN~W3\\
%<en>\smash{\raisebox{1.5ex}{\textit{mincho}}}%
%<ja>\smash{\raisebox{1.5ex}{\gt 明朝}}%
 &bold&Hiragino~Mincho~Pro~W6&Hiragino~Mincho~ProN~W6\\
\midrule
 &&Hiragino~Kaku~Gothic~Pro~W3*&Hiragino~Kaku~Gothic~ProN~W3*\\
 &\smash{\raisebox{1.5ex}{medium}}
 &Hiragino~Kaku~Gothic~Pro~W6&Hiragino~Kaku~Gothic~ProN~W6\\
\cmidrule(l){2-4}
%<en>\smash{\raisebox{2ex}{\textit{gothic}}}%
%<ja>\smash{\raisebox{2ex}{\gt ゴシック}}%
 &bold&Hiragino~Kaku~Gothic~Pro~W6&Hiragino~Kaku~Gothic~ProN~W6\\
 &heavy&Hiragino~Kaku~Gothic~Std~W8&Hiragino~Kaku~Gothic~StdN~W8\\
\midrule
%<en>\textit{rounded gothic}
%<ja>\gt 丸ゴシック
&&Hiragino~Maru~Gothic~ProN~W4&Hiragino~Maru~Gothic~ProN~W4\\
\bottomrule
\end{tabular}
\end{center}

%<ja>\medskip

 \item[morisawa-pro]  Morisawa Pro (Adobe-Japan1-4) fonts.
%<en>    \\*[-\dimexpr\medskipamount+\baselineskip\relax]
 \item[morisawa-pr6n]  Morisawa Pr6N (Adobe-Japan1-6, JIS04-savvy) fonts.

\begin{center}\small
\begin{tabular}{cl>{\tt}l>{\tt}l}
\toprule
\bf family&\bf series&morisawa-pro&morisawa-pr6n\\
\midrule
 &medium&A-OTF-RyuminPro-Light.otf&A-OTF-RyuminPr6N-Light.otf\\
%<en>\smash{\raisebox{1.5ex}{\textit{mincho}}}%
%<ja>\smash{\raisebox{1.5ex}{\gt 明朝}}%
 &bold&A-OTF-FutoMinA101Pro-Bold.otf&A-OTF-FutoMinA101Pr6N-Bold.otf\\
\midrule
 &medium
 &A-OTF-GothicBBBPro-Medium.otf&A-OTF-GothicBBBPr6N-Medium.otf\\
%<en>\textit{gothic}%
%<ja>\gt ゴシック
 &bold&A-OTF-FutoGoB101Pro-Bold.otf&A-OTF-FutoGoB101Pr6N-Bold.otf\\
 &heavy&A-OTF-MidashiGoPro-MB31.otf&A-OTF-MidashiGoPr6N-MB31.otf\\
\midrule
%<en>\textit{rounded gothic}
%<ja>\gt 丸ゴシック
&&A-OTF-Jun101Pro-Light.otf&A-OTF-ShinMGoPr6N-Light.otf\\
\bottomrule
\end{tabular}
\end{center}

\newpage
 \item[yu-win]  Yu fonts bundled with Windows~8.1.
%<en>    \\*[-\dimexpr\medskipamount+\baselineskip\relax]
 \item[yu-osx]  Yu fonts bundled with OSX~Mavericks.

\begin{center}\small
\begin{tabular}{clll}
\toprule
\bf family&\bf series&\tt yu-win&\tt yu-osx\\
\midrule
 &medium&YuMincho-Regular&YuMincho~Medium\\
%<en>\smash{\raisebox{1.5ex}{\textit{mincho}}}%
%<ja>\smash{\raisebox{1.5ex}{\gt 明朝}}%
 &bold&YuMincho-Demibold&YuMincho~Demibold\\
\midrule
 &&YuGothic-Regular*&YuGothic~Medium*\\
 &\smash{\raisebox{1.5ex}{medium}}
 &YuGothic-Bold&YuGothic~Bold\\
\cmidrule(l){2-4}
%<en>\textit{gothic}%
%<ja>\gt ゴシック
 &bold&YuGothic-Bold&YuGothic~Bold\\
 &heavy&YuGothic-Bold&YuGothic~Bold\\
\midrule
%<en>\textit{rounded gothic}
%<ja>\gt 丸ゴシック
&&YuGothic-Bold&YuGothic~Bold\\
\bottomrule
\end{tabular}
\end{center}

\end{cslist} 
%<en>\paragraph{Presets for single weight}
%<ja>\paragraph{単ウェイト用プリセット一覧}
%<*en>
Next, we describe settings for using only single weight.
In four settings below, we use same fonts for medium and bold (and heavy) weights.
(Hence \verb+\mcfamily\bfseries+ and \verb+\mcfamily\mdseries+ yields same Japanese fonts,
even if \texttt{deluxe} option is also specified).
%</en>
%<*ja>
次に，単ウェイト用の設定を述べる．この4設定では「細字」「太字」の区別はない．
また，丸ゴシック体はゴシック体と同じフォントを用いる．
%</ja>
\par\nobreak\medskip
{\centering\small
\begin{tabular}{lllll}
\toprule
&\tt noembed&\tt ipa&\tt ipaex&\tt ms\\
\midrule
%<*en>
\it mincho&Ryumin-Light (non-embedded)
&IPAMincho&IPAexMincho&MS Mincho\\
\it gothic&GothicBBB-Medium (non-embedded)
&IPAGothic&IPAexGothic&MS Gothic\\
%</en>
%<*ja>
\gtfamily 明朝体&Ryumin-Light（非埋込）
&IPA明朝&IPAex明朝&MS明朝\\
\gtfamily ゴシック体&GothicBBB-Medium（非埋込）
&IPAゴシック&IPAexゴシック&MSゴシック\\
%</ja>
\bottomrule
\end{tabular}\par\medskip}


%<en>\paragraph{Using HG fonts}
%<ja>\paragraph{HGフォントの利用}
%<*en>
We can use HG~fonts bundled with Microsoft~Office for realizing multiple weights.
%</en>
%<*ja>
すぐ前に書いた単ウェイト用設定を，Microsoft Office等に付属するHGフォントを使って
多ウェイト化した設定もある．
%</ja>
\par\nobreak\medskip
{\centering\small
\begin{tabular}{llll}
\toprule
&\tt ipa-hg&\tt ipaex-hg&\tt ms-hg\\
\midrule
%<*en>
\bf mincho medium
&IPAMincho&IPAexMincho&MS Mincho\\\midrule
\bf mincho bold&
\multicolumn{3}{c}{HG Mincho E}\\\midrule
\bf Gothic medium\\
~~without \texttt{deluxe}
&IPAGothic&IPAexGothic&MS Gothic\\
~~with {\tt jis2004}
&IPAGothic&IPAexGothic&MS Gothic\\
\cmidrule(lr){1-4}
~~otherwise&
\multicolumn{3}{c}{HG Gothic M}\\\midrule
\bf gothic bold&
\multicolumn{3}{c}{HG Gothic E}\\\midrule
\bf gothic heavy&
\multicolumn{3}{c}{HG Soei Kaku Gothic UB}\\\midrule
\bf rounded gothic&
\multicolumn{3}{c}{HG Maru Gothic PRO}\\
%</en>
%<*ja>
\gtfamily 明朝体細字
&IPA明朝&IPAex明朝&MS明朝\\\midrule
\gtfamily 明朝体太字&
\multicolumn{3}{c}{HG明朝E}\\\midrule
\gtfamily ゴシック体細字\\
　単ウェイト時
&IPAゴシック&IPAexゴシック&MSゴシック\\
　{\tt jis2004}指定時
&IPAゴシック&IPAexゴシック&MSゴシック\\
\cmidrule(lr){1-4}
　それ以外の時&
\multicolumn{3}{c}{HGゴシックM}\\\midrule
\gtfamily ゴシック体太字&
\multicolumn{3}{c}{HGゴシックE}\\\midrule
\gtfamily ゴシック体極太&
\multicolumn{3}{c}{HG創英角ゴシックUB}\\\midrule
\gtfamily 丸ゴシック体&
\multicolumn{3}{c}{HG丸ゴシック体PRO}\\
%</ja>
\bottomrule
\end{tabular}\par\medskip}

%<*en>
Note that HG~Mincho~E, HG~Gothic~E, HG Soei Kaku Gothic UB, and HG Maru Gothic PRO
are internally specified by:
\begin{description}
\item[default] by font name (\texttt{HGMinchoE}, etc.).
\item[{\tt 90jis}] by file name (\texttt{hgrme.ttc}, \texttt{hgrge.ttc}, \texttt{hgrsgu.ttc}, \texttt{hgrsmp.ttf}).
\item[{\tt jis2004}] by file name (\texttt{hgrme04.ttc}, \texttt{hgrge04.ttc}, \texttt{hgrsgu04.ttc}, \texttt{hgrsmp04.ttf}).
\end{description}
%</en>
%<*ja>
なお，HG明朝E・HGゴシックE・HG創英角ゴシックUB・HG丸ゴシック体PROの4つについては，内部で
\begin{description}
\item[標準] フォント名（\texttt{HGMinchoE} など）
\item[{\tt 90jis}指定時] ファイル名 (%
\texttt{hgrme.ttc}, \texttt{hgrge.ttc}, \texttt{hgrsgu.ttc}, \texttt{hgrsmp.ttf})
\item[{\tt jis2004}指定時] ファイル名 (%
\texttt{hgrme04.ttc}, \texttt{hgrge04.ttc}, \texttt{hgrsgu04.ttc}, \texttt{hgrsmp04.ttf})
\end{description}
として指定を行っているので注意すること．
%</ja>


%<*en>
\subsection{\cs{CID}, \cs{UTF}, and macros in \Pkg{japanese-otf} package}
Under \pLaTeX, \Pkg{japanese-otf} package (developed by Shuzaburo Saito) is
used for typesetting characters which is in Adobe-Japan1-6 CID but not
in JIS~X~0208. Since this package is widely used, \LuaTeX-ja
supports some of functions in \Pkg{japanese-otf} package.
If you want to use these functions, load \Pkg{luatexja-otf} package.
%</en>
%<*ja>
\subsection{\cs{CID}, \cs{UTF}と\Pkg{otf}パッケージのマクロ}
\pLaTeX では，JIS~X~0208にないAdobe-Japan1-6の文字を出力するために，
齋藤修三郎氏による\Pkg{otf}パッケージが用いられていた．このパッケージは
広く用いられているため，\LuaTeX-jaにおいても\Pkg{otf}パッケージの機能の
一部をサポートしている．これらの機能を用いるためには\Pkg{luatexja-otf}パッケージ
を読み込めばよい．
%</ja>

\begin{LTXexample}
\jfontspec{KozMinPr6N-Regular.otf}
森\UTF{9DD7}外と内田百\UTF{9592}とが\UTF{9AD9}島屋に行く。

\CID{7652}飾区の\CID{13706}野家，
\CID{1481}城市，葛西駅，
高崎と\CID{8705}\UTF{FA11}

\aj半角{はんかくカタカナ}
\end{LTXexample}

%<*ja>
\Pkg{otf}パッケージでは，それぞれ次のようなオプションが存在した：
\begin{cslist}
\item[\cs{deluxe}] 明朝体・ゴシック体各2ウェイトと，丸ゴシック体を扱えるようになる．
\item[\cs{expert}] 仮名が横組・縦組専用のものに切り替わり，ルビ用仮名も
\ \cs{rubyfamily}\ によって扱えるようになる．
\item[\cs{bold}] ゴシック体を標準で太いウェイトのものに設定する．
\end{cslist}
しかしこれらのオプションは\Pkg{luatexja-otf}パッケージには存在しない．
\Pkg{otf}パッケージが文書中で使用する和文用TFMを自前の物に置き換えていたのに対し，
\Pkg{luatexja-otf}パッケージでは，そのようなことは行わないからである．

これら3オプションについては，
\Pkg{luatexja-preset} パッケージにプリセットを使う時に一緒に指定するか，
あるいは対応する内容を\ref{ssec-chgfnt}節，\ref{ssec-nfsspat}節 (NFSS2) や
\ref{ssec-fontspec}節 (\Pkg{fontspec}) の方法で手動で指定する必要がある．
%</ja>


%<en>\section{Changing Parameters}
%<ja>\section{パラメータの変更}

%<*en>
There are many parameters in \LuaTeX-ja. And due to the behavior of \LuaTeX,
most of them are not stored as internal register of \TeX, but as an
original storage system in \LuaTeX-ja. Hence, to assign or acquire those
parameters, you have to use commands \cs{ltjsetparameter} and
\cs{ltjgetparameter}.
%</en>
%<*ja>
\LuaTeX-jaには多くのパラメータが存在する．そして\LuaTeX の仕様のために，
その多くは\TeX のレジスタにではなく，\LuaTeX-ja独自の方法で保持されている．
これらのパラメータを設定・取得するためには \cs{ltjsetparameter} と \cs{ltjgetparameter} を
用いる．
%</ja>

%<en>\subsection{Editing the Range of \textbf{JAchar}s}
%<ja>\subsection{\textbf{JAchar}の範囲の設定}
\label{ssec-setrange}

%<*en>
\LuaTeX-ja divides the Unicode codespace \texttt{U+0080}--\texttt{U+10FFFF}
into \emph{character ranges},
numbered 1 to 217. The grouping can be (globally) customized by \cs{ltjdefcharrange}.
The next line adds whole characters in Supplementary Ideographic Plane
and the character ``漢'' to the character range~100.
%</en>
%<*ja>
\LuaTeX-jaは，Unicodeの \texttt{U+0080}--\texttt{U+10FFFF} の空間を
1番から217番までの\emph{文字範囲}に分割している．
区分けは \cs{ltjdefcharrange} を用いることで（グローバルに）変更することができ，
例えば，次は追加漢字面(SIP)にある全ての文字と「漢」を「100番の文字範囲」に追加する．
%</ja>
\begin{lstlisting}
\ltjdefcharrange{100}{"20000-"2FFFF,`漢}
\end{lstlisting}
%<*en>
A character can belong to only one character range.
For example, whole SIP belong to the range~4 in the default setting of \LuaTeX-ja,
and if you execute the above line, then SIP will belong to the range~100 and be
removed from the range~4.
%</en>
%<*ja>
各文字はただ一つの文字範囲に所属することができる．
例えば，SIPは全て\LuaTeX-jaのデフォルトでは4番の文字範囲に
属しているが，上記の指定を行えばSIPは100番に属すようになり，4番からは除かれる．
%</ja>

%<*en>
The distinction between \textbf{ALchar} and \textbf{JAchar} is done for character ranges.
This can be edited by setting the \textsf{jacharrange} parameter.
For example, this is just the default setting of \LuaTeX-ja, and
it sets
\begin{itemize}
 \item a character which belongs character ranges 1,~4, and~5 is \textbf{ALchar},
 \item a character which belongs character ranges 2,~3, 6, 7, and~8 is \textbf{JAchar}.
\end{itemize}
%</en>
%<*ja>
\textbf{ALchar}と\textbf{JAchar}の区別は文字範囲ごとに行われる．
これは\textsf{jacharrange}パラメータによって編集できる．
例えば，以下は\LuaTeX-jaの初期設定であり，次の内容を設定している：
\begin{itemize}
 \item 1番，4番，5番の文字範囲に属する文字は\textbf{ALchar}．
 \item 2番，3番，6番，7番，8番の文字範囲に属する文字は\textbf{JAchar}．
\end{itemize}
%</ja>
\begin{verbatim}
\ltjsetparameter{jacharrange={-1, +2, +3, -4, -5, +6, +7, +8}}
\end{verbatim}
%<*en>
The argument to \textsf{jacharrange} parameter is a list of non-zero integer.
Negative integer $-n$ in the list means that ``each character in the range~$n$ is an
\textbf{ALchar}'',
and positive integer $+n$ means that ``\dots\ is a \textbf{JAchar}''.
%</en>
%<*ja>
\textsf{jacharrange}パラメータの引数は非零の整数のリストである．
リスト中の負の整数$-n$は「文字範囲$n$に属する文字は\textbf{ALchar}として
扱う」ことを意味し，正の整数$+n$は「\textbf{JAchar}として扱う」ことを意味する．
%</ja>

%<*en>
\paragraph{Default setting}
\LuaTeX-ja predefines eight character ranges for convenience. They are
determined from the following data:
%</en>
%<*ja>
\paragraph{初期設定}
\LuaTeX-jaでは8つの文字範囲を予め定義しており，
これらは以下のデータに基づいて決定している．
%</ja>
\begin{itemize}
%<en>\item Blocks in Unicode~6.0.
%<ja>\item Unicode~6.0のブロック．
%<en>\item The \texttt{Adobe-Japan1-UCS2} mapping between a CID Adobe-Japan1-6 and Unicode.
%<ja>\item Adobe-Japan1-6のCIDとUnicodeの間の対応表\texttt{Adobe-Japan1-UCS2}．
%<en>\item The \Pkg{PXbase} bundle for \upTeX\ by Takayuki Yato.
%<ja>\item 八登崇之氏による\upTeX 用の\Pkg{PXbase}バンドル．
\end{itemize}

%<*en>
Now we describe these eight ranges. The superscript ``J'' or ``A'' after the
number shows whether each character in the range is treated as
\textbf{JAchar}s or not by default. These settings are similar to the
\texttt{prefercjk} settings defined in \texttt{PXbase} bundle.
Any characters above \texttt{U+0080} which does not belong to
these eight ranges belongs to the character range~217.
%</en>
%<*ja>
以下ではこれら8つの文字範囲について記述する．添字のアルファベット「J」「A」
は，その文字範囲内の文字が\textbf{JAchar}か\textbf{ALchar}かを表している．これらの設定は
\texttt{PXbase}バンドルで定義されている\texttt{prefercjk}と類似のものである．
なお，\texttt{U+0080} 以降でこれら8つの文字範囲に属さない文字は，217番の文字範囲に属することになっている．
%</ja>
\begin{description}
%<*en>
\newpage
\item[Range~8${}^{\text{J}}$] The intersection of the upper half of ISO~8859-1
	 (Latin-1 Supplement) and JIS~X~0208 (a basic character set for Japanese). This character range
	 consists of the following characters:
%</en>
%<*ja>
\item[範囲8${}^{\text{J}}$] ISO~8859-1の上位領域（ラテン1補助）と
                             JIS~X~0208の共通部分．この文字範囲は
                             以下の文字で構成される：
%</ja>
\begin{multicols}{2}
\begin{itemize}
\def\ch#1#2{\item \char"#1\ (\texttt{U+00#1}, #2)}%"
\ch{A7}{Section Sign}
\ch{A8}{Diaeresis}
\ch{B0}{Degree sign}
\ch{B1}{Plus-minus sign}
\ch{B4}{Spacing acute}
\ch{B6}{Paragraph sign}
\ch{D7}{Multiplication sign}
\ch{F7}{Division Sign}
\end{itemize}
\end{multicols}

%<*en>
\item[Range~1${}^{\text{A}}$] Latin characters that some of them are included in Adobe-Japan1-6.
This range consists of the following Unicode ranges, \emph{except characters in the range~8 above}:
%</en>
%<*ja>
\item[範囲1${}^{\text{A}}$] ラテン文字のうち，Adobe-Japan1-6との共通部分があるもの．
                             この範囲は以下のUnicodeのブロックのうち
                             \emph{範囲8を除いた}部分で構成されている：
%</ja>
\begin{multicols}{2}
\begin{itemize}
\item \texttt{U+0080}--\texttt{U+00FF}: Latin-1 Supplement
\item \texttt{U+0100}--\texttt{U+017F}: Latin Extended-A
\item \texttt{U+0180}--\texttt{U+024F}: Latin Extended-B
\item \texttt{U+0250}--\texttt{U+02AF}: IPA Extensions
\item \texttt{U+02B0}--\texttt{U+02FF}: Spacing Modifier Letters
\item \texttt{U+0300}--\texttt{U+036F}: \\\null\hfill Combining Diacritical Marks
\item \texttt{U+1E00}--\texttt{U+1EFF}: \\\null\hfill Latin Extended Additional
\par\
\end{itemize}
\end{multicols}
%<*en>
\item[Range~2${}^{\text{J}}$] Greek and Cyrillic letters. JIS~X~0208 (hence most of Japanese
	   fonts) has some of these characters.
%</en>
%<*ja>
\item[範囲2${}^{\text{J}}$] ギリシャ文字とキリル文字．JIS~X~0208（したがってほとんどの
                             和文フォント）はこれらの文字を持つ．
%</ja>
\begin{multicols}{2}
\begin{itemize}
\item \texttt{U+0370}--\texttt{U+03FF}: Greek and Coptic
\item \texttt{U+0400}--\texttt{U+04FF}: Cyrillic
\item \texttt{U+1F00}--\texttt{U+1FFF}: Greek Extended
\\\
\end{itemize}
\end{multicols}
%<*en>
\item[Range~3${}^{\text{J}}$] Punctuations and Miscellaneous symbols. The block list is
	   indicated in Table~\ref{table-rng3}.
%</en>
%<*ja>
\item[範囲3${}^{\text{J}}$] 句読点と記号類．ブロックのリストは表\ref{table-rng3}%
                             に示してある．
%</ja>
\begin{table}[!tb]
%<en>\caption{Unicode blocks in predefined character range~3.}\medskip
%<ja>\caption{文字範囲3に指定されているUnicodeブロック．}
\label{table-rng3}
\catcode`\"=13\def"#1#2#3#4{\texttt{U+#1#2#3#4}}%"
\centering\small
\begin{tabular}{llll}
"2000--"206F&General Punctuation&
"2070--"209F&Superscripts and Subscripts\\
"20A0--"20CF&Currency Symbols&
"20D0--"20FF&Comb.\ Diacritical Marks for Symbols\\
"2100--"214F&Letterlike Symbols&
"2150--"218F&Number Forms\\
"2190--"21FF&Arrows&
"2200--"22FF&Mathematical Operators\\
"2300--"23FF&Miscellaneous Technical&
"2400--"243F&Control Pictures\\
"2500--"257F&Box Drawing&
"2580--"259F&Block Elements\\
"25A0--"25FF&Geometric Shapes&
"2600--"26FF&Miscellaneous Symbols\\
"2700--"27BF&Dingbats&
"2900--"297F&Supplemental Arrows-B\\
"2980--"29FF&Misc.\ Mathematical Symbols-B&
"2B00--"2BFF&Miscellaneous Symbols and Arrows
\end{tabular}
\end{table}
%<*en>
\item[Range~4${}^{\text{A}}$] Characters usually not in Japanese fonts. This range consists
	   of almost all Unicode blocks which are not in other
	   predefined ranges. Hence, instead of showing the block list,
	   we put the definition of this range itself:
%</en>
%<*ja>
\item[範囲4${}^{\text{A}}$] 通常和文フォントには含まれていない文字．
                             この範囲は他の範囲にないほとんど全てのUnicodeブロック
                             で構成されている．したがって，ブロックのリストを示す
                             代わりに，範囲の定義そのものを示す：
%</ja>
\begin{lstlisting}
\ltjdefcharrange{4}{%
   "500-"10FF, "1200-"1DFF, "2440-"245F, "27C0-"28FF, "2A00-"2AFF,
  "2C00-"2E7F, "4DC0-"4DFF, "A4D0-"A82F, "A840-"ABFF, "FB00-"FE0F,
  "FE20-"FE2F, "FE70-"FEFF, "10000-"1FFFF, "E000-"F8FF} % non-Japanese
\end{lstlisting}
%<en>\item[Range~5${}^{\text{A}}$] Surrogates and Supplementary Private Use Areas.
%<ja>\item[範囲5${}^{\text{A}}$] 代用符号と補助私用領域．
%<en>\item[Range~6${}^{\text{J}}$] Characters used in Japanese. The block list is indicated in Table~\ref{table-rng6}.
%<ja>\item[範囲6${}^{\text{J}}$] 日本語で用いられる文字．ブロックのリストは表\ref{table-rng6}に示す．
\begin{table}[!tb]
%<en>\caption{Unicode blocks in predefined character range~6.}\medskip
%<ja>\caption{文字範囲6に指定されているUnicodeブロック．}
\label{table-rng6}
\catcode`\"=13\def"#1#2#3#4{\texttt{U+#1#2#3#4}}%"
\centering\small
\begin{tabular}{llll}
"2460--"24FF&Enclosed Alphanumerics&
"2E80--"2EFF&CJK Radicals Supplement\\
"3000--"303F&CJK Symbols and Punctuation&
"3040--"309F&Hiragana\\
"30A0--"30FF&Katakana&
"3190--"319F&Kanbun\\
"31F0--"31FF&Katakana Phonetic Extensions&
"3200--"32FF&Enclosed CJK Letters and Months\\
"3300--"33FF&CJK Compatibility&
"3400--"4DBF&CJK Unified Ideographs Extension A\\
"4E00--"9FFF&CJK Unified Ideographs&
"F900--"FAFF&CJK Compatibility Ideographs\\
"FE10--"FE1F&Vertical Forms&
"FE30--"FE4F&CJK Compatibility Forms\\
"FE50--"FE6F&Small Form Variants&
"{20}000--"{2F}FFF&(Supplementary Ideographic Plane)\\
"{E0}100--"{E0}1EF&Variation Selectors Supplement
\end{tabular}
\end{table}
%<*en>
\item[Range~7${}^{\text{J}}$] Characters used in CJK languages, but not included in  Adobe-Japan1-6.
The block list is indicated in Table~\ref{table-rng7}.
%</en>
%<*ja>
\item[範囲7${}^{\text{J}}$] CJK言語で用いられる文字のうち，Adobe-Japan1-6に
                            含まれていないもの．
                            ブロックのリストは表\ref{table-rng7}に示す．
%</ja>
\begin{table}[!tb]
%<en>\caption{Unicode blocks in predefined character range~7.}\medskip
%<ja>\caption{文字範囲7に指定されているUnicodeブロック．}
\label{table-rng7}
\catcode`\"=13\def"#1#2#3#4{\texttt{U+#1#2#3#4}}%"
\centering\small
\begin{tabular}{llll}
"1100--"11FF&Hangul Jamo&
"2F00--"2FDF&Kangxi Radicals\\
"2FF0--"2FFF&Ideographic Description Characters&
"3100--"312F&Bopomofo\\
"3130--"318F&Hangul Compatibility Jamo&
"31A0--"31BF&Bopomofo Extended\\
"31C0--"31EF&CJK Strokes&
"A000--"A48F&Yi Syllables\\
"A490--"A4CF&Yi Radicals&
"A830--"A83F&Common Indic Number Forms\\
"AC00--"D7AF&Hangul Syllables&
"D7B0--"D7FF&Hangul Jamo Extended-B
\end{tabular}
\end{table}
\end{description}


%<en>\newpage\subsection{\Param{kanjiskip} and \Param{xkanjiskip}}
%<ja>\subsection{\Param{kanjiskip}と\Param{xkanjiskip}}
\label{subs-kskip}

%<en>\textbf{JAglue} is divided into the following three categories:
%<ja>\textbf{JAglue}は以下の3つのカテゴリに分類される：
\begin{itemize}
%<*en>
\item Glues/kerns specified in JFM. If \cs{inhibitglue} is issued
      around a Japanese character, this glue will not be inserted at the
      place.
%</en>
%<*ja>
\item JFMで指定されたグルー／カーン．もし \cs{inhibitglue} が和文文字の周りで
      発行されていれば，このグルーは挿入されない．
%</ja>
%<*en>
\item The default glue which inserted between two \textbf{JAchar}s (\Param{%
      kanjiskip}).
%</en>
%<*ja>
\item デフォルトで2つの\textbf{JAchar}の間に挿入されるグルー(\Param{kanjiskip})．
%</ja>
%<*en>
\item The default glue which inserted between a \textbf{JAchar} and an
      \textbf{ALchar} (\Param{xkanjiskip}).
%</en>
%<*ja>
\item デフォルトで\textbf{JAchar}と\textbf{ALchar}の間に挿入されるグルー(\Param{xkanjiskip})．
%</ja>
\end{itemize}
%<*en>
The value (a skip) of \Param{kanjiskip} or
\Param{xkanjiskip} can be changed as the following.
Note that only their values \emph{at the end of a paragraph or a hbox are
adopted in the whole paragraph or the whole hbox.
}
%</en>
%<*ja>
\Param{kanjiskip}や\Param{xkanjiskip}の値
は以下のようにして変更可能である．
%</ja>
\begin{lstlisting}
\ltjsetparameter{kanjiskip={0pt plus 0.4pt minus 0.4pt},
                 xkanjiskip={0.25\zw plus 1pt minus 1pt}}
\end{lstlisting}
%<*en>
Here \cs{zw} is a internal dimension
which stores fullwidth of the current Japanese font.
This \cs{zw} can be used as the unit \texttt{zw} in \pTeX.

The value of these parameter can be get by \cs{ltjgetparameter}.
Note that the result by \cs{ltjgetparameter} is \emph{not} the internal quantities,
but \emph{a string} (hence \cs{the} cannot be prefixed).
%</en>
%<*ja>
ここで，\cs{zw} は現在の和文フォントの全角幅を表す長さであり，
\pTeX における長さ単位 \texttt{zw} と同じように使用できる．

これらのパラメータの値は以下のように取得できる．
戻り値は内部値ではなく\emph{文字列}である（\cs{the} は前置できない）ことに注意してほしい：
%</ja>
\begin{LTXexample}
kanjiskip: \ltjgetparameter{kanjiskip},\\
xkanjiskip: \ltjgetparameter{xkanjiskip}
\end{LTXexample}

%<*en>
It may occur that JFM contains the data of ``ideal width of
\Param{kanjiskip}''
and/or ``ideal width of \Param{xkanjiskip}''.
To use these data from JFM, set the value of \Param{kanjiskip} or
\Param{xkanjiskip} to \cs{maxdimen}
(these ``ideal width'' cannot be retrived by \cs{ltjgetparameter}).
%</en>
%<*ja>
JFMは「望ましい\Param{kanjiskip}の値」や
「望ましい\Param{xkanjiskip}の値」を持っていることがある．
これらのデータを使うためには，\Param{kanjiskip}や%
\Param{xkanjiskip}の値を \cs{maxdimen} の値に設定すればよいが，
\cs{ltjgetparameter} によって取得することはできないので注意が必要である．
%</ja>

%<en>\subsection{Insertion Setting of \Param{xkanjiskip}}
%<ja>\subsection{\Param{xkanjiskip} の挿入設定}

%<*en>
It is not desirable that \Param{xkanjiskip} is inserted into every
boundary between \textbf{JAchar}s and \textbf{ALchar}s. For example,
\Param{xkanjiskip} should not be inserted after opening parenthesis
(\textit{e.g.}, compare ``(あ'' and ``(\hskip\ltjgetparameter{xkanjiskip}あ'').
\LuaTeX-ja can control whether \Param{xkanjiskip} can be inserted
before/after a character, by changing \Param{jaxspmode} for \textbf{JAchar}s and
\Param{alxspmode} parameters \textbf{ALchar}s respectively.
%</en>
%<*ja>
\Param{xkanjiskip}がすべての\textbf{JAchar}と\textbf{ALchar}の境界に
挿入されるのは望ましいことではない．例えば，\Param{xkanjiskip}は開き括弧の
後には挿入されるべきではない（「(あ」と「(\hskip\ltjgetparameter{xkanjiskip}あ」を
比べてみよ）．
\LuaTeX-jaでは\Param{xkanjiskip}をある文字の前／後に挿入するかどうかを，
\textbf{JAchar}に対しては\Param{jaxspmode}を，\textbf{ALchar}に対しては
\Param{alxspmode}をそれぞれ変えることで制御することができる．
%</ja>
\begin{LTXexample}
\ltjsetparameter{jaxspmode={`あ,preonly}, alxspmode={`\!,postonly}}
pあq い!う
\end{LTXexample}

%<*en>
The second argument \texttt{preonly} means that the insertion of
\Param{xkanjiskip} is allowed before this character, but not after.
the other possible values are \texttt{postonly}, \texttt{allow}, and \texttt{inhibit}.
%</en>
%<*ja>
2つ目の引数の \texttt{preonly}は「\Param{xkanjiskip}の挿入はこの文字の
前でのみ許され，後では許さない」ことを意味する．他に指定可能な値は
\texttt{postonly}, \texttt{allow}, \texttt{inhibit}である．
%</ja>

%<*en>
\Param{jaxspmode} and \Param{alxspmode} use a same table to store the parameters
on the current version. Therefore, line~1 in the code above can be rewritten
as follows:
%</en>
%<*ja>
なお，現行の
仕様では，\Param{jaxspmode}, \Param{alxspmode}はテーブルを共有しており，
上のコードの1行目を次のように変えても同じことになる：
%</ja>
\begin{verbatim}
\ltjsetparameter{alxspmode={`あ,preonly}, jaxspmode={`\!,postonly}}
\end{verbatim}
%<*en>
One can use also numbers to specify these two parameters (see Subsection~\ref{ssec-param}).
%</en>
%<*ja>
また，これら2パラメータには数値で値を指定することもできる（\ref{ssec-param}節を参照）．
%</ja>

%<*en>
If you want to enable/disable all insertions of \Param{kanjiskip} and
\Param{xkanjiskip}, set \Param{autospacing} and \Param{autoxspacing}
parameters to \texttt{true}/\texttt{false}, respectively.
%</en>
%<*ja>
もし全ての\Param{kanjiskip}と\Param{xkanjiskip}の挿入を有効化／無効化
したければ，それぞれ\Param{autospacing}と\Param{autoxspacing}を
\texttt{true}/\texttt{false}に設定すればよい．
%</ja>

%<en>\subsection{Shifting the baseline}
%<ja>\subsection{ベースラインの移動}
%<*en>
To make a match between a Japanese font and an alphabetic font, sometimes
shifting of the baseline of one of the pair is needed. In \pTeX, this is achieved
by setting \cs{ybaselineshift} (or \cs{tbaselineshift}) to a non-zero length (the
baseline of \textbf{ALchar} is shifted below). However, for documents
whose main language is not Japanese, it is good to shift the baseline of
Japanese fonts, but not that of alphabetic fonts.
Because of this, \LuaTeX-ja can independently set the shifting amount
of the baseline of alphabetic fonts and that of Japanese fonts.
\begin{center}
 \small
\begin{tabular}{>{\bfseries}lcc}
\toprule
&\bfseries Horizontal writing (\emph{yoko} direction) etc.
&\bfseries Vertical writing(\emph{tate} direction)\\
\midrule
Alphabetic fonts&\Param{yalbaselineshift}
     parameter&\Param{talbaselineshift} parameter\\
Japanese fonts&\Param{yjabaselineshift}
     parameter&\Param{tjabaselineshift} parameter\\
\bottomrule
\end{tabular}
\end{center}
%</en>
%<*ja>
和文フォントと欧文フォントを合わせるためには，時々どちらかのベースラインの移動が
必要になる．\pTeX ではこれは \cs{ybaselineshift} を設定することで
なされていた（\textbf{ALchar}のベースラインがその分だけ下がる）．しかし，日本語が主ではない
文書に対しては，欧文フォントではなく和文フォントのベースラインを移動した方がよい．
このため，\LuaTeX-jaでは欧文フォントのベースラインのシフト量
と和文フォントのベースラインのシフト量を独立に設定できるようになっている．
\begin{center}
 \small
\begin{tabular}{>{\bfseries}lcc}
\toprule
&\bfseries 横組など&\bfseries 縦組\\
\midrule
欧文フォントのシフト量&\Param{yalbaselineshift}
     parameter&\Param{talbaselineshift} parameter\\
和文フォントのシフト量&\Param{yjabaselineshift}
     parameter&\Param{tjabaselineshift} parameter\\
\bottomrule
\end{tabular}
\end{center}
%</ja>

%<*en>
Here the horizontal line in the below example is the baseline of a line.
%</en>
%<*ja>
下の例において引かれている水平線がベースラインである．
%</ja>
\begin{LTXexample}
\vrule width 150pt height 0.4pt depth 0pt \hskip-120pt
\ltjsetparameter{yjabaselineshift=0pt, yalbaselineshift=0pt}abcあいう
\ltjsetparameter{yjabaselineshift=5pt, yalbaselineshift=2pt}abcあいう
\end{LTXexample}

%<*en>
There is an interesting side-effect: characters in different size can be
vertically aligned center in a line, by setting two parameters appropriately.
The following is an example (beware the value is not well tuned):
%</en>
%<*ja>
この機能には面白い使い方がある：2つのパラメータを適切に設定することで，サイズの
異なる文字を中心線に揃えることができる．
以下は一つの例である（値はあまり調整されていないことに注意）：
%</ja>
\begin{LTXexample}
xyz漢字
{\scriptsize
  \ltjsetparameter{yjabaselineshift=-1pt,
    yalbaselineshift=-1pt}
  XYZひらがな
}abcかな
\end{LTXexample}


%<*ja>
\paragraph{数式における挙動：\pTeX との違い}
\textbf{ALchar}のベースラインを補正する \Param{yalbaselineshift} パラメータは
ほぼ\pTeX における \cs{ybaselineshift} に対応しているものであるが，
数式中の挙動は異なっているので注意が必要である．
例えば，表\ref{tab:math_bsa}のように，数式中に明示的に現れた \cs{hbox} は，
\begin{itemize}
 \item \pTeX では，ボックス全体が \cs{ybaselineshift} だとシフトされるので，
 表\ref{tab:math_bsa}中の``い''のように，ボックス中の和文文字は
 \ \cs{ybaselineshift} だけシフトされ，一方，``for all''のように，
 ボックス内の欧文文字は2重にシフトされることになる．
 \item 一方，\LuaTeX-jaではそのようなことはおこらず，
 数式中に明示的に現れた \cs{hbox} はシフトしない．そのため，
 表\ref{tab:math_bsa}中の``い''も``for all''も，それぞれ本文中に
 書かれたときと同じ上下位置に組まれる．
\end{itemize}
\begin{table}
\small\centering
\caption{数式関係のベースライン補正($\Param{yalbaselineshift}=10\,\textrm{pt}$)}
\label{tab:math_bsa}
\newdimen\origbaselineskip
\origbaselineskip=\baselineskip
\begin{tabular}{lp{30\zw}}
\toprule
\emph{入力}&\vspace*{\dimexpr-\origbaselineskip-\smallskipamount}
\begin{verbatim}
数式abc: $あa\hbox{い}$, $\int_0^x t\,dt=x^2\!/2$,
$\Phi\vdash F(x)\ \hbox{for all}\ x\in A$
\end{verbatim}\\
\noalign{\vskip-\origbaselineskip}
\midrule
\emph{\pTeX}&
{\ltjsetparameter{yalbaselineshift=10pt}%
数式abc: $あa\lower10pt\hbox{い}$, $\int_0^x t\,dt=x^2\!/2$,
$\Phi\vdash F(x)\ \lower10pt\hbox{for all}\ x\in A$
\par}\\
\midrule
\emph{\LuaTeX-ja}&
{\ltjsetparameter{yalbaselineshift=10pt}%
数式abc: $あa\hbox{い}$, $\int_0^x t\,dt=x^2\!/2$,
$\Phi\vdash F(x)\ \hbox{for all}\ x\in A$
\par}\\
\noalign{\vskip-\origbaselineskip}
\bottomrule
\end{tabular}
\end{table}
%</ja>

\clearpage
%<en>\part{Reference}
%<ja>\part{リファレンス}
\label{part-ref}
\suppressfloats[t]
%<*ja>
\section{\LuaTeX-jaにおける \cs{catcode}}
\subsection{予備知識：\pTeX と\upTeX における \cs{kcatcode}}
\pTeX，\upTeX においては，和文文字が制御綴内で利用できるかどうか
は \cs{kcatcode} の値によって決定されるのであった．
詳細は表\ref{table-kcat}を参照されたい．
%</ja>
%<*en>
\section{\cs{catcode} in \LuaTeX-ja}
\subsection{Preliminaries: \cs{kcatcode} in \pTeX\ and \upTeX}
In \pTeX~and~\upTeX, the value of \cs{kcatcode} determines
whether a Japanese character can be used in a control word.
For the detail, see Table~\ref{table-kcat}.
%</en>

\begin{table}[t]
\small
\caption{\cs{kcatcode} in \upTeX}
\label{table-kcat}
%<en>\medskip

\noindent\hfill
\begin{tabular}{ccccc}
\toprule
\bfseries \cs{kcatcode}&
%<*en>
\bfseries meaning&
\bfseries control word&
\bfseries widow penalty\hbox{}$^*$&
\bfseries linebreak\\
%</en>
%<*ja>
\bfseries 意図&
\bfseries 制御綴中に使用&
\bfseries 文字ウィドウ処理\hbox{}$^*$&
\bfseries 直後での改行\\
%</ja>
\midrule
15&non-cjk&\multicolumn{3}{c}{(treated as usual \LaTeX)}\\
16&kanji&Y&Y&ignored\\
17&kana&Y&Y&ignored\\
18&other&N&N&ignored\\
19&hangul&Y&Y&space\\
\bottomrule
\end{tabular}\hfill\null

\medskip

%<*ja>
文字ウィドウ処理\hbox{}$^*$: 「漢字が一文字だけ次の行に行くのを防ぐ」\
\cs{jcharwidowpenalty} が，
その文字の直前に挿入されうるか否か，を示す．
%</ja>
\end{table}

%<*en>
\cs{kcatcode} can be set by a row of JIS~X~0208 in \pTeX,
and generally by a Unicode block\footnote{%
  \upTeX\ divides \texttt{U+FF00}--\texttt{U+FFEF} (Halfwidth and Fullwidth Forms)
  into three subblocks, and \cs{kcatcode} can be set by a subblock.
}
in \upTeX. So characters which can be used in a control word
slightly differ between \pTeX~and~\upTeX.
%</en>
%<*ja>
\pTeX では \cs{kcatcode} はJIS~X~0208の区単位，
\upTeX では概ねUnicodeブロック単位\footnote{%
  \texttt{U+FF00}--\texttt{U+FFEF} (Halfwidth and Fullwidth Forms)は
  「全角英数字」「半角カナ」「その他」と3つに分割されており，
  それぞれ別々に \cs{kcatcode} が指定できるようになっている．
}で設定可能になっている．そのため，\pTeX と\upTeX の初期状態では
制御綴内で使用可能な文字が微妙に異なっている．
%</ja>

%<*en>
\subsection{Case of \LuaTeX-ja}
The role of \cs{kcatcode} in \pTeX~and~\upTeX\ can be
divided into the following four kinds,
and \LuaTeX-ja can control these four kinds separately:
\begin{itemize}
 \item
\emph{Distinction between \textbf{JAchar} or \textbf{ALchar}}
is controlled by using the character range, see Subsection~\ref{ssec-setrange}.
 \item
\emph{Whether the character can be used in a control word}
is controlled by setting \cs{catcode} to 11~(enabled) or 12~(disabled), as usual.
 \item
\emph{Whether \Param{jcharwidowpenalty} can be inserted before the character}
is controlled by the lowermost bit of the \Param{kcatcode} parameter.
 \item
\emph{Ignoring linebreak after a \textbf{JAchar}} is always ignored.
\end{itemize}
%</en>
%<*ja>
\subsection{\LuaTeX-jaの場合}
\LuaTeX-jaでは，従来の\pTeX・\upTeX における \cs{kcatcode} の役割を
分割している：
\begin{description}
 \item[欧文/和文の区別 (\upTeX)]
\cs{ltjdefcharrange} と\textsf{jacharrange}パラメータ（\ref{ssec-setrange}節）
 \item[制御綴中に使用可か]
\LuaTeX 自身の \cs{catcode} でよい
 \item[\Param{jcharwidowpenalty}が挿入可か]
\Param{kcatcode}パラメータの最下位ビット
 \item[直後の改行の無視]
日本語しか想定していないので\textbf{JAchar}については一律有効
\end{description}
%</ja>

%<*en>
Default setting of \cs{catcode} of \LuaTeX\ can be found
in \texttt{luatex-unicode-letters.tex},
which is based on \texttt{unicode-letters.tex} (for \XeTeX).
However, the default setting of \cs{catcode} differs
between \XeTeX\ and \LuaTeX, by the following reasons:
\begin{itemize}
 \item \texttt{luatex-unicode-letters.tex} is based on old \texttt{unicode-letters.tex}.
 \item The latter half of \texttt{unicode-letters.tex} sets
\cs{catcode} of Kanji and kana characters to 11,
via setting \cs{XeTeXcharclass}.

However, this latter half is simply omitted in
\texttt{luatex-unicode-letters.tex}, hence
\cs{catcode} of Kanji and kana characters remains 12 in \LuaTeX.
\end{itemize}
In other words, Kanji nor kana characters cannot be used in
a control word, in the default setting of \LuaTeX.

This would be inconvenient for \pTeX~users to shifting to \LuaTeX-ja,
since several control words containing Kanji, such as \verb+\西暦+,
are used in \pTeX.
Hence, \LuaTeX-ja have a counterpart of \texttt{unicode-letters.tex}
for \LuaTeX, \emph{to match the \cs{catcode} setting with that of \XeTeX.}
%</en>
%<*ja>
ネイティブにUnicode全部の文字を扱える\XeTeX や\LuaTeX では，
文字が制御綴内で使用できるかは通常の欧文文字と同じく \cs{catcode}
で指定することとなる．\XeTeX における \cs{catcode} の初期設定は\
\texttt{unicode-letters.tex} 中に記述されており，\LuaTeX ではそれを
元にした \texttt{luatex-unicode-letters.tex} を用いている．

だが，\XeTeX における \cs{catcode} の初期設定と
\LuaTeX におけるそれは一致していない：
\begin{itemize}
 \item \texttt{luatex-unicode-letters.tex} の元になった\
\texttt{unicode-letters.tex} が古い
 \item \texttt{unicode-letters.tex} の後半部では
\cs{XeTeXcharclass} の設定を行なっており，
それによって漢字や仮名の \cs{catcode} が11に設定されている．

しかし，\texttt{luatex-unicode-letters.tex} ではこの「後半部」が
まるごと省略されており，漢字や仮名の \cs{catcode} は12のまま．
\end{itemize}
言い換えると，\LuaTeX の初期状態では漢字や仮名を制御綴内に
使用することはできない．

これでは \pTeX で使用できた \verb+\西暦+ などが使えないこととなり，
\LuaTeX-jaへの移行で手間が生じる．そのため，\LuaTeX-jaでは
\texttt{unicode-letters.tex} の後半部にあたる内容を自前でパッチし，
結果として\textbf{\XeTeX における初期設定と同じになるようにしている．}
%</ja>

\begin{table}
 \centering\small
%<en>\caption{Difference of the set of non-kanji JIS~X~0208 characters which can be used in a control word}
%<ja>\caption{制御綴中に使用出来るJIS~X~0208非漢字の違い}
%<en>\medskip
\label{table-kcat-diff}
\def\D#1#2#3#4{%
  {\fboxsep0pt\fcolorbox{cyan}{white}%
  {\large\char"#1#2#3#4}}\ (\texttt{U+#1#2#3#4})} %"
\leavevmode\hbox to 0pt{\hss\begin{tabular}{cccccc}
\toprule
%<en>&\bf row&\bf col.&\bf \pTeX&\bf \upTeX&\bf\LuaTeX-ja\\
%<ja>&\bf 区&\bf 点&\bf \pTeX&\bf \upTeX&\fontseries{b}\selectfont\LuaTeX-ja\\
\midrule
\D 3000&1&1&N&N&Y\\
\D 30FB&1&6&N&Y&N\\
\D 309B&1&11&N&Y&N\\
\D 309C&1&12&N&Y&N\\
\D FF40&1&14&N&N&Y\\
\D FF3E&1&16&N&N&Y\\
\D FFE3&1&17&N&N&Y\\
\D FF3F&1&18&N&N&Y\\
\D 30FD&1&19&N&Y&Y\\
\D 30FE&1&20&N&Y&Y\\
\D 309D&1&21&N&Y&Y\\
\D 309E&1&22&N&Y&Y\\
\D 3003&1&23&N&N&Y\\
\D 4EDD&1&24&N&Y&Y\\
\D 3005&1&25&N&N&Y\\
\D 3006&1&26&N&N&Y\\
\D 3007&1&27&N&N&Y\\
\D 30FC&1&28&N&Y&Y\\
\bottomrule
\end{tabular}\qquad
\begin{tabular}{cccccc}
\toprule
%<en>&\bf row&\bf col.&\bf \pTeX&\bf \upTeX&\bf\LuaTeX-ja\\
%<ja>&\bf 区&\bf 点&\bf \pTeX&\bf \upTeX&\fontseries{b}\selectfont\LuaTeX-ja\\
\midrule
\D FF0F&1&31&N&N&Y\\
\D FF3C&1&32&N&N&Y\\
\D FF5C&1&35&N&N&Y\\
\D FF0B&1&60&N&N&Y\\
\D FF1D&1&65&N&N&Y\\
\D FF1C&1&67&N&N&Y\\
\D FF1E&1&68&N&N&Y\\
\D FF03&1&84&N&N&Y\\
\D FF06&1&85&N&N&Y\\
\D FF0A&1&86&N&N&Y\\
\D FF20&1&87&N&N&Y\\
\D 3012&2&9&N&N&Y\\
\D 3013&2&14&N&N&Y\\
\D FFE2&2&44&N&N&Y\\
\D 212B&2&82&N&N&Y\\
%<en>\multicolumn{3}{c}{$\vphantom{\D 3000}$\hbox{}Greek letters (row 6)}&Y&N&Y\\
%<en>\multicolumn{3}{c}{$\vphantom{\D 3000}$\hbox{}Cyrillic letters (row 7)}&N&N&Y\\
%<ja>\multicolumn{3}{c}{$\vphantom{\D 3000}$\hbox{}ギリシャ文字（6区）}&Y&N&Y\\
%<ja>\multicolumn{3}{c}{$\vphantom{\D 3000}$\hbox{}キリル文字（7区）}&N&N&Y\\
$\vphantom{\D 3000}$\\
\bottomrule
\end{tabular}\hss}\par
\end{table}

%<*en>
\subsection{Non-kanji Characters in a Control Word}
Because the engine differ, so non-kanji JIS~X~0208 characters
which can be used in a control word differ in \pTeX, in \upTeX,~and~in \LuaTeX-ja.
Table~\ref{table-kcat-diff} shows the difference.
Except for four characters ``・'',~``゛'', ``゜'',~``゠'',
\LuaTeX-ja admits more characters in a control word than \upTeX.
\emph{Note that the ideographic space~\texttt{U+3000} can be used
in a control word in \LuaTeX-ja.}

Difference becomes larger, if we consider
non-kanji JIS~X~0213 characters.
For the detail, see \url{https://github.com/h-kitagawa/kct}.
%</en>
%<*ja>
\subsection{制御綴中に使用出来るJIS非漢字の違い}

エンジンが異なるので，\pTeX, \upTeX, \LuaTeX-ja
において制御綴中に使用可能なJIS~X~0208の文字は異なる．
異なっているところだけを載せると，表\ref{table-kcat-diff}のようになる．
「・」「゛」「゜」「゠」を除けば，\LuaTeX-jaでは\upTeX より多くの文字が
制御綴に使用可能になっている．
\textbf{特に重要なのは，全角空白(\texttt{U+3000})が
\LuaTeX-jaでは制御綴中に使用可能であることである．}

JIS~X~0213の範囲に広げると，差異はさらに大きくなる．
詳細については例えば \url{https://github.com/h-kitagawa/kct} 中の\
\texttt{kct-uni-out.pdf} などを参照すること．
%</ja>


%<*en>
\section{Directions}
\LuaTeX\ supports four $\Omega$-style directions: \texttt{TLT},~\texttt{TRT}, \texttt{RTT}
and \texttt{LTL}.
However, neither directions are not well-suited for typesetting Japanese vertically, hence we
implemented vertical writing by rotating \texttt{TLT}-box by 90~degrees.
%</en>
%<*ja>
\section{縦組}
\label{sec-direction}
\LuaTeX 本体でも，$\Omega$・$\aleph$由来の機能として，複数の組方向をサポートしている．
しかし，\LuaTeX がサポートするのは \texttt{TLT},~\texttt{TRT}, \texttt{RTT},~\texttt{LTL}\
のみであり，日本語の縦組に使うのは望ましくない\footnote{%
和文文字だけならば \texttt{RTT} を使えばなんとかなると思うが，
欧文文字が入ってきた場合はうまくいかず，\texttt{RTR} という組方向が必要になる．
}．そのため，\LuaTeX-jaでは横組(\texttt{TLT})で組んだボックスを回転させる方式で
縦組を実装した．
%</ja>

%<ja>\subsection{サポートする組方向}
\begin{table}[t]
%<ja>\caption{\LuaTeX-ja のサポートする組方向}
%<en>\caption{Directions supported by \LuaTeX-ja}
%<en>\medskip
\label{tab-dir}
\centering\small
\def\obox#1{%
  \setbox0=\hbox{\yoko\hbox{#1%
  \large\ltjsetparameter{talbaselineshift=0pt}%
  \vrule height 25pt width 0.4pt depth 15pt\kern-.2pt%
  \raise25pt\hbox to 0pt{\hss\composite{*r^@{>>}}\hss}%
  \raise-15pt\hbox to 0pt{\hss\composite{*l^@{>|}}\hss}\kern.2pt%
  \vrule height.2pt depth.2pt width 60pt\hbox to 0pt{\hss\composite{*d^@{>}}\hss}\kern-60pt
  \hbox to 60pt{\,銀は、Ag\hss}}}%
  \raise\dimexpr 0.5\ltjgetdp0-0.5\ltjgetht0\box0%
}
%<*ja>
\begin{tabular}{>{\bfseries}lcccc}
\toprule
&横組&縦組 &\cs{dtou}「dtou方向」&「utod方向」\\
\midrule
命令&\cs{yoko}&\cs{tate}&\cs{dtou}&\cs{utod}\\
字送り方向&水平右向き（→）&垂直下向き（↓）&垂直上向き（↑）&垂直下向き（↓）\\
行送り方向&垂直下向き（↓）&水平左向き（←）&水平右向き（→）&水平左向き（←）\\
使用する和文フォント&横組用(\cs{jfont})&縦組用(\cs{tfont})&
\multicolumn{2}{c}{%
  横組用(\cs{jfont})の$90^\circ$回転}\\[\smallskipamount]
組版例\null $^*$ &\obox{\yoko}&\obox{\tate}&\obox{\dtou}&\obox{\utod}\\
\noalign{\medskip}
\bottomrule
\end{tabular}

\medskip\raggedright
\def\R#1{%
  \raise0.38\zw\hbox{%
    \vrule height.2pt  depth.2pt width2\zw%
    \hbox to 0pt{\hss\composite{*d^@{#1}}\hss}%
  }%
}
$^*$\ 幅(width)，高さ(height)，深さ(depth)の増加方向を，
それぞれ「\R{>}」，「\R{>>}」，「\R{>|}」で表している．
\raggedright
%</ja>

%<*en>
\begin{tabular}{>{\bfseries}lcccc}
\toprule
&horizontal (\emph{yoko}~direction)&vertical (\emph{tate}~direction)&%
  \emph{dtou} direction&\emph{utod} direction\\
\midrule
Commands&\cs{yoko}&\cs{tate}&\cs{dtou}&\cs{utod}\\
Beginning of the page&Top&Right&Left&Right\\
Beginning of the line&Left&Top&Bottom&Top\\
Used Japanese font&horizontal (\cs{jfont})&vertical (\cs{tfont})&
\multicolumn{2}{c}{%
  horizontal ($90^\circ$ rotated)}\\[\smallskipamount]
Example&\obox{\yoko}&\obox{\tate}&\obox{\dtou}&\obox{\utod}\\
\noalign{\medskip}
(Notation used in $\Omega$)&TLT&RTR, RTT&LBL&RTR\\
\bottomrule
\end{tabular}

\medskip\raggedright
\def\R#1{%
  \raise0.38\zw\hbox{%
    \vrule height.2pt  depth.2pt width2\zw%
    \hbox to 0pt{\hss\composite{*d^@{#1}}\hss}%
  }%
}
\raggedright
%</en>
\end{table}

%<*en>
\LuaTeX-ja supports four directions, as shown in Table~\ref{tab-dir}.
The second column (\emph{yoko} direction) is just horizontal writing, 
and the third column (\emph{tate} direction) is vertical writing.
The fourth column (\emph{dtou} direction) is actually a hidden feature of \pTeX.
We implemented this for debugging purpose.
The fifth column (\emph{utod} direction) corresponds the ``\texttt{tate (math) direction}'' of \pTeX.

Directions can be changed by \cs{yoko},~\cs{tate}, \cs{dtou},~\cs{utod},
only when the current list is null. Also, the direction of a math formula is changed to
\emph{utod}, when the direction outside the math formula is \emph{tate} (vertical writing).
%</en>

%<*ja>
\LuaTeX-jaがサポートする組方向は表\ref{tab-dir}に示す4つである．
4列目の \cs{dtou} は聞き慣れない命令だと思うが，
実は\pTeX に同名の命令が（ドキュメントには書かれていないが）存在する．
Down-TO-Upの意味なのだろう．\cs{dtou} を使用する機会はないだろうが，
\LuaTeX-jaではデバッグ用に実装している．
5列目の \cs{utod} は，\pTeX で言う「縦数式ディレクション」に相当するものである．

組方向は，\cs{yoko},~\cs{tate}, \cs{dtou},~\cs{utod} をそれぞれ使用することで，
現在作成中のリストやボックスが空の時にのみ変更可能である．
また，縦組中の数式内のボックスは\pTeX と同じように組方向が \cs{utod} となる．
%</ja>

%<*en>
\subsection{Boxes in different direction}

As in \pTeX, one can use boxes of different direction in one document.
The below is an example.
\begin{LTXexample}
ここは横組%     yoko
\hbox{\tate %   tate
  \hbox{縦組}%  tate
  の中に
  \hbox{\yoko 横組の内容}% yoko
  を挿入する
}
また横組に戻る% yoko
\end{LTXexample}

Table~\ref{tab-diffdir} shows how a box is arranged when
the direction  inside the box and that outside the box differ.
%</en>
%<*ja>
\subsection{異方向のボックス}

縦組の中に「42」などの2桁以上の算用数字を横組で組むなど，
異なる組方向を混在させることがしばしば行われる．
組方向の混在も\pTeX と同じようにできる：
\begin{LTXexample}
ここは横組%     yoko
\hbox{\tate %   tate
  \hbox{縦組}%  tate
  の中に
  \hbox{\yoko 横組の内容}% yoko
  を挿入する
}
また横組に戻る% yoko
\end{LTXexample}

異なる組方向のボックスを配置した場合にどう組まれるかの仕様も，\pTeX を
踏襲している．表\ref{tab-diffdir}に示す．
%</ja>

\begin{table}[t]
%<ja>\caption{異方向のボックスの配置}
%<en>\caption{Boxes in different direction}
%<en>\medskip
\label{tab-diffdir}
 \centering\small\unitlength3mm
 \def\TATEeg{%
   \hbox{\smash{\begin{picture}(0,0)(-2,0)
     \thicklines
     \polyline(-2,0)(-2,-7)(5,-7)(5,0)
     \put(0,0){\circle*{0.3}}
     \put(2.5,-4){\makebox(0,0){\hbox{\tate\bfseries \emph{tate}/\emph{utod}}}}
     \put(0,0){\vector(1,0){5}} \put(2.5,-0.2){\makebox(0,0)[t]{$h_{\mathrm{T}}$}}
     \put(0,0){\vector(-1,0){2}}\put(-1,-0.2){\makebox(0,0)[t]{$d_{\mathrm{T}}$}}
     \put(0,0){\vector(0,-1){7}}\put(0.2,-3.5){\makebox(0,0)[l]{$w_{\mathrm{T}}$}}
   \end{picture}}}
 }
 \def\DTOUeg{%
   \hbox{\smash{\begin{picture}(0,0)(-5,0)
     \thicklines
     \polyline(-5,0)(-5,7)(2,7)(2,0)
     \put(0,0){\circle*{0.3}}
     \put(-2.5,4){\makebox(0,0){\hbox{\dtou\bfseries \emph{dtou}}}}
     \put(0,0){\vector(-1,0){5}} \put(-2.5,0.3){\makebox(0,0)[b]{$h_{\mathrm{D}}$}}
     \put(0,0){\vector(1,0){2}}\put(1,0.3){\makebox(0,0)[b]{$d_{\mathrm{D}}$}}
     \put(0,0){\vector(0,1){7}}\put(-0.2,3.5){\makebox(0,0)[r]{$w_{\mathrm{D}}$}}
   \end{picture}}}
 }
 \def\YOKOeg{%
   \hbox{\smash{\begin{picture}(0,0)
     \thicklines
     \polyline(0,5)(7,5)(7,-2)(0,-2)
     \put(4,2.5){\makebox(0,0){\hbox{\yoko\bfseries \emph{yoko}}}}
     \put(0,0){\circle*{0.3}}
     \put(0,0){\vector(0,1){5}} \put(0.3,2.5){\makebox(0,0)[l]{$h_{\mathrm{Y}}$}}
     \put(0,0){\vector(0,-1){2}}\put(0.3,-1){\makebox(0,0)[l]{$d_{\mathrm{Y}}$}}
     \put(0,0){\vector(1,0){7}}\put(3.5,0.2){\makebox(0,0)[b]{$w_{\mathrm{Y}}$}}
   \end{picture}}}
 }
\begin{tabular}{ccc}
\toprule
%<ja>\emph{横組中に配置}&\emph{縦組中に配置}&%
%<ja>\emph{組方向 \cs{dtou} 中に配置}\\
%<en>\textbf{typeset in \emph{yoko} direction}
%<en>&\textbf{typeset in \emph{tate} or \emph{utod} direction}
%<en>&\textbf{typeset in \emph{dtou} direction}\\
\midrule
 \parbox[c]{15\unitlength}{\begin{picture}(15,15)(0,-4)
   \put(0,0){\line(1,0){3.8}}
   \put(4,7){\TATEeg}
   \put(11.2,0){\line(1,0){3.8}}
%
   \put(2,7){\line(1,0){1.8}}
   \put(3,3.5){\vector(0,1){3.5}\vector(0,-1){3.5}}
   \put(2.8,3.5){\makebox(0,0)[r]{$H_{\mathrm{Y}}$}}
   \put(3,-2){\vector(0,1){2}}
   \put(2.8,-1){\makebox(0,0)[r]{$D_{\mathrm{Y}}$}}
%
   \put(4,7.2){\line(0,1){1.8}}
   \put(11,7.2){\line(0,1){1.8}}
   \put(6,8){\vector(-1,0){2}}
   \put(9,8){\vector(1,0){2}}
   \put(7.5,8){\makebox(0,0){$W_{\mathrm{Y}}$}}
%
 \end{picture}\vspace{-\baselineskip}
   \begin{align*}
   W_{\mathrm{Y}} &= h_{\mathrm{T}}+d_{\mathrm{T}},\\
   H_{\mathrm{Y}} &= w_{\mathrm{T}},\\
   D_{\mathrm{Y}} &=0\,\mathrm{pt}
   \end{align*}%
 }&
 \parbox[c]{15\unitlength}{\begin{picture}(15,15)(0,-4)
   \put(7.5,-0.2){\line(0,-1){2.8}}
   \put(4,2){\YOKOeg}
   \put(7.5, 7.2){\line(0,1){3.8}}
%
   \put(2,7){\line(1,0){1.8}}
   \put(2,0){\line(1,0){1.8}}
   \put(3,5){\vector(0,1){2}}
   \put(3,2){\vector(0,-1){2}}
   \put(3,3.5){\makebox(0,0){$W_{\mathrm{T}}$}}
%
   \put(4,7.2){\line(0,1){1.8}}
   \put(11,7.2){\line(0,1){1.8}}
   \put(8,8){\vector(-1,0){0.5}\vector(1,0){3}}
   \put(7,8){\vector(-1,0){3}\vector(1,0){0.5}}
   \put(9.25,8.2){\makebox(0,0)[b]{$H_{\mathrm{T}}$}}
   \put(5.75,8.2){\makebox(0,0)[b]{$D_{\mathrm{T}}$}}
%
 \end{picture}\vspace{-\baselineskip}
   \begin{align*}
   W_{\mathrm{T}} &= h_{\mathrm{Y}}+d_{\mathrm{Y}},\\
   H_{\mathrm{T}} &= w_{\mathrm{Y}}/2,\\
   D_{\mathrm{T}} &= w_{\mathrm{Y}}/2
   \end{align*}%
 }&
 \parbox[c]{15\unitlength}{\begin{picture}(15,15)(0,-4)
   \put(11,-0.2){\line(0,-1){2.8}}
   \put(4,2){\YOKOeg}
   \put(11, 7.2){\line(0,1){3.8}}
%
   \put(2,7){\line(1,0){1.8}}
   \put(2,0){\line(1,0){1.8}}
   \put(3,5){\vector(0,1){2}}
   \put(3,2){\vector(0,-1){2}}
   \put(3,3.5){\makebox(0,0){$W_{\mathrm{D}}$}}
%
   \put(4,7.2){\line(0,1){1.8}}
   \put(11,7.2){\line(0,1){1.8}}
   \put(7.5,8){\vector(-1,0){3.5}\vector(1,0){3.5}}
   \put(13,8){\vector(-1,0){2}}
   \put(7.5,8.2){\makebox(0,0)[b]{$H_{\mathrm{D}}$}}
   \put(12,8.2){\makebox(0,0)[b]{$D_{\mathrm{D}}$}}
%
 \end{picture}\vspace{-\baselineskip}
   \begin{align*}
   W_{\mathrm{D}} &= h_{\mathrm{Y}}+d_{\mathrm{Y}},\\
   H_{\mathrm{D}} &= w_{\mathrm{Y}},\\
   D_{\mathrm{D}} &= 0\,\mathrm{pt}
   \end{align*}%
 }%
\\\midrule
 \parbox[c]{15\unitlength}{\begin{picture}(15,15)(0,-4)
   \put(0,0){\line(1,0){3.8}}
   \put(4,0){\DTOUeg}
   \put(11.2,0){\line(1,0){3.8}}
%
   \put(2,7){\line(1,0){1.8}}
   \put(3,3.5){\vector(0,1){3.5}\vector(0,-1){3.5}}
   \put(2.8,3.5){\makebox(0,0)[r]{$H_{\mathrm{Y}}$}}
   \put(3,-2){\vector(0,1){2}}
   \put(2.8,-1){\makebox(0,0)[r]{$D_{\mathrm{Y}}$}}
%
   \put(4,7.2){\line(0,1){1.8}}
   \put(11,7.2){\line(0,1){1.8}}
   \put(6,8){\vector(-1,0){2}}
   \put(9,8){\vector(1,0){2}}
   \put(7.5,8){\makebox(0,0){$W_{\mathrm{Y}}$}}
%
 \end{picture}\vspace{-\baselineskip}
   \begin{align*}
   W_{\mathrm{Y}} &= h_{\mathrm{D}}+d_{\mathrm{D}},\\
   H_{\mathrm{Y}} &= w_{\mathrm{D}},\\
   D_{\mathrm{Y}} &= 0\,pt
   \end{align*}%
 }&
 \parbox[c]{15\unitlength}{\begin{picture}(15,15)(0,-4)
   \put(9,-0.2){\line(0,-1){2.8}}
   \put(4,0){\DTOUeg}
   \put(9, 7.2){\line(0,1){3.8}}
%
   \put(2,7){\line(1,0){1.8}}
   \put(2,0){\line(1,0){1.8}}
   \put(3,5){\vector(0,1){2}}
   \put(3,2){\vector(0,-1){2}}
   \put(3,3.5){\makebox(0,0){$W_{\mathrm{T}}$}}
%
   \put(4,7.2){\line(0,1){1.8}}
   \put(11,7.2){\line(0,1){1.8}}
   \put(6.5,8){\vector(-1,0){2.5}\vector(1,0){2.5}}
   \put(10,8){\vector(-1,0){1}\vector(1,0){1}}
   \put(10,8.2){\makebox(0,0)[b]{$H_{\mathrm{T}}$}}
   \put(6.5,8.2){\makebox(0,0)[b]{$D_{\mathrm{T}}$}}
%
 \end{picture}\vspace{-\baselineskip}
   \begin{align*}
   W_{\mathrm{T}} &= h_{\mathrm{D}}+d_{\mathrm{D}},\\
   H_{\mathrm{T}} &= d_{\mathrm{D}},\\
   D_{\mathrm{T}} &= h_{\mathrm{D}}
   \end{align*}%
 }&
 \parbox[c]{15\unitlength}{\begin{picture}(15,15)(0,-4)
   \put(6,-0.2){\line(0,-1){2.8}}
   \put(4,7){\TATEeg}
   \put(6, 7.2){\line(0,1){3.8}}
%
   \put(2,7){\line(1,0){1.8}}
   \put(2,0){\line(1,0){1.8}}
   \put(3,5){\vector(0,1){2}}
   \put(3,2){\vector(0,-1){2}}
   \put(3,3.5){\makebox(0,0){$W_{\mathrm{D}}$}}
%
   \put(4,7.2){\line(0,1){1.8}}
   \put(11,7.2){\line(0,1){1.8}}
   \put(5,8){\vector(-1,0){1}\vector(1,0){1}}
   \put(8.5,8){\vector(-1,0){2.5}\vector(1,0){2.5}}
   \put(5,8.2){\makebox(0,0)[b]{$H_{\mathrm{D}}$}}
   \put(8.5,8.2){\makebox(0,0)[b]{$D_{\mathrm{D}}$}}
%
 \end{picture}\vspace{-\baselineskip}
   \begin{align*}
   W_{\mathrm{D}} &= w_{\mathrm{T}},\\
   H_{\mathrm{D}} &= d_{\mathrm{T}},\\
   D_{\mathrm{D}} &= h_{\mathrm{T}}
   \end{align*}%
 }\\
\bottomrule
\end{tabular}
\end{table}



%<*en>
\paragraph{\cs{wd} and direction}
In \pTeX, \cs{wd},~\cs{ht},~\cs{dp} means the dimensions of a box register
\emph{with respact to the current direction}.
This means that the value of \cs{wd0} etc.\ might differ when the current direction is
different, even if \cs{box0} stores the same box.
However, this no longer applies in \LuaTeX-ja.

\begin{LTXexample}
% yoko direction
\setbox0=\hbox to 20pt{foo}
\the\wd0,~\hbox{\tate\vrule\the\wd0}
\wd0=100pt
\the\wd0,~\hbox{\tate \the\wd0}
\end{LTXexample}

To access box dimensions \emph{with respect to current direction}, 
one have to use the following commands instead of \cs{wd} wtc.
\begin{cslist}

 \item[\cs{ltjgetwd}\{<num>\}\textrm{, }\cs{ltjgetht}\{<num>\}\textrm{, }%
  \cs{ltjgetdp}\{<num>\}]
These commands return \emph{an internal dimension} of \cs{box<num>} with respect to 
the current direction. One can use these in \cs{dimexpr} primitive, as the followings.
\begin{verbatim}
\dimexpr 2\ltjgetwd{42}-3pt\relax, \the\ltjgetwd{1701}
\end{verbatim}
By implementaion,  the argument must be grouped as \verb+\ltjgetwd{42}+,
if the argument consists of more than one token.
\begin{LTXexample}[width=0.3\textwidth]
\parindent0pt
\setbox32767=\hbox{\yoko よこぐみ}
\fboxsep=0mm\fbox{\copy32767}
\vbox{\hsize=20mm
\yoko YOKO \the\ltjgetwd{32767}, \\
  \the\ltjgetht{32767}, \\ \the\ltjgetdp{32767}.}
\vbox{\hsize=20mm\raggedleft
\tate TATE \the\ltjgetwd{32767}, \\
  \the\ltjgetht{32767}, \\ \the\ltjgetdp{32767}.}
\vbox{\hsize=20mm\raggedleft
\dtou DTOU \the\ltjgetwd{32767}, \\
  \the\ltjgetht{32767}, \\ \the\ltjgetdp{32767}.}
\end{LTXexample}

 \item[\cs{ltjsetwd}<num>=<dimen>\textrm{, }\cs{ltjsetht}<num>=<dimen>\textrm{, }%
  \cs{ltjsetdp}<num>=<dimen>]
These commands set the dimension of \cs{box<num>}. Unlike \cs{ltjgetwd}, one does not need
	to group the argument <num>; four calls of \cs{ltjsetwd} below have the same meaning.
\begin{verbatim}
\ltjsetwd42 20pt,  \ltjsetwd42=20pt,  \ltjsetwd=42 20pt,  \ltjsetwd=42=20pt
\end{verbatim}

\end{cslist}
%</en>
%<*ja>
\paragraph{\cs{wd} 達と組方向}
ボックスレジスタ \cs{box}<num> にセットされているボックスの幅・高さ・深さの取得や
変更にはそれぞれ \cs{wd},~\cs{ht},~\cs{dp} プリミティブを用いるのであった．
\pTeX ではこれらのプリミティブは，「現在の組方向におけるボックスの寸法」を指すもので，
同じボックスに対しても現在の組方向によって返る値は異なるもであった．

\LuaTeX-jaにおいては状況が異なり，\cs{wd},~\cs{ht},~\cs{dp} が返す値は
現在の組方向には依存しない．下の例のように，横組のボックスが格納されていれば
\cs{wd}等は常に「横組におけるボックスの寸法」を意味する．

\begin{LTXexample}
% yoko direction
\setbox0=\hbox to 20pt{foo}
\the\wd0,~\hbox{\tate\vrule\the\wd0}
\wd0=100pt
\the\wd0,~\hbox{\tate \the\wd0}
\end{LTXexample}

\pTeX のように現在の組方向に応じたボックスの寸法の取得・設定を行うには，
代わりに次の命令を使用する．

\begin{cslist}

 \item[\cs{ltjgetwd}\{<num>\}\textrm{, }\cs{ltjgetht}\{<num>\}\textrm{, }%
  \cs{ltjgetdp}\{<num>\}]
現在の組方向に応じたボックスの寸法の取得を行う．結果は内部長さであるため，
\begin{verbatim}
\dimexpr 2\ltjgetwd{42}-3pt\relax, \the\ltjgetwd{1701}
\end{verbatim}
のように \cs{wd}<num> の代わりとして扱うことができる．引数が1桁の場合は，
\cs{ltjgetwd3} のように引数をグループで括らなくても良いが，そうでない場合は
（通常の命令への引数のように）\verb+\ltjgetwd{42}+ とグループに括る必要がある．
使用例は以下の通りである．
\begin{LTXexample}[width=0.3\textwidth]
\parindent0pt
\setbox32767=\hbox{\yoko よこぐみ}
\fboxsep=0mm\fbox{\copy32767}
\vbox{\hsize=20mm
\yoko YOKO \the\ltjgetwd{32767}, \\
  \the\ltjgetht{32767}, \\ \the\ltjgetdp{32767}.}
\vbox{\hsize=20mm\raggedleft
\tate TATE \the\ltjgetwd{32767}, \\
  \the\ltjgetht{32767}, \\ \the\ltjgetdp{32767}.}
\vbox{\hsize=20mm\raggedleft
\dtou DTOU \the\ltjgetwd{32767}, \\
  \the\ltjgetht{32767}, \\ \the\ltjgetdp{32767}.}
\end{LTXexample}

 \item[\cs{ltjsetwd}<num>=<dimen>\textrm{, }\cs{ltjsetht}<num>=<dimen>\textrm{, }%
  \cs{ltjsetdp}<num>=<dimen>]
現在の組方向に応じたボックスの寸法の設定を行う．\cs{afterassignment} を2回利用して
実装しているので，次の4通りは全て同じ意味である．
\begin{verbatim}
\ltjsetwd42 20pt,  \ltjsetwd42=20pt,  \ltjsetwd=42 20pt,  \ltjsetwd=42=20pt
\end{verbatim}

設定値は「横組」「縦組及び \cs{utod} 方向」「\cs{dtou} 方向」
の3種ごとに独立して記録される．……のときにどのようにボックスが配置されるか
は，Gitリポジトリ内の \verb+test/test55-boxdim_diffdir.{tex,pdf}+ を
参照してほしい．

\end{cslist}
%</ja>

%<*en>
\subsection{Getting current direction}
The \Param{direction} parameter returns the current direction, and
the \Param{boxdir} parameter (with the argumant <num>)
returns the direction of a box register \cs{box}<num>.
The returned value of these parameters are a \emph{string}:
\begin{center}
\small
\begin{tabular}{>{\bfseries}lccccc}
\toprule
Direction&\emph{yoko}&\emph{tate}&\emph{dtou}&\emph{utod}&(empty)\\
\midrule
Returned value&\texttt{4}&\texttt{3}&\texttt{1}&\texttt{11}&\texttt{0}\\
\bottomrule
\end{tabular}
\end{center}
\begin{LTXexample}[width=0.3\textwidth]
\leavevmode\def\DIR{\ltjgetparameter{direction}}
\hbox{\yoko \DIR}, \hbox{\tate\DIR},
\hbox{\dtou\DIR}, \hbox{\utod\DIR},
\hbox{\tate$\hbox{tate math: \DIR}$}

\setbox2=\hbox{\tate}\ltjgetparameter{boxdir}{2}
\end{LTXexample}
%</en>
%<*ja>
\subsection{組方向の取得}
「現在の組方向」や「<num>番のボックスの組方向」は，
\pTeX では\cs{ifydir} や \cs{ifybox}<num> といった条件判断文を使って
判断することができた．
しかし，\LuaTeX-jaはあくまでも\TeX マクロとLuaコードで
記述されており，それでは新たな条件判断命令を作るのは難しい．

\LuaTeX-jaでは，\Param{direction}パラメータで現在の組方向を，
\Param{boxdir}パラメータ（と追加の引数<num>）によって
\cs{box}<num>の組方向をそれぞれ取得できるようにした．
戻り値は文字列である：
\begin{center}
\small
\begin{tabular}{>{\bfseries}lccccc}
\toprule
組方向&\emph{横組}&\emph{tate縦組}&\emph{dtou方向}&\emph{utod方向}&(未割り当て)\\
\midrule
戻り値&\texttt{4}&\texttt{3}&\texttt{1}&\texttt{11}&\texttt{0}\\
\bottomrule
\end{tabular}
\end{center}

\begin{LTXexample}[width=0.3\textwidth]
\leavevmode\def\DIR{\ltjgetparameter{direction}}
\hbox{\yoko\DIR}, \hbox{\tate\DIR},
\hbox{\dtou\DIR}, \hbox{\utod\DIR},
\hbox{\tate$\hbox{tate math: \DIR}$}

\setbox2=\hbox{\tate}\ltjgetparameter{boxdir}{2}
\end{LTXexample}

これらを用いれば，例えば
\pTeX の \cs{ifydir}, \cs{iftbox200} と同等の条件判断を
\begin{verbatim}
\ifnum\ltjgetparameter{direction}=4
\ifnum\ltjgetparameter{boxdir}{200}=3
\end{verbatim}
のように行うことができる．
%</ja>

%<*en>
\subsection{Overridden box primitives}
To cope with multiple directions, the following primitives are
overridden by \LuaTeX-ja, using~\verb+\protected\def+.
\begin{cslist}[style=standard]
 \item[\cs{unhbox}<num>\textrm{, }\cs{unvbox}<num>]
 \item[\cs{vadjust}\{<material>\}]
 \item[\cs{lastbox}]
 \item[\cs{raise}<dimen><box>\textrm{, }\cs{lower}<dimen><box>\textrm{\ etc., }\cs{vcenter}] 
 \item[\cs{vcenter}]
\end{cslist}
%</en>
%<*ja>
\subsection{プリミティブの再定義}
異なる組方向に対応するために，以下に挙げるプリミティブは
\LuaTeX-jaによる前処理もしくは後処理が行われるように
\ \verb+\protected\def+ により再定義してある．

\begin{cslist}
 \item[\cs{unhbox}<num>\textrm{, }\cs{unvbox}<num>]
 ボックスの組方向が現在のリストと異なる場合は事前にエラーメッセージを出力する．
 \pTeX と異なり，エラーを無視して無理矢理 \cs{unhbox}, \cs{unvbox} を
 続行させることもできるが，その場合の組版結果は保証しない．
 \item[\cs{vadjust}\{<material>\}] 一旦プリミティブ本来の挙動を行う．その後，<material>の組方向が
 周囲の垂直リストの組方向と一致しない場合にエラーを出力し，
 該当の \cs{vadjust} を無効にする．
 \item[\cs{lastbox}] ボックスの「中身」を現在の組方向に合わせるためのノード
	      （\textit{dir\_node}という）を必要ならば除去し，
 正しく「中身」のボックスが返されるように前処理をする．
 \item[\cs{raise}<dimen><box>\textrm{, }\cs{lower}<dimen><box>\textrm{\ etc., }\cs{vcenter}]
 一方，こちらでは必要に応じて\textit{dir\_node}を作成する前処理を追加している．
\end{cslist}
%</ja>

%<en>\section{Font Metric and Japanese Font}
%<ja>\section{フォントメトリックと和文フォント}
%<en>\subsection{\cs{jfont}}
%<ja>\subsection{\cs{jfont} 命令}
\label{ssec-jfont}

%<*en>
To load a font as a Japanese font (for horizontal direction), you must use the
\cs{jfont} instead of~\cs{font}, while
\cs{jfont} admits the same syntax used in~\cs{font}.
\LuaTeX-ja automatically loads \Pkg{luaotfload} package,
so TrueType/OpenType fonts with features can be used for Japanese fonts:
%</en>
%<*ja>
フォントを（横組用）和文フォントとして読み込むためには，\cs{jfont} を
\cs{font} プリミティブの代わりに用いる．
\cs{jfont} の文法は \cs{font} と同じである．
\LuaTeX-jaは\Pkg{luaotfload}パッケージを自動的に読み込むので，
TrueType/OpenTypeフォントにfeatureを指定したものを和文フォントとして用いる
ことができる：
%</ja>
\begin{LTXexample}[width=0.3\textwidth]
\jfont\tradgt={file:KozMinPr6N-Regular.otf:script=latn;%
  +trad;-kern;jfm=ujis} at 14pt
\tradgt 当／体／医／区
\end{LTXexample}

%<*en>
Note that the defined control sequence
(\cs{tradgt} in the example above) using \cs{jfont} is not a
\textit{font\_def} token,  but a macro.
Hence the input like \verb+\fontname\tradgt+
causes a error.  We denote control sequences which are defined in
\cs{jfont} by <jfont\_cs>.
%</en>
%<*ja>
なお，\cs{jfont} で定義された制御綴（上の例だと \cs{tradgt}）
は\textit{font\_def}トークンではなくマクロである．従って，\verb+\fontname\tradgt+ のような
入力はエラーとなる．以下では \cs{jfont} で定義された
制御綴を<jfont\_cs>で表す．
%</ja>

\paragraph{JFM}
%<*en>
As noted in Introduction, a JFM has measurements of characters and
glues/kerns that are automatically inserted for Japanese
typesetting. The structure of JFM will be described in the next
subsection. At the calling of \cs{jfont}, you must specify
which JFM will be used for this font by the following keys:
%</en>
%<*ja>
「はじめに」の節で述べたように，JFMは文字と和文組版で自動的に挿入される
グルー／カーンの寸法情報を持っている．JFMの構造は次の節で述べる．
\cs{jfont} 命令の呼び出しの際には，どのJFMを用いるのかを以下のキーで
指定する必要がある：
%</ja>


\begin{table}[t]
%<en>\caption{Differences between JFMs shipped with \LuaTeX-ja}
%<ja>\caption{\LuaTeX-ja に同梱されている JFM の違い}
%<en>\medskip
\label{tab-difjfm}
\ltjsetparameter{jacharrange={+3}}
\centering\small
\def\r#1{{\jfont\g=file:KozMinPr6N-Regular.otf:jfm=#1 at 14.43324pt \g
\setbox0=\vtop{\hsize=7\zw\noindent ◆◆◆◆◆◆◆
ある日モモちゃんがお使いで迷子になって泣きました．}\copy0
\vrule height 0pt depth \dp0}}
\def\s#1{{\jfont\g=file:KozMinPr6N-Regular.otf:jfm=#1 at 14.43324pt \g
\setbox0=\vtop{\hsize=7\zw\noindent ちょっと！何}\copy0}}
\def\t#1{{\jfont\g=file:KozMinPr6N-Regular.otf:jfm=#1 at 19.24432pt \g
\setbox0=\hbox{漢}%
\vrule width 0.4pt height\ht0 depth\dp0\kern-.2pt\copy0
\kern-\wd0\vrule width\wd0height .2pt depth .2pt
\kern-\wd0\raise\ht0\hbox{\vrule width\wd0height .2pt depth .2pt}%
\kern-\wd0\lower\dp0\hbox{\vrule width\wd0height .2pt depth .2pt}%
\kern-.2pt\vrule width 0.4pt height\ht0 depth \dp0}}
\begin{tabular}{rccc}
\toprule
&\tt jfm-ujis.lua&\tt jfm-jis.lua&\tt jfm-min.lua\\
\midrule
%<en>Example~1~\cite{min10}
%<ja>例1~\cite{min10}
&\r{ujis}&\r{jis}&\r{min}\\
%<en>Example~2
%<ja>例2
&\s{ujis}&\s{jis}&\s{min}\\
Bounding Box&\t{ujis}&\t{jis}&\t{min}\\
\bottomrule
\end{tabular}
\ltjsetparameter{jacharrange={-3}}
\end{table}


\begin{cslist}
\item[jfm=<name>]
%<*en>
Specify the name of (horizontal) JFM.
If specified JFM has not been loaded, \LuaTeX-ja search and load
a file named \texttt{jfm-<name>.lua}.

The following JFMs are shipped with \LuaTeX-ja:
%</en>
%<*ja>
用いる（横組用）JFMの名前を指定する．もし以前に指定されたJFMが読み込まれていなければ，
\texttt{jfm-<name>.lua}を読み込む．以下の横組用JFMが\LuaTeX-jaには同梱されている：
%</ja>
\begin{description}
%<*en>
\item[\tt jfm-ujis.lua] A standard JFM in \LuaTeX-ja. This JFM is
  based on \verb+upnmlminr-h.tfm+, a metric for UTF/OTF package that
  is used in \upTeX. When you use the \Pkg{luatexja-otf} package, you should use this JFM.
%</en>
%<*ja>
\item[\tt jfm-ujis.lua] \LuaTeX-jaの標準JFMである．このJFMは\upTeX で
  用いられるUTF/OTFパッケージ用の和文用TFMである \verb+upnmlminr-h.tfm+ を
  元にしている．\Pkg{luatexja-otf}パッケージを使うときはこのJFMを指定するべきである．
%</ja>
%<*en>
\item[\tt jfm-jis.lua] A counterpart for \verb+jis.tfm+, ``JIS font
  metric'' which is widely used in \pTeX. A major difference between
  \texttt{jfm-ujis.lua} and this \texttt{jfm-jis.lua} is that
  most characters under \texttt{jfm-ujis.lua} are square-shaped,
  while that under \texttt{jfm-jis.lua} are horizontal
  rectangles.
%</en>
%<*ja>
\item[\tt jfm-jis.lua] \pTeX で広く用いられている「JISフォントメトリック」
  \verb+jis.tfm+ に相当するJFMである．\texttt{jfm-ujis.lua} とこの
  \texttt{jfm-jis.lua} の主な違いは，\texttt{jfm-ujis.lua} ではほとんどの文字が
  正方形状であるのに対し，\texttt{jfm-jis.lua} では横長の長方形状であることと，
  \texttt{jfm-ujis.lua} では「？」「！」の直後に半角空白が挿入されることである．
%</ja>
%<*en>
\item[\tt jfm-min.lua] A counterpart for \verb+min10.tfm+, which is one
  of the default Japanese font metric shipped with \pTeX.
%</en>
%<*ja>
\item[\tt jfm-min.lua] \pTeX に同梱されているデフォルトの和文用TFM
  である \verb+min10.tfm+ に相当する．
%</ja>
\end{description}
%<*en>
The difference among these three~JFMs is  shown in Table~\ref{tab-difjfm}.
%</en>
%<*ja>
これら3つのJFMの違いは表\ref{tab-difjfm}に示した．
%</ja>

\begin{figure}
\begin{LTXexample}[width=0.3\textwidth]
\ltjsetparameter{differentjfm=both}
\jfont\F=file:KozMinPr6N-Regular.otf:jfm=ujis
\jfont\G=file:KozGoPr6N-Medium.otf:jfm=ujis
\jfont\H=file:KozGoPr6N-Medium.otf:jfm=ujis;jfmvar=hoge
\F ）{\G 【】}（ % halfwidth space
   ）{\H 『』}（ % fullwidth space

ほげ，{\G 「ほげ」}（ほげ）\par
ほげ，{\H 「ほげ」}（ほげ）% pTeX-like

\ltjsetparameter{differentjfm=paverage}
\end{LTXexample}
\caption{Example of \texttt{jfmvar} key}
\label{fig:jfmvar}
\end{figure}

%<*en>
\item[jfmvar=<string>]
Sometimes there is a need that \ldots.
%</en>
%<*ja>
\item[jfmvar=<string>]
標準では，JFMとサイズが同じで，
  実フォントだけが異なる2つの和文フォントは「区別されない」．例えば
図\ref{fig:jfmvar}において，最初の「）」と「【」の実フォントは異なるが，
JFMもサイズも同じなので，普通に「）【」と入力した時と同じように半角空きとなる．

しかし，JFMとサイズが同じであっても，\texttt{jfmvar} キーの異なる
2つの和文フォント，例えば図\ref{fig:jfmvar}で言う \cs{F} と \cs{H}，
は「区別される」．異なる和文フォントに異なる \texttt{jfmvar} キーを割り当て，
かつ\Param{differentjfm}パラメータを \texttt{both} に設定すれば，
\pTeX と似た状況で組版されることになる．
%</ja>
\end{cslist}

\begin{figure}
\begin{LTXexample}[pos=t]
\newcommand\test{\vrule ダイナミックダイクマ\vrule\\}
\jfont\KMFW = KozMinPr6N-Regular:jfm=prop;-kern at 17pt
\jfont\KMFK = KozMinPr6N-Regular:jfm=prop at 17pt % kern is activated
\jfont\KMPW = KozMinPr6N-Regular:jfm=prop;script=dflt;+pwid;-kern at 17pt
\jfont\KMPK = KozMinPr6N-Regular:jfm=prop;script=dflt;+pwid;+kern at 17pt
\begin{multicols}{2}
\ltjsetparameter{kanjiskip=0pt}
{\KMFW\test \KMFK\test \KMPW\test \KMPK\test}

\ltjsetparameter{kanjiskip=3pt}
{\KMFW\test \KMFK\test \KMPW\test \KMPK\test}
\end{multicols}
\end{LTXexample}
\caption{Kerning information and \Param{kanjiskip}}
\label{fig:kern-jfm}
\end{figure}

%<en>\paragraph{Using kerning information in a font}
%<ja>\paragraph{ペアカーニング情報の使用}
\label{para-kern}
%<*en>
Some fonts have information for inter-glyph spacing.
This version of \LuaTeX-ja treats kerning spaces like an italic correction;
any glue and/or kern from the JFM and a kerning space can coexist.
See Figure~\ref{fig:kern-jfm} for detail.

Note that in \cs{setmainjfont} etc.\ which are provided by \Pkg{luatexja-fontspec}
package, kerning option is set \emph{off} (\texttt{Kerning=Off}) by default,
because of the compatibility with previous versions of \LuaTeX-ja.
%</en>
%<*ja>
いくつかのフォントはグリフ間のスペースについての情報を持っている．
このカーニング情報は以前の\LuaTeX-ja とはあまり相性が良くなかったが，
本バージョンではカーニングによる空白はイタリック補正と同様に扱うことになっている．
つまり，カーニング由来の空白とJFM由来のグルー・カーンは同時に入りうる．
図\ref{fig:kern-jfm}を参照．
\begin{itemize}
 \item \emph{\cs{jfont} や，
NFSS2用の命令（\ref{ssec-chgfnt}節，\ref{ssec-nfsspat}節）における指定では
カーニング情報は標準で使用する}ことになっているようである．
言い換えれば，カーニング情報を使用しない設定にするには，面倒でも
\begin{verbatim}
\jfont\hoge=KozMinPr6N-Regular:jfm=ujis;-kern at 3.5mm
\DeclareFontShape{JY3}{fuga}{m}{n} {<-> s*KozMinPr6N-Regular:jfm=ujis;-kern}{}
\end{verbatim}
のように，\texttt{-kern} という指定を自分で追加しなければいけない．
 \item
一方，\emph{\Pkg{luatexja-fontspec} の提供する \cs{setmainjfont}\
などの命令の標準設定ではカーニング情報は使用しない}（\texttt{Kerning=Off}）
ことになっている．これは以前のバージョンの\LuaTeX-jaとの互換性のためである．
\end{itemize}
%</ja>

%<*ja>
\paragraph{\texttt{extend}と\texttt{slant}}
OpenType font featureと見かけ上同じような形式で指定できるものに，
\begin{description}
\item[\texttt{extend=}<extend>] 横方向に<extend>倍拡大する．
\item[\texttt{slant=}<slant>] <slant>に指定された割合だけ傾ける．
\end{description}
の2つがある．
\texttt{extend}や\texttt{slant}を指定した場合は，それに応じたJFMを指定すべきである%
\footnote{\LuaTeX-jaでは，これらに対するJFMを特に提供することはしない予定である．}．
例えば，次の例では無理やり通常のJFMを使っているために，文字間隔やイタリック補正量が
正しくない：
%</ja>
%<*en>
\paragraph{\texttt{extend} and \texttt{slant}}
The following setting can be specified as OpenType font features:
\begin{cslist}[style=standard]
\item[\cs{extend=}<extend>] expand the font horizontally by <extend>.
\item[\cs{slant=}<slant>] slant the font.
\end{cslist}
Note that \LuaTeX-ja doesn't adjust JFMs by these \texttt{extend} and \texttt{slant}
settings; you have to write new JFMs on purpose.
For example, the following example uses the standard JFM \texttt{jfm-ujis.lua}, hence
letter-spacing and the width of italic correction are not correct:
%</en>
\begin{LTXexample}[width=0.3\textwidth]
\jfont\E=file:KozMinPr6N-Regular.otf:extend=1.5;jfm=ujis;-kern
\E あいうえお

\jfont\S=file:KozMinPr6N-Regular.otf:slant=1;jfm=ujis;-kern
\S あいう\/ABC
\end{LTXexample}

%<en>\subsection{\cs{tfont}}
%<ja>\subsection{\cs{tfont} 命令}

%<*en>
...
%</en>
%<*ja>
\cs{tfont} はフォントを縦組用の和文フォントとして読み込む命令であり，
\cs{jfont} の文法は \cs{jfont} と同じである．
\cs{tfont} で定義された縦組用和文フォントは，
以下の点が \cs{jfont} による横組用和文フォントとは異なる：
\begin{itemize}
 \item 出力時に，自動的に「\verb+vert+ feature相当」のグリフ置換が行われる．
       これは，\Pkg{luaotfload}による各種featureのサポートとは全く別個に行われるもので，
       いちいち \verb+vert+ featureを指定する必要はない．
\begin{verbatim}
\tfont\S=file:KozMinPr6N-Regular.otf:jfm=ujis % OK
\end{verbatim}
 \item \ref{ssec-math}節で述べる，数式中の和文フォントには縦組用和文フォントは指定できない．
 \item \texttt{jfm=<name>}\ の部分には縦組用JFMを指定する．現在同梱されているのは，
OTFパッケージの \verb+upnmlminr-v.tfm+ を元にした\texttt{jfm-ujisv.lua}\ のみである．
\end{itemize}
%</ja>

%<en>\subsection{Prefix \texttt{psft}}
%<ja>\subsection{\texttt{psft}プリフィックス}
\label{ssec-psft}
%<*en>
Besides ``\texttt{file:}''\ and ``\texttt{name:}''\ prefixes which
are introduced in the \Pkg{luaotfload} package,
\LuaTeX-ja adds ``\texttt{psft:}''\ prefix in \cs{jfont} (and~\cs{font}),
to specify a ``name-only'' Japanese font which
will not be embedded to PDF. Typical use of this prefix is to specify
standard, non-embedded Japanese fonts, namely, ``Ryumin-Light'' and
``GothicBBB-Medium''.

\emph{OpenType font features, such as ``{\tt +jp90}'',
have no meaning in name-only fonts using ``{\tt psft:}''\ prefix,
because we can't expect what fonts are actually used by the PDF reader.}
Note that \texttt{extend}~and~\texttt{slant} settings (see~above) are supported
with \texttt{psft} prefix, because they are only simple linear transformations.
%</en>
%<*ja>
\Pkg{luaotfload}で使用可能になった
\texttt{file:}\ と \texttt{name:}\ のプリフィックスに加えて，
\cs{jfont}（と \cs{font} プリミティブ）では
\texttt{psft:}プリフィックスを用いることができる．
このプリフィックスを用いることで，PDFには埋め込まれない「名前だけの」
和文フォントを指定することができる．「標準的な」非埋め込み和文フォント，
つまり「Ryumin-Light」「GothicBBB-Medium」の指定でこのプリフィックスが使われる．

\emph{\texttt{psft} プリフィックスの下では
\texttt{+jp90} などのOpenType font featureの効力はない．
非埋込フォントをPDFに使用すると，実際にどのようなフォントが
表示に用いられるか予測できないからである．}\
\texttt{extend} と \texttt{slant} 指定は単なる変形のため
\texttt{psft} プリフィックスでも使用可能である．
%</ja>

%<en>\paragraph{\texttt{cid} key}
%<ja>\paragraph{\texttt{cid}キー}
\label{para-cid}

%<*en>
The default font defined by using \texttt{psft:} prefix is for Japanese typesetting;
it is Adobe-Japan1-6 CID-keyed font.
One can specify \texttt{cid} key to use other CID-keyed non-embedded fonts
for Chinese or Korean typesetting.
%</en>
%<*ja>
標準で\texttt{psft:}プリフィックスで定義されるフォントは日本語用のもので
あり，Adobe-Japan1-6のCIDに対応したものとなる．しかし，\LuaTeX-jaは中国語
の組版にも威力を発揮することが分かり，日本語フォントでない非埋込フォント
の対応も必要となった．そのために追加されたのが\texttt{cid}キーである．

\texttt{cid}キーに値を指定すると，そのCIDを持った非埋込フォントを定義することができる：
%</ja>
\begin{lstlisting}[numbers=left]
\jfont\testJ={psft:Ryumin-Light:cid=Adobe-Japan1-6;jfm=jis}     % Japanese
\jfont\testD={psft:Ryumin-Light:jfm=jis}                        % default value is Adobe-Japan1-6
\jfont\testC={psft:AdobeMingStd-Light:cid=Adobe-CNS1-6;jfm=jis} % Traditional Chinese
\jfont\testG={psft:SimSun:cid=Adobe-GB1-5;jfm=jis}              % Simplified Chinese
\jfont\testK={psft:Batang:cid=Adobe-Korea1-2;jfm=jis}           % Korean
\end{lstlisting}
%<*en>
Note that the code above specifies \texttt{jfm-jis.lua}, which is for Japanese fonts,
as JFM for Chinese and Korean fonts.
%</en>
%<*ja>
上のコードでは中国語・韓国語用フォントに対してもJFMに
日本語用の\texttt{jfm-jis.lua}を指定しているので注意されたい．
%</ja>

%<*en>
At present, \LuaTeX-ja supports only 4 values written in the sample code above.
Specifying other values, e.g.,
%</en>
%<*ja>
今のところ，\LuaTeX-jaは上のサンプルコード中に書いた4つの値しかサポートしていない．
%</ja>
\begin{lstlisting}
\jfont\test={psft:Ryumin-Light:cid=Adobe-Japan2;jfm=jis}
\end{lstlisting}
%<*en>
produces the following error:
%</en>
%<*ja>
のようにそれら以外の値を指定すると，エラーが発生する：
%</ja>
\begin{lstlisting}[numbers=left]
! Package luatexja Error: bad cid key `Adobe-Japan2'.

See the luatexja package documentation for explanation.
Type  H <return>  for immediate help.
<to be read again>
                   \par
l.78

? h
I couldn't find any non-embedded font information for the CID
`Adobe-Japan2'. For now, I'll use `Adobe-Japan1-6'.
Please contact the LuaTeX-ja project team.
?
\end{lstlisting}

%<en>\subsection{Structure of a JFM File}
%<ja>\subsection{JFMファイルの構造}
\label{ssec-jfm-str}
%<en>A JFM file is a Lua script which has only one function call:
%<ja>JFMファイルはただ一つの関数呼び出しを含むLuaスクリプトである：
\begin{verbatim}
luatexja.jfont.define_jfm { ... }
\end{verbatim}
%<*en>
Real data are stored in the table which indicated above by
\verb+{ ... }+.  So, the rest of this subsection are devoted to describe the
structure of this table.  Note that all lengths in a JFM file are
floating-point numbers in design-size unit.
%</en>
%<*ja>
実際のデータは上で \verb+{ ... }+ で示されたテーブルの中に格納されている．
以下ではこのテーブルの構造について記す．
なお，JFMファイル中の長さは全てdesign-sizeを単位とする浮動小数点数であることに
注意する．
%</ja>

\begin{cslist}[style=standard]

\item[dir=<direction>]
%<en>(required)
%<ja>（必須）

%<*en>
The direction of JFM. \texttt{'yoko'}~(horizontal)
or \texttt{'tate'}~(vertical) are supported.
%</en>
%<*ja>
JFMの書字方向．\texttt{'yoko'}（横組）と \texttt{'tate'}（縦組）がサポートされる．
%</ja>

\item[zw=<length>]
%<en>(required)
%<ja>（必須）

%<en>The amount of the length of the ``full-width''.
%<ja>「全角幅」の長さ．この量が \cs{zw} の長さを決定する．

\item[zh=<length>]
%<en>(required)
%<ja>（必須）

%<en>The amount of the ``full-height'' (height + depth).
%<ja>「全角高さ」(height + depth)の長さ．通常は全角幅と同じ長さになるだろう．

\item[kanjiskip=\{<natural>, <stretch>, <shrink>\}]
%<en>(optional)
%<ja>（任意）

%<*en>
This field specifies the ``ideal'' amount of \Param{kanjiskip}. As noted
	     in Subsection~\ref{subs-kskip}, if the parameter
	     \Param{kanjiskip} is \cs{maxdimen}, the value specified
	     in this field is actually used (if this field is not specified in
	     JFM, it is regarded as 0\,pt). Note that <stretch> and <shrink>
	     fields are in design-size unit too.
%</en>
%<*ja>
理想的な\Param{kanjiskip}の量を指定する．\ref{subs-kskip}節で述べたように，
もし\Param{kanjiskip}が \cs{maxdimen} の値ならば，このフィールドで指定された
値が実際には用いられる（指定なしは0\,ptとして扱われる）．<stretch>と<shrink>のフィールドもdesign-size
が単位であることに注意せよ．
%</ja>

\item[xkanjiskip=\{<natural>, <stretch>, <shrink>\}]
%<en>(optional)
%<ja>（任意）

%<*en>
Like the \texttt{kanjiskip} field, this field specifies the ``ideal''
	     amount of \Param{xkanjiskip}.
%</en>
%<*ja>
\texttt{kanjiskip}フィールドと同様に，\Param{xkanjiskip}の理想的な量を
指定する．
%</ja>
\end{cslist}

%<*en>
\paragraph{Character classes}
Besides from above fields, a JFM file have several sub-tables those
indices are natural numbers.  The table indexed by~$i\in\omega$ stores
information of \emph{character class}~$i$. At least, the character class~0 is
always present, so each JFM file must have a sub-table whose index is
\texttt{[0]}.  Each sub-table (its numerical index is denoted by $i$) has
the following fields:
%</en>
%<*ja>
\paragraph{文字クラス}
上記のフィールドに加えて，JFMファイルはそのインデックスが自然数であるいくつかの
サブテーブルを持つ．インデックスが$i\in\omega$であるテーブルは\emph{文字クラス}$i$の
情報を格納する．少なくとも，文字クラス0は常に存在するので，JFMファイルはインデックス
が\texttt{[0]}のサブテーブルを持たなければならない．それぞれのサブテーブル
（そのインデックスを$i$で表わす）は以下のフィールドを持つ：
%</ja>

\begin{cslist}[style=standard]
\item[chars=\{<character>, ...\}]
%<en>(required except character class~0)
%<ja>（文字クラス0を除いて必須）

%<*en>
This field is a list of characters which are in this character
	     type~$i$. This field is optional if $i=0$, since all
	     \textbf{JAchar} which do not belong  any character classes other
	     than 0 are in the character class 0
             (hence, the character class~0 contains most of
	     \textbf{JAchar}s). In the list, character(s) can be specified in the following form:
\begin{itemize}
\item a Unicode code point
\item the character itself (as a Lua string, like \hbox{\ltjsetparameter{autoxspacing=false}\verb+'あ'+})
\item a string like \hbox{\ltjsetparameter{autoxspacing=false}\verb+'あ*'+} (the character followed by an asterisk)
\item several ``imaginary'' characters (We will describe these later.)
\end{itemize}
%</en>
%<*ja>
このフィールドは文字クラス$i$に属する文字のリストである．このフィールドは$i=0$の
場合には任意である（文字クラス0には，0以外の文字クラスに属するものを
除いた全ての\textbf{JAchar}が属するから）．このリスト中で文字を指定するには，以下の方法がある：
\begin{itemize}
\item Unicode におけるコード番号
\item 「\hbox{\ltjsetparameter{autoxspacing=false}\verb+'あ'+}」のような，文字それ自体
\item 「\hbox{\ltjsetparameter{autoxspacing=false}\verb+'あ*'+}」のような，文字それ自体の後にアスタリスクをつけたもの
\item いくつかの「仮想的な文字」（後に説明する）
\end{itemize}
%</ja> 

\item[width=<length>, height=<length>, depth=<length>, italic=<length>]
%<en>(required)
%<ja>（必須）

%<*en>
Specify the width of characters in character class~$i$, the height, the depth and
the amount of italic correction. All characters in character class~$i$ are regarded that its width, height, and depth are
as values of these fields.

But there is one exception: \texttt{width} field can be \texttt{'prop'}.
This means that width of a character becomes that of its ``real'' glyph.
%</en>
%<*ja>
文字クラス$i$に属する文字の幅，高さ，深さ，イタリック補正の量を指定する．
文字クラス$i$に属する全ての文字は，その幅，高さ，深さがこのフィールドで指定した
値であるものとして扱われる．

例外として，\emph{\texttt{width} フィールドには数値以外に \texttt{'prop'} が指定可能である}．
この場合，文字の幅はその「実際の」グリフの幅となる．OpenTypeの \texttt{prop} featureと併用
	     すれば，これによってプロポーショナル組を行うことができる．
%</ja>

\item[left=<length>, down=<length>, align=<align>]\

%<*en>
These fields are for adjusting the position of the ``real'' glyph. Legal
	     values of \texttt{align} field are \texttt{'left'},
	     \texttt{'middle'}, and \texttt{'right'}. If one of these
	     3~fields are omitted, \texttt{left} and \texttt{down} are
	     treated as~0, and \texttt{align} field is treated as
	     \texttt{'left'}.
The effects of these 3~fields are indicated in 
Figures \ref{fig-pos}~and~\ref{fig-pos-tate}.
%</en>
%<*ja>
これらのフィールドは実際のグリフの位置を調整するためにある．
\texttt{align} フィールドに指定できる値は \texttt{'left'}, \texttt{'middle'},
\texttt{'right'} のいずれかである．もしこれら3つのフィールドのうちの1つが省かれた
場合，\texttt{left} と \texttt{down} は0，\texttt{align} フィールドは
\ \texttt{'left'} であるものとして扱われる．
これら3つのフィールドの意味については図\ref{fig-pos}（横組用和文フォント），
図\ref{fig-pos-tate}（縦組用和文フォント）で説明する．
%</ja>

%<*en>
In most cases, \texttt{left} and \texttt{down} fields are~0, while
it is not uncommon that the \texttt{align} field is \texttt{'middle'} or \texttt{'right'}.
For example, setting the \texttt{align} field to \texttt{'right'} is practically needed
when the current character class is the class for opening delimiters'.
%</en>
%<*ja>
多くの場合，\texttt{left}と\texttt{down}は0である一方，
\texttt{align}フィールドが\texttt{'middle'}や\texttt{'right'}であることは
珍しいことではない．
例えば，\texttt{align}フィールドを\texttt{'right'}に指定することは，
文字クラスが開き括弧類であるときに実際必要である．
%</ja>

\begin{figure}[!tb]
\begin{minipage}{0.4\textwidth}%
\begin{center}\unitlength=10pt\small
\begin{picture}(15,12)(-1,-4)
\color{black!10!white}% jfm
\put(0,0){\vrule width 12\unitlength height 8\unitlength depth 3\unitlength}

\color{red!20!white}% step1
\put(-1,-1.5){\vrule width 6\unitlength height 7\unitlength depth 2.5\unitlength}

\color{red}% real glyph
\thicklines
\put(-1,-1.5){\vector(0,1){7}\vector(0,-1){2.5}\vector(1,0){6}}
\put(5,-1.5){\line(0,1){7}\line(0,-1){2.5}}
\put(-1,5.5){\line(1,0){6}}
\put(-1,-4){\line(1,0){6}}

\color{green!20!white}% real glyph
\put(3,0){\vrule width 6\unitlength height 7\unitlength depth 2.5\unitlength}

\color{black}% jfm
\thicklines
\put(0,0){\vector(0,1){8}\line(0,-1){3}\vector(1,0){12}}
\put(12,0){\line(0,1){8}\vector(0,-1){3}}
\put(0,8){\line(1,0){12}}
\put(0,-3){\line(1,0){12}}
\put(0.2,4){\makebox(0,0)[l]{\texttt{height}}}
\put(12.2,-1.5){\makebox(0,0)[l]{\texttt{depth}}}
\put(6,0.2){\makebox(0,0)[b]{\texttt{width}}}

\color{green!50!black}% step1
\thicklines
\put(3,0){\vector(0,1){7}\vector(0,-1){2.5}\vector(1,0){6}}
\put(9,0){\line(0,1){7}\line(0,-1){2.5}}
\put(3,7){\line(1,0){6}}
\put(3,-2.5){\line(1,0){6}}
\newsavebox{\eqdist}
\savebox{\eqdist}(0,0)[b]{%
  \thinlines
  \put(-0.08,0.2){\line(0,-1){0.4}}%
  \put(0.08,0.2){\line(0,-1){0.4}}}
\put(1.5,0){\usebox{\eqdist}}
\put(10.5,0){\usebox{\eqdist}}

\color{blue}% shifted
\thicklines
\put(3,-1.5){\vector(-1,0){4}}
\put(1,-1.7){\makebox(0,0)[t]{\texttt{left}}}
\put(3,0){\vector(0,-1){1.5}}
\put(3.2,-0.75){\makebox(0,0)[l]{\texttt{down}}}
\end{picture}
\end{center}
\end{minipage}%
\begin{minipage}{0.6\textwidth}%
%<*en>
Consider a  Japanese character node which belongs to 
a character class whose the \texttt{align}
field is \texttt{'middle'}.
%</en>
%<*ja>
\texttt{align}フィールドの値が\texttt{'middle'}であるような文字クラスに属する
和文文字ノードを考えよう．
%</ja>
\begin{itemize}
\item
%<*en>
The black rectangle is the imaginary body of the node.
Its width, height, and depth are specified by JFM.
%</en>
%<*ja>
黒色の長方形はノードの枠であり，
その幅，高さ，深さはJFMによって指定されている．
%</ja>
\item
%<*en>
Since the \texttt{align} field is \texttt{'middle'},
the ``real'' glyph is centered horizontally (the green rectangle) first.
%</en>
%<*ja>
\texttt{align}フィールドは\texttt{middle}なので，
実際のグリフの位置はまず水平方向に中央揃えしたものとなる（緑色の長方形）．
%</ja>
\item
%<*en>
Furthermore, the glyph is shifted according to values of fields
      \texttt{left} and \texttt{down}. The ultimate position of the real
      glyph is indicated by the red rectangle.
%</en>
%<*ja>
さらに，グリフは \texttt{left} と \texttt{down} の値に従ってシフトされる．
最終的な実際のグリフの位置は赤色の長方形で示された位置になる．
%</ja>
\end{itemize}
\end{minipage}
\medskip

\caption{%
%<en>The position of the real glyph (horizontal Japanese fonts)
%<ja>横組和文フォントにおける「実際の」グリフの位置
}
\label{fig-pos}
\end{figure}
\begin{figure}[!tb]
\begin{minipage}{0.4\textwidth}%
\begin{center}\unitlength=10pt\small
\begin{picture}(15,12)(-6,0)
\color{black!10!white}% jfm
\put(-6,0){\vrule width 12\unitlength height 11\unitlength}

\color{red!20!white}% real glyph
\put(-6.5,5.5){\vrule width 8\unitlength height 6\unitlength depth 3\unitlength}

\color{red}% real glyph
\thicklines
\put(-6.5,5.5){\vector(0,1){6}\vector(0,-1){3}\vector(1,0){8}}
\put( 1.5,5.5){\line(0,1){6}\line(0,-1){3}}
\put(-6.5,11.5){\line(1,0){8}}
\put(-6.5,2.5){\line(1,0){8}}

\color{green!20!white}% step1
\put(-4,3){\vrule width 8\unitlength height 6\unitlength depth 3\unitlength}

\color{black}% jfm
\thicklines
\put(0,11){\vector(1,0){6}\vector(-1,0){6}\vector(0,-1){11}}
\put(0,0){\line(1,0){6}\line(-1,0){6}}
\put(-6,0){\line(0,1){11}}
\put( 6,0){\line(0,1){11}}
\put( 3,10.8){\makebox(0,0)[t]{\texttt{height}}}
\put(-3,10.8){\makebox(0,0)[t]{\texttt{depth}}}
\put(0.2,5.5){\makebox(0,0)[l]{\texttt{width}}}

\color{green!50!black}% step1
\thicklines
\put(-4,3){\vector(0,1){6}\vector(0,-1){3}\vector(1,0){8}}
\put( 4,3){\line(0,1){6}\line(0,-1){3}}
\put(-4,9){\line(1,0){8}}
\put(-4,0){\line(1,0){8}}
\savebox{\eqdist}(0,0)[b]{%
  \thinlines
  \put(-0.08,0.2){\line(0,-1){0.4}}%
  \put(0.08,0.2){\line(0,-1){0.4}}}
\put(2,9){\usebox{\eqdist}}
\put(-2,9){\usebox{\eqdist}}


\color{blue}% shifted
\thicklines
\put(-4,3){\vector(0,1){2.5}}
\put(-3.8,4.25){\makebox(0,0)[l]{\texttt{left}}}
\put(-4,5.5){\vector(-1,0){2.5}}
\put(-5.,5.7){\makebox(0,0)[b]{\texttt{down}}}
\end{picture}
\end{center}
\end{minipage}%
\begin{minipage}{0.6\textwidth}%
%<*en>
(\dots)
%</en>
%<*ja>
\texttt{align}フィールドの値が\texttt{'right'}であるような文字クラスに属する
和文文字を考えよう．
\begin{itemize}
\item
実際のグリフの「垂直位置」は，ベースラインが文字の物理的な左右方向の中央を通る
位置となる．
\item 
また，この場合\texttt{align}フィールドは\texttt{middle}なので，
「水平位置」は字送り方向に「右寄せ」したものとなる（緑色の長方形）．
その際，高さ・深さは，実フォントのascender, descenderの値が使われる．
\item 
その後さらに \texttt{left} と \texttt{down} の値に従ってシフトされる
のは横組用和文フォントと変わらない．
\end{itemize}
%</ja>
\end{minipage}
\medskip

\caption{%
%<en>The position of the real glyph (vertical Japanese fonts)
%<ja>縦組和文フォントにおける「実際の」グリフの位置
}
\label{fig-pos-tate}
\end{figure}

\item[kern={\{[$j$]=<kern>, [$j'$]=\{<kern>, [<ratio>]\}, ...\}}]

\item[glue={\{[$j$]=\{<width>, <stretch>, <shrink>, [<priority>], [<ratio>]\}, ...\}}]\
%<*ja>

文字クラス$i$の文字と$j$の文字の間に挿入されるkernやglueの量を指定する．

             <priority>は \Pkg{luatexja-adjust} による優先順位付き
	     行長調整（\ref{ssec-adj}節）が有効なときのみ意味を持つ．
このフィールドは省略可能であり，行調整処理におけるこのglueの優先
             度を$-2$から$+2$の間の整数で指定する．大きい値ほど「伸びやすく，縮みやすい」
             ことを意味する．省略時の値
             は0であり，範囲外の値が指定されたときの動作は未定義である．

<ratio>も省略可能フィールドであり，$-1$から$+1$の実数値をとる．省略時の値は0である．
\begin{itemize}
\item $-1$はこのグルーが「前の文字」由来であることを示す．
\item $+1$はこのグルーが「後の文字」由来であることを示す．
\item それ以外の値は，「前の文字」由来のグルーと「後の文字」由来の
グルーが混合されていることを示す．
\end{itemize}
なお，このフィールドの値は\Param{differentjfm}の値が
\texttt{pleft},~\texttt{pright},~\texttt{paverage}の値のときのみ実際に用いられる．

例えば，\cite{x4051}では，句点と中点の間には，
句点由来の二分空きと中点由来の四分空きが挿入されるが，この場合には
\begin{itemize}
\item <width>には$0.5+0.25=0.75$を指定する．
\item <ratio>には次の値を指定する．
\[
 -1\cdot \frac{0.5}{0.5+0.25} + 1 \cdot \frac{0.25}{0.5+0.25} = -\frac13
\]
\end{itemize}
%</ja>
%<*en>
\

Specifies the width of kern or glue which will be inserted
between characters in character class~$i$ and those in character class~$j$.

<priority> is an integer in $[-2,2]$ (treated as 0 if omitted), and this is
used only in line adjustment with priority by \Pkg{luatexja-adjust}
(see Subsection~\ref{ssec-adj}). Higher value means the glue is easy to shretch,
and is also easy to shrink.

<ratio> is also an optional value between $-1$ and 1. For example,
The width of a glue between an ideographic full stop ``。''
and a fullwidth middle dot ``・'' is three-fourth of fullwidth,
namely halfwidth from the ideographic full stop, and
quarter-width from the fullwidth middle dot.  In this case,
we specify <ratio> to
\[
  -1\cdot \frac{0.5}{0.5+0.25} + 1 \cdot \frac{0.25}{0.5+0.25} = -\frac13.
\]
%</en>


\item[end\_stretch=<kern>, end\_shrink=<kern>]
%<*ja>
（任意）

優先順位付き行長調整が有効であり，かつ現在の文字クラスの文字が行
	     末に来た時に，行長を詰める調整・伸ばす調整のた
             めにこの文字と行末の間に挿入可能なカーンの大きさを指定する．
%</ja>

\end{cslist}

%<*ja>
\paragraph{文字クラスの決定}
文字からその文字の属する文字クラスを算出する過程は少々複雑である．
次の内容を一部に含んだ \texttt{jfm-test.lua} を用いて説明する．
%</ja>
%<*en>
\paragraph{Character to character classes}
We explain how the character class of a character is determined,
using  \texttt{jfm-test.lua} which contains the following:
%</en>
\begin{lstlisting}
   [0] = {
      chars = { '漢', 'ヒ*' },
      align = 'left', left = 0.0, down = 0.0,
      width = 1.0, height = 0.88, depth = 0.12, italic=0.0,
   },
   [2000] = {
      chars = { '。', '、*', 'ﾋ' },
      align = 'left', left = 0.0, down = 0.0,
      width = 0.5, height = 0.88, depth = 0.12, italic=0.0,
   },
\end{lstlisting}
%<ja>句点「。」の幅は二分であるので
%<en>Now consider the following input/output:
\begin{LTXexample}[width=0.3\textwidth]
\jfont\a=file:KozMinPr6N-Regular.otf:jfm=test;+vert
\setbox0\hbox{\a 。\inhibitglue 漢}
\the\wd0
\end{LTXexample}
%<*en>
Now we look why the above source outputs 20\,pt, not 15\,pt.
\begin{enumerate}
\item The ideographic full stop ``。'' is converted to its vertical form ``\char"FE12''~(\texttt{U+FE12}), %"
by \verb+vert+ feature.
\item The character class of ``\char"FE12'' is zero, hence its width is fullwidth.%"
\item The character class of ``漢'', hence its width is fullwidth.
\item \cs{inhibitglue} makes that no glue will be inserted between ``。'' and ``漢''.
\item Hence the width of \cs{hbox} equals to 20\,pt.
\end{enumerate}
This example shows that the character class of a character is determined \emph{after
applying font features by \Pkg{luaotfload}}.
%</en>
%<*ja>
では，全角二分(15.0\,pt)となるのが自然……と思うかもしれないが，上の実行結果では20\,ptとなっている．
それは以下の事情によるものである：
\begin{enumerate}
\item \verb+vert+ featureによって句点(\texttt{U+3002})が縦組用のグリフと置き換わる（\Pkg{luaotfload} による処理）．
\item この縦組用句点のグリフは \texttt{U+FE12} であるため，その文字クラスは0となる．
\item 以上により文字クラス0とみなされるため，結果として「。」の幅は全角だと認識されてしまう．
\end{enumerate}
この例は，\emph{文字クラスの決定はfont featureの適用によるグリフ置換の後に行われる}ことを
示している．
%</ja>

%<*en>
However, a starred specification like ``\texttt{'、*'}'' changes the rule.
Consider the following input:
%</en>
%<*ja>
但し，「\texttt{'、*'}」のようにアスタリスクつきの指定があると，
状況は異なる．
%</ja>
\begin{LTXexample}[width=0.3\textwidth]
\jfont\a=file:KozMinPr6N-Regular.otf:jfm=test;+vert
\a 漢、\inhibitglue 漢
\end{LTXexample}
%<*en>
Here, the character class of the ideographic comma ``、''~(\texttt{U+3001}) is determined
as following:
\begin{enumerate}
\item As the case of ``。'', the ideographic comma ``、'' is converted to its vertical
      form ``\char"FE11''~(\texttt{U+FE11}).%"
\item The character class of ``\char"FE11'' is zero.
\item However, \LuaTeX-ja remembers that this ``\char"FE11'' is obtained from ``、'' by
      font features. The character class of ``、'' is \emph{non-zero value}, namely, 2000.
\item Hence the ideographic comma ``、'' in above belongs the character class~2000.
\end{enumerate}
%</en>
%<*ja>
ここで，読点「、」(\texttt{U+3001})の文字クラスは，以下のようにして決まる．
\begin{enumerate}
\item とりあえず句点の時と同じように，\Pkg{luaotfload} によって縦組用読点のグリフに置き換わる．
\item 置換後のグリフは \texttt{U+FE11} であり，そのままでは文字クラスは0と判定される．
\item ところが，JFMには「\texttt{'、*'}」指定があるので，置換前の横組用読点のグリフによって文字クラスを判定する．
\item 結果として，上の出力例中の読点の文字クラスは2000となる．
\end{enumerate}
%</ja>

%<*ja>
なお，「\texttt{'\hbox{}ヒ*'}」のようにアスタリスクつきの指定があっても，
置換後のグリフで判定した文字クラスの値が0でなければ，そちらをそのまま作用する．
\begin{LTXexample}[width=0.3\textwidth]
\jfont\a=file:KozMinPr6N-Regular.otf:jfm=test;+hwid
\a 漢ヒひ
\end{LTXexample}
上の例では，
\texttt{hwid} featureにより，「ヒ」が半角の「ﾋ」に置き換わるが，
文字クラスは「ヒ」の属する0\emph{ではなく}，「ﾋ」の属する2000となる．
%</ja>

%<ja>\paragraph{仮想的な文字}
%<en>\paragraph{Imaginary characters}
%<*en>
As described before, you can specify several \emph{imaginary characters} in
\texttt{chars} field. The most of these characters are regarded as the
characters of class 0 in \pTeX.
As a result, \LuaTeX-ja can control typesetting finer than \pTeX.
The following is the list of imaginary characters:
%</en>
%<*ja>
上で説明した通り，\texttt{chars}フィールド中にはいくつかの「特殊文字」も
指定可能である．これらは，大半が\pTeX のJFMグルーの挿入処理ではみな「文字
クラス0の文字」として扱われていた文字であり，その結果として\pTeX より細か
い組版調整ができるようになっている．以下でその一覧を述べる：
%</ja>

\begin{cslist}
%%\item['diffmet']
%%<en>Used at a boundary between two \textbf{JAchar}s whose JFM or size is different.
%%<ja>JFMやサイズが異なる2つの\textbf{JAchar}の間の境界として用いられる．

\item['boxbdd']
%<en>The beginning/ending of a hbox, and the beginning of a noindented (i.e., began by \cs{noindent}) paragraph.
%<ja>hboxの先頭と末尾，及びインデントされていない（\cs{noindent} で開始された）段落の先頭を表す．

\item['parbdd']
%<en>The beginning of an (indented) paragraph.
%<ja>通常の（\cs{noindent} で開始されていない）段落の先頭．

\item['jcharbdd']
%<en>A boundary between \textbf{JAchar} and anything else (such as \textbf{ALchar}, kern, glue,\,\ldots).
%<ja>和文文字と「その他のもの」（欧文文字，glue，kern等）との境界．

\item[$-1$]
%<en>The left/right boundary of an inline math formula.
%<ja>行中数式と地の文との境界．
\end{cslist}

%<en>\paragraph{Porting JFM from \pTeX}
%<ja>\paragraph{\pTeX 用和文用TFMの移植}

% ToDo: English version.

%<*en>
See Japanese version of this manual.
%</en>

%<*ja>
以下に，\pTeX 用に作られた和文用TFMを\LuaTeX-ja用に移植する場合の注意点を挙げておく．
\begin{itemize}
\item 実際に出力される和文フォントのサイズがdesign sizeとなる．
このため，例えば$1\,\textrm{zw}$がdesign sizeの0.962216倍であるJISフォン
      トメトリック等を移植する場合は，次のようにするべきである：
\begin{itemize}
\item JFM中の全ての数値を$1/0.962216$倍しておく．
\item \TeX ソース中で使用するところで，サイズ指定を0.962216倍にする．
      \LaTeX でのフォント宣言なら，例えば次のように：
\begin{verbatim}
\DeclareFontShape{JY3}{mc}{m}{n}{<-> s*[0.962216] psft:Ryumin-Light:jfm=jis}{}
\end{verbatim}
\end{itemize}
\item 上に述べた特殊文字は，\texttt{'boxbdd'}を除き文字クラスを全部0とする
      （JFM中に単に書かなければよい）．
\item \texttt{'boxbdd'}については，それのみで一つの文字クラスを形成し，その
      文字クラスに関してはグルー／カーンの設定はしない．

これは，\pTeX では，
      hboxの先頭・末尾とインデントされていない（\cs{noindent} で開始さ
      れた）段落の先頭にはJFMグルーは入らないという仕様を実現させるためである．
\item \pTeX の組版を再現させようというのが目的であれば以上の注意を守れば十分である．

ところで，\pTeX では通常の段落の先頭にJFMグルーが残るという仕様があるので，
      段落先頭の開き括弧は全角二分下がりになる．全角下がりを実現させるに
      は，段落の最初に手動で \cs{inhibitglue} を追加するか，あるいは
      \ \cs{everypar} のハックを行い，それを自動化させるしかなかった．

一方，\LuaTeX-jaでは，\texttt{'parbdd'}によって，それがJFM側で調整できるよ
うになった．例えば，\LuaTeX-ja同梱のJFMのように，\texttt{'boxbdd'}と同じ文字クラスに
\texttt{'parbdd'}を入れれば全角下がりとなる．

\begin{LTXexample}[width=0.4\textwidth]
\jfont\g=KozMinPr6N-Regular:jfm=test \g
\parindent1\zw\noindent{}◆◆◆◆◆
\par 「◆◆←二分下がり
\par 【◆◆←全角下がり
\par 〔◆◆←全角二分下がり
\end{LTXexample}
\end{itemize}

但し，\cs{everypar} を利用している場合にはこの仕組みは正しく動かない．
そのような例としては箇条書き中の \cs{item} で始まる段落があり，\Pkg{ltjsclasses}では
人工的に「\texttt{'parbdd'}の意味を持つ」whatsitノードを作ることによって対処している%
\footnote{\texttt{ltjsclasses.dtx} を参照されたい．
JFM側で一部の対処ができることにより，\Pkg{jsclasses}のようにif文の判定はしていない．}．
%</ja>


%<en>\subsection{Math Font Family}
%<ja>\subsection{数式フォントファミリ}
\label{ssec-math}

%<*en>
\TeX\ handles fonts in math formulas by 16~font families\footnote{Omega,
Aleph, \LuaTeX~and $\varepsilon$-\kern-.125em(u)\pTeX\ can handles 256~families, but
an external package is needed to support this in plain \TeX\ and
\LaTeX.}, and each family has three fonts:
\cs{textfont}, \cs{scriptfont} and \cs{scriptscriptfont}.
%</en>
%<*ja>
\TeX\ は数式フォントを16のファミリ\footnote{Omega, Aleph, \LuaTeX，そして
  $\varepsilon$-\kern-.125em(u)\pTeX\ では256の数式ファミリを扱うことができるが，
  これをサポートするためにplain \TeX と\LaTeX では外部パッケージを読み込む必要が
  ある．}で管理し，それぞれのファミリは3つのフォントを持っている：
\cs{textfont}, \cs{scriptfont} そして \cs{scriptscriptfont} である.
%</ja>

%<*en>
\LuaTeX-ja's handling of Japanese fonts in math formulas is similar;
Table~\ref{tab-math} shows counterparts to \TeX's primitives for math
font families. There is no relation between the value of
\cs{fam} and that of \cs{jfam}; with appropriate settings,
you can set both \cs{fam} and \cs{jfam} to the same value.
%</en>
%<*ja>
\LuaTeX-jaの数式中での和文フォントの扱いも同様である．
表\ref{tab-math}は数式フォントファミリに対する \TeX のプリミティブと対応する
ものを示している．\cs{fam} と \cs{jfam} の値の間には関係はなく，
適切な設定の下では \cs{fam} と \cs{jfam} の両方に同じ値を設定することができる．
%</ja>

\begin{table}[!tb]
%<en>\caption{Commands for Japanese math fonts}
%<ja>\caption{和文数式フォントに対する命令}
\label{tab-math}
%<en>\medskip
\centering
\def\{{\char`\{}\def\}{\char`\}}\small
\begin{tabular}{ll}
\toprule
%<en>\bf Japanese fonts&\bf alphabetic fonts\\
%<ja>\bf 和文フォント&\bf 欧文フォント\\
\midrule
\cs{jfam}${}\in [0,256)$&\cs{fam}\\
\tt\Param{jatextfont}\,=\{<jfam>,<jfont\_cs>\}&\tt\cs{textfont}<fam>=<font\_cs>\\
\tt\Param{jascriptfont}\,=\{<jfam>,<jfont\_cs>\}&\tt\cs{scriptfont}<fam>=<font\_cs>\\
\tt\Param{jascriptscriptfont}\,=\{<jfam>,<jfont\_cs>\}&\tt\cs{scriptscriptfont}<fam>=<font\_cs>\\
\bottomrule
\end{tabular}
\end{table}

%<en>\subsection{Callbacks}
%<ja>\subsection{コールバック}

%<*en>
\LuaTeX-ja also has several callbacks. These callbacks can
be accessed via \verb+luatexbase.add_to_callback+ function and so on, as other callbacks.
%</en>
%<*ja>
\LuaTeX 自体のものに加えて，\LuaTeX-jaもコールバックを持っている．
これらのコールバックには，他のコールバックと同様に \verb+luatexbase.add_to_callback+
関数などを用いることでアクセスすることができる．
%</ja>
\begin{description}[font=\bfseries, style=nextline]
%<en>\item[\texttt{luatexja.load\_jfm} callback]
%<ja>\item[\texttt{luatexja.load\_jfm}コールバック]
%<*en>
With this callback you can overwrite JFMs.
This callback is called when a new JFM is loaded.
%</en>
%<*ja>
このコールバックを用いることでJFMを上書きすることができる．
このコールバックは新しいJFMが読み込まれるときに呼び出される．
%</ja>

\begin{lstlisting}[numbers=left]
function (<table> jfm_info, <string> jfm_name)
  return <table> new_jfm_info
end
\end{lstlisting}

%<*en>
The argument \verb+jfm_info+ contains a table similar to the table in a JFM file, except
this argument has \texttt{chars} field which contains character codes
	     whose character class is not~0.
%</en>
%<*ja>
引数 \verb+jfm_info+ はJFMファイルのテーブルと似たものが格納されるが，
クラス0を除いた文字のコードを含んだ\texttt{chars}フィールドを持つ点が異なる．
%</ja>

%<*en>
An example of this callback is the \texttt{ltjarticle} class, with
	     forcefully assigning character class~0 to \texttt{'parbdd'}
	     in the JFM \texttt{jfm-min.lua}.
%</en>
%<*ja>
このコールバックの使用例は\texttt{ltjarticle}クラスにあり，
\texttt{jfm-min.lua}中の\texttt{'parbdd'}を強制的にクラス0に割り当てている．
%</ja>

%<en>\item[\texttt{luatexja.define\_jfont} callback]
%<ja>\item[\texttt{luatexja.define\_jfont}コールバック]
%<*en>
This callback and the next callback form a pair, and you can assign characters
 which do not have fixed code points in Unicode to non-zero character classes.
This \texttt{luatexja.define\_font} callback is called just when new Japanese font is loaded.
%</en>
%<*ja>
このコールバックと次のコールバックは組をなしており，Unicode中に固定された文字コード
番号を持たない文字を非零の文字クラスに割り当てることができる．
このコールバックは新しい和文フォントが読み込まれたときに呼び出される．
%</ja>

\begin{lstlisting}[numbers=left]
function (<table> jfont_info, <number> font_number)
  return <table> new_jfont_info
end
\end{lstlisting}
%<*en>
\verb+jfont_info+ has the following fields,
\emph{which may not overwritten by a user}:
\begin{description}
\item[\texttt{size}]
The font size specified at \cs{jfont} in scaled points ($1\,\mathrm{sp}=2^{-16}\,\mathrm{pt}$).
\item[\texttt{zw}, \texttt{zh}, \texttt{kanjiskip}, \texttt{xkanjiskip}]
These are scaled value of those specified by the JFM, by the font size.
\item[\texttt{jfm}]
The internal number of the JFM.
\item[\texttt{var}]
The value of \texttt{jfmvar}~key, which is specified at \cs{jfont}.
The default value is the empty string.
\item[\texttt{chars}]
The mapping table from character codes to its character classes.\\
The specification \texttt{[i].chars=\{<character>, ...\}} in the JFM will be  stored in this
	   field as \texttt{chars=\{[<character>]=\,$i$, ...\}}.
\item[\texttt{char\_type}]
For $i\in\omega$, \texttt{char\_type[$i$]} is information of characters whose class is
	   $i$, and has the following fields:
\begin{itemize}
 \item \texttt{width},~\texttt{height}, \texttt{depth},
  \texttt{italic}, \texttt{down},~\texttt{left}\ are just
       scaled value of those specified by the JFM, by the font size.
 \item \texttt{align} is a number which is determined from \texttt{align}~field in the JFM:
\[
 \begin{cases}
  0&\text{\texttt{'left'} and the default value}\\0.5&\text{\tt 'middle'}\\1&\text{\tt 'right'}
 \end{cases}
\]
\item For $j\in \omega$, \texttt{[$j$]} stores a kern or a glue which will be inserted
between character class~$i$ and class~$j$.

If a kern will be inserted, the value of this field is \texttt{[$j$]=\{false, <kern\_node>, <ratio>\}},
where <kern\_node> is a node\footnote{%
 This version of \LuaTeX-ja uses ``direct access
      model'' for accessing nodes, if possible. }.
If a glue will be inserted, we have \texttt{[$j$]=\{false, <spec\_node>, <ratio>, <icflag>\}},
where <spec\_node> is also a node, and $\text{<icflag>}=\textit{from\_jfm}+\text{<priority>}$.
\end{itemize}
\end{description}
%</en>
%<*ja>
\verb+jfont_info+ は最低限以下のフィールドを持つが，これらを書き換えてはならない：
\begin{cslist}
\item[size]
実際に使われるフォントサイズ（sp単位）．$1\,\mathrm{sp}=2^{-16}\,\mathrm{pt}$．
\item[zw\textrm{, }zh\textrm{, }kanjiskip\textrm{, }xkanjiskip]
JFMファイルで指定されているそれぞれの値をフォントサイズに合わせてスケーリングしたものを
sp単位で格納している．
\item[jfm]
利用されているJFMを識別するための番号．
\item[var]
\cs{jfont},~\cs{tfont} で指定された \texttt{jfmvar} キーの値（未指定のときは空文字列）．
\item[chars]
文字コードから文字クラスへの対応が記述されたテーブル．\\
JFM内の \texttt{[i].chars=\{<character>, ...\}} という指定は\
\texttt{chars=\{[<character>]=\,$i$, ...\}} という形式に変換されている．
\item[char\_type]
$i\in\omega$に対して，\texttt{char\_type[$i$]} は文字クラス$i$の文字の寸法を格納しており，
以下のフィールドを持つ．
\begin{itemize}
 \item \texttt{width},~\texttt{height}, \texttt{depth},
  \texttt{italic}, \texttt{down},~\texttt{left}\ は
JFMで指定されているそれぞれの値をスケーリングしたものである．
 \item \texttt{align} はJFMで指定されている値によって，
\[
 \begin{cases}
  0&\text{\texttt{'left'}や省略時}\\0.5&\text{\tt 'middle'}\\1&\text{\tt 'right'}
 \end{cases}
\]
のいずれかの値をとる．
\item $j\in \omega$に対して，\texttt{[$j$]} は文字クラス$i$の文字と$j$の文字の間に挿入されるkern
      やglueを格納している．
間に入るものがkernであれば，このフィールドの値は\
\texttt{[$j$]=\{false, <kern\_node>, <ratio>\}} である．
<kern\_node>はkernを表すノードそのものである\footnote{%
本バージョンでは利用可能ならばノードのアクセス手法にdirect access
      modelを用いている．そのため，例えば\LuaTeX\ beta-0.78.2では，単なる自然数のようにし
      か見えないことに注意．
}．
glueであれば，\texttt{[$j$]=\{false, <spec\_node>, <ratio>, <icflag>\}} である．
<spec\_node>はglueの長さを表すノードそのものであり，
      $\text{<icflag>}=\textit{from\_jfm}+\text{<priority>}$である．
\end{itemize}
\end{cslist}
%</ja>

%<*en>
The returned table \verb+new_jfont_info+ also should include these fields, but
you are free to add more fields (to use them in the \texttt{luatexja.find\_char\_class} callback).
The \verb+font_number+ is a font number.
%</en>
%<*ja>
戻り値の \verb+new_jfont_info+ テーブルも上に述べたフィールドをそのまま含まなければならないが，
それ以外にユーザが勝手にフィールドを付け加えることは自由である．
\verb+font_number+ はフォント番号である．
%</ja>

%<*en>
A good example of this and the next callbacks is the \Pkg{luatexja-otf}
	     package, supporting \verb+"AJ1-xxx"+ form for Adobe-Japan1
	     CID characters in a JFM. This callback doesn't replace any
	     code of \LuaTeX-ja.
%</en>
%<*ja>
これと次のコールバックの良い使用例は\Pkg{luatexja-otf}パッケージであり，
JFM中でAdobe-Japan1 CIDの文字を \verb+"AJ1-xxx"+ の形で指定するために
用いられている．
%</ja>

%<en>\item[\texttt{luatexja.find\_char\_class} callback]
%<ja>\item[\texttt{luatexja.find\_char\_class}コールバック]
%<*en>
This callback is called just when \LuaTeX-ja is trying to determine which
	     character class a character \verb+chr_code+ belongs.
A function used in this callback should be in the following form:
%</en>
%<*ja>
このコールバックは\LuaTeX-jaが \verb+chr_code+ の文字がどの文字クラスに
属するかを決定しようとする際に呼び出される．
このコールバックで呼び出される関数は次の形をしていなければならない：
%</ja>
\begin{lstlisting}[numbers=left]
function (<number> char_class, <table> jfont_info, <number> chr_code)
  if char_class~=0 then return char_class
  else
    ....
    return (<number> new_char_class or 0)
  end
end
\end{lstlisting}

%<*en>
The argument \verb+char_class+ is the result of \LuaTeX-ja's default
	     routine or previous function calls in this callback, hence
	     this argument may not be 0. Moreover, the returned
	     \verb+new_char_class+ should be as same as \verb+char_class+ when \verb+char_class+
	     is not~0, otherwise you will overwrite the \LuaTeX-ja's
	     default routine.
%</en>
%<*ja>
引数 \verb+char_class+ は\LuaTeX-jaのデフォルトルーチンか，このコールバックの
直前の関数呼び出しの結果を含んでおり，したがってこの値は0ではないかもしれない．
さらに，戻り値の \verb+new_char_class+ は \verb+char_class+ が非零のときには
\verb+char_class+ の値と同じであるべきで，そうでないときは\LuaTeX-jaの
デフォルトルーチンを書き換えることになる．
%</ja>

%<en>\item[\texttt{luatexja.set\_width} callback]
%<ja>\item[\texttt{luatexja.set\_width}コールバック]
%<*en>
This callback is called when \LuaTeX-ja is trying to encapsule a
	     \textbf{JAchar} \textit{glyph\_node}, to adjust its
	     dimension and position.
%</en>
%<*ja>
このコールバックは\LuaTeX-jaが\textbf{JAchar}の寸法と位置を調節するために
その\textit{glyph\_node}をカプセル化しようとする際に呼び出される．
%</ja>
\begin{lstlisting}[numbers=left]
function (<table> shift_info, <table> jfont_info, <number> char_class)
  return <table> new_shift_info
end
\end{lstlisting}

%<*en>
The argument \verb+shift_info+ and the returned \verb+new_shift_info+ have
\texttt{down} and \texttt{left} fields, which are the amount of shifting
	     down/left the character in a scaled point.
%</en>
%<*ja>
引数 \verb+shift_info+ と戻り値の \verb+new_shift_info+ は
\texttt{down}と\texttt{left}のフィールドを持ち，これらの値は
文字の下／左へのシフト量（sp単位）である．
%</ja>

%<*en>
A good example is \Pkg{test/valign.lua}.
After loading this file, the vertical position of glyphs is automatically
adjusted; the ratio $(\hbox{height}:\hbox{depth})$ of glyphs is adjusted
to be that of letters in the character class~0. For example, suppose that
\begin{itemize}
\item The setting of the JFM: $(\hbox{height})=88x$, $(\hbox{depth})=12x$
  (the standard values of Japanese OpenType fonts);
\item The value of the real font: $(\hbox{height})=28y$, $(\hbox{depth})=5y$
  (the standard values of Japanese TrueType fonts).
\end{itemize}
Then, the position of glyphs is shifted up by
%</en>
%<*ja>
良い例が\Pkg{test/valign.lua}である．このファイルが読み込まれた状態では，
	     JFM内で規定された文字クラス0の文字における$(\hbox{高
	     さ}):(\hbox{深さ})$の比になるように，実際のフォントの出力上
	     下位置が自動調整される．例えば，
\begin{itemize}
\item JFM側の設定：$(\hbox{高さ})=88x$, $(\hbox{深さ})=12x$%
（和文OpenTypeフォントの標準値）
\item 実フォント側の数値：$(\hbox{高さ})=28y$, $(\hbox{深さ})=5y$（和文TrueTypeフォントの標準値）
\end{itemize}
となっていたとする．すると，実際の文字の出力位置は，以下の量だけ上にぜらされることとなる：
%</ja>
\[
 \frac{88x}{88x+12x} (28y+5y) - 28y = \frac{26}{25}y= 1.04y.
\]
\end{description}



%<en>\section{Parameters}
%<ja>\section{パラメータ}
\subsection{\cs{ltjsetparameter}}
\label{ssec-param}

%<*en>
As described before, \cs{ltjsetparameter} and \cs{ltjgetparameter} are
commands for accessing most parameters of \LuaTeX-ja. One of the main
reason that \LuaTeX-ja didn't adopted the syntax similar to that of \pTeX\
(\textit{e.g.},~\verb+\prebreakpenalty`）=10000+)
is the position of \verb+hpack_filter+ callback in the source
of \LuaTeX, see Section~\ref{sec-para}.
%</en>
%<*ja>
先に述べたように，\cs{ltjsetparameter} と \cs{ltjgetparameter} は
\LuaTeX-jaのほとんどのパラメータにアクセスするための命令である．
\LuaTeX-jaが\pTeX のような文法（例えば，\verb+\prebreakpenalty`）=10000+）を
採用しない理由の一つは，\LuaTeX のソースにおける \verb+hpack_filter+
コールバックの位置にある．\ref{sec-para}章を参照．
%</ja>

%<*en>
\cs{ltjsetparameter} and \cs{ltjglobalsetparameter} are commands
for assigning parameters. These take one argument which is a
\texttt{<key>=<value>} list.
The list of allowed keys are described in the next subsection.
The difference between
\cs{ltjsetparameter} and \cs{ltjglobalsetparameter} is only the
scope of assignment;
\cs{ltjsetparameter} does a local assignment and
\cs{ltjglobalsetparameter} does a global one.
They also obey the value of \cs{globaldefs},
like other assignment.
%</en>
%<*ja>
\cs{ltjsetparameter} と \cs{ltjglobalsetparameter} はパラメータを
指定するための命令である．これらは\texttt{<key>=<value>}のリストを
引数としてとる．許されるキーの一覧は次の節にある．
\cs{ltjsetparameter} と \cs{ltjglobalsetparameter} の違いはスコープの
違いのみで，
\cs{ltjsetparameter} はローカルな指定，\cs{ltjglobalsetparameter} は
グローバルな指定を行う．
これらは他のパラメータ指定と同様に \cs{globaldefs} の値に従う．
%</ja>

%<*en>
The following is the list of parameters which can be specified by the
\cs{ltjsetparameter} command. [\cs{cs}] indicates the counterpart
in \pTeX, and symbols beside each parameter has the following meaning:
%</en>
%<*ja>
以下は \cs{ltjsetparameter} に指定することができるパラメータの一覧である．
[\cs{cs}]は\pTeX における対応物を示す．
また，それぞれのパラメータの右上にある記号には次の意味がある：
%</ja>
\begin{itemize}
%<*en>
\item ``\ast'' : values at the end of a paragraph or a hbox are
adopted in the whole paragraph or the whole hbox.
%</en>
%<*ja>
\item ``\ast''：段落やhboxの終端での値がその段落／hbox全体で用いられる．
%</ja>
%<*en>
\item ``\dagger'': assignments are always global.
%</en>
%<*ja>
\item ``\dagger''：指定は常にグローバルになる．
%</ja>
\end{itemize}

\begin{description}[font=\mdseries]
\item[\DParam{jcharwidowpenalty}\,=<penalty>$^\ast$] [\cs{jcharwidowpenalty}]\ 

%<*en>
Penalty value for suppressing orphans. This penalty is inserted just
	     after the last \textbf{JAchar} which is not regarded as a
	     (Japanese) punctuation mark.
%</en>
%<*ja>
パラグラフの最後の字が孤立して改行されるのを防ぐためのペナルティの値．
このペナルティは（日本語の）句読点として扱われない最後の\textbf{JAchar}の直後に
挿入される．
%</ja>

\item[\DParam{kcatcode}\,=\{<chr\_code>,<natural number>\}$^\ast$]\

%<*en>
An additional attributes which each character whose character code is <chr\_code> has.
At the present version, the lowermost bit of <natural number> indicates
	     whether the character is considered as a punctuation mark
	     (see the description of \Param{jcharwidowpenalty} above).
%</en>
%<*ja>
文字コードが<chr\_code>の文字が持つ付加的な属性値(attribute)．
現在のバージョンでは，<natural number>の最下位ビットが，その文字が句読点と
みなされるかどうかを表している（上の\Param{jcharwidowpenalty}の記述を参照）．
%</ja>

\item[\DParam{prebreakpenalty}\,=\{<chr\_code>,<penalty>\}$^\ast$] [\cs{prebreakpenalty}]\

%<*ja>
文字コード<chr\_code>の\textbf{JAchar}が行頭にくることを抑止するために，
	     この文字の前に挿入/追加されるペナルティの量を指定する．

例えば閉じ括弧「〗」は絶対に行頭にきてはならないので，
\begin{verbatim}
\ltjsetparameter{prebreakpenalty={`〙,10000}}
\end{verbatim}
と，最大値の10000が標準で指定されている．他にも，小書きのカナなど，絶対禁止とい
	     うわけではないができれば行頭にはきて欲しくない場合に，0と
	     10000の間の値を指定するのも有用であろう.
%</ja>
%<*en>
Set a penalty which is inserted automatically before the character <chr\_code>,
to prevent a line starts from this character. For example, a line cannot started
with one of closing brackets ``〗'', so \LuaTeX-ja sets
\begin{verbatim}
\ltjsetparameter{prebreakpenalty={`〙,10000}}
\end{verbatim}
by default.
%</en>


\item[\DParam{postbreakpenalty}\,=\{<chr\_code>,<penalty>\}$^\ast$]
	   [\cs{postbreakpenalty}]\

%<*ja>
文字コード<chr\_code>の\textbf{JAchar}が行末にくることを抑止するために，
	     この文字の後に挿入/追加されるペナルティの量を指定する．

\pTeX では，\cs{prebreakpenalty}, \cs{postbreakpenalty}において，
\begin{itemize}
\item 一つの文字に対して，pre, postどちらか一つしか指定することができなかっ
      た（後から指定した方で上書きされる）．
\item pre, post合わせて256文字分の情報を格納することしかできなかった．
\end{itemize}
という制限があったが，\LuaTeX-jaではこれらの制限は解消されている．
%</ja>
%<*en>
Set a penalty which is inserted automatically after the character <chr\_code>,
to prevent a line ends with this character.
\pTeX\ has following restrictions on \cs{prebreakpenalty} and \cs{postbreakpenalty},
but they don't exist in \LuaTeX-ja:
\begin{itemize}
 \item Both \cs{prebreakpenalty} and \cs{postbreakpenalty} cannot be set
for the same character.
 \item We can set \cs{prebreakpenalty} and \cs{postbreakpenalty}  up to 256~characters.
\end{itemize}
%</en>

\item[\DParam{jatextfont}\,=\{<jfam>,<jfont\_cs>\}$^\ast$]
%<en>[\cs{textfont} in \TeX]
%<ja>[\TeX の \cs{textfont}]
\item[\DParam{jascriptfont}\,=\{<jfam>,<jfont\_cs>\}$^\ast$]
%<en>[\cs{scriptfont} in \TeX]
%<ja>[\TeX の \cs{scriptfont}]
\item[\DParam{jascriptscriptfont}\,=\{<jfam>,<jfont\_cs>\}$^\ast$]
%<en>[\cs{scriptscriptfont} in \TeX]
%<ja>[\TeX の \cs{scriptscriptfont}]
\item[\DParam{yjabaselineshift}\,=<dimen>]\
\item[\DParam{yalbaselineshift}\,=<dimen>] [\cs{ybaselineshift}]
\item[\DParam{tjabaselineshift}\,=<dimen>]\
\item[\DParam{talbaselineshift}\,=<dimen>] [\cs{tbaselineshift}]

\item[\DParam{jaxspmode}\,=\{<chr\_code>,<mode>\}$^\ast$]\

%<*en>
Setting whether inserting \Param{xkanjiskip} is allowed before/after a \textbf{JAchar} whose character code is <chr\_code>.
The followings are allowed for <mode>:
%</en>
%<*ja>
文字コードが<chr\_code>の\textbf{JAchar}の前／後ろに\Param{xkanjiskip}の
挿入を許すかどうかの設定．
以下の<mode>が許される：
%</ja>
\begin{description}
%<en>\item[0, \texttt{inhibit}] Insertion of \Param{xkanjiskip} is inhibited before the character, nor after the character.
%<ja>\item[0, \texttt{inhibit}] \Param{xkanjiskip}の挿入は文字の前／後ろのいずれでも禁止される．
%<en>\item[1, \texttt{preonly}] Insertion of \Param{xkanjiskip} is allowed before the character, but not after.
%<ja>\item[1, \texttt{preonly}] \Param{xkanjiskip}の挿入は文字の前では許されるが，後ろでは許されない．
%<en>\item[2, \texttt{postonly}] Insertion of \Param{xkanjiskip} is allowed after the character, but not before.
%<ja>\item[2, \texttt{postonly}] \Param{xkanjiskip}の挿入は文字の後ろでは許されるが，前では許されない．
%<en>\item[3, \texttt{allow}] Insertion of \Param{xkanjiskip} is allowed both before the character and after the character. This is the default value.
%<ja>\item[3, \texttt{allow}] \Param{xkanjiskip}の挿入は文字の前／後ろのいずれでも許される．これがデフォルトの値である．
\end{description}
%<*en>
This parameter is similar to the \cs{inhibitxspcode} primitive of \pTeX, but not compatible with \cs{inhibitxspcode}.
%</en>
%<*ja>
このパラメータは\pTeX の \cs{inhibitxspcode} プリミティブと似ているが，
互換性はない．
%</ja>
\item[\DParam{alxspmode}\,=\{<chr\_code>,<mode>\}$^\ast$] [\cs{xspcode}]\

%<*en>
Setting whether inserting \Param{xkanjiskip} is allowed before/after a
	     \textbf{ALchar} whose character code is <chr\_code>.
             The followings are allowed for <mode>:
%</en>
%<*ja>
文字コードが<chr\_code>の\textbf{ALchar}の前／後ろに\Param{xkanjiskip}の
挿入を許すかどうかの設定．
以下の<mode>が許される：
%</ja>
\begin{description}
%<en>\item[0, \texttt{inhibit}] Insertion of \Param{xkanjiskip} is inhibited before the character, nor after the character.
%<ja>\item[0, \texttt{inhibit}] \Param{xkanjiskip}の挿入は文字の前／後ろのいずれでも禁止される．
%<en>\item[1, \texttt{preonly}] Insertion of \Param{xkanjiskip} is allowed before the character, but not after.
%<ja>\item[1, \texttt{preonly}] \Param{xkanjiskip}の挿入は文字の前では許されるが，後ろでは許されない．
%<en>\item[2, \texttt{postonly}] Insertion of \Param{xkanjiskip} is allowed after the character, but not before.
%<ja>\item[2, \texttt{postonly}] \Param{xkanjiskip}の挿入は文字の後ろでは許されるが，前では許されない．
%<en>\item[3, \texttt{allow}] Insertion of \Param{xkanjiskip} is allowed before the character and after the character. This is the default value.
%<ja>\item[3, \texttt{allow}] \Param{xkanjiskip}の挿入は文字の前／後ろのいずれでも許される．これがデフォルトの値である．
\end{description}
%<*en>
Note that parameters \Param{jaxspmode} and \Param{alxspmode} share a common table, hence these two parameters are synonyms of each other.
%</en>
%<*ja>
\Param{jaxspmode}と\Param{alxspmode}は共通のテーブルを用いているため，
これら2つのパラメータは互いの異名となっていることに注意する．
%</ja>

\item[\DParam{autospacing}\,=<bool>] [\cs{autospacing}]
\item[\DParam{autoxspacing}\,=<bool>] [\cs{autoxspacing}]
\item[\DParam{kanjiskip}\,=<skip>$^\ast$] [\cs{kanjiskip}]\

%<*ja>
デフォルトで2つの\textbf{JAchar}の間に挿入されるグルーである．
通常では，\pTeX と同じようにフォントサイズに比例して変わることはない．
しかし，自然長が \cs{maxdimen} の場合は，例外的に和文フォントのJFM側で指定されている
値を採用（こちらはフォントサイズに比例）することになっている．
%</ja>

\item[\DParam{xkanjiskip}\,=<skip>$^\ast$] [\cs{xkanjiskip}]\

%<*ja>
デフォルトで\textbf{JAchar}と\textbf{ALchar}の間に挿入されるグルーである．
\Param{kanjiskip}と同じように，通常ではフォントサイズに比例して変わることはないが，
自然長が \cs{maxdimen} の場合が例外である．
%</ja>


\item[\DParam{differentjfm}\,=<mode>$^\dagger$]\

%<*en>
Specify how glues/kerns between two \textbf{JAchar}s whose JFM (or size) are different.
The allowed arguments are the followings:
%</en>
%<*ja>
JFM（もしくはサイズ）が異なる2つの\textbf{JAchar}の間にグルー／カーンをどのように
入れるかを指定する．
許される値は以下の通り：
%</ja>
\begin{quote}
\texttt{average},
\texttt{both},
\texttt{large},
\texttt{small},
\texttt{pleft},
\texttt{pright},
\texttt{paverage}
\end{quote}
%<*en>
The default value is \texttt{paverage}. \dots
%</en>
%<*ja>
デフォルト値は \texttt{paverage} である．
各々の値による差異の詳細は\ref{ssec-cluster-wa}節の「『右空白』の算出」を参照してほしい．
%</ja>

\item[\DParam{jacharrange}\,=<ranges>]
\item[\DParam{kansujichar}\,=\{<digit>, <chr\_code>\}$^\ast$] [\cs{kansujichar}]

\item[\DParam{direction}\,=<dir>\ \hbox{\rm (always local)}]\ 

%<*en>
Assigning to this parameter has the same effect as
\cs{yoko}~(if $\hbox{<dir>}=4$), \cs{tate}~(if $\hbox{<dir>}=3$),
\cs{dtou}~(if $\hbox{<dir>}=1$) or \cs{utod}~(if $\hbox{<dir>}=11$).
If the argument <dir> is not one of 4,~3, 1~nor~11, 
the behavior of this assignment is undefined.
%</en>
%<*ja>
組方向を変更する \cs{yoko}~(if $\hbox{<dir>}=4$), \cs{tate}~(if $\hbox{<dir>}=3$),
\cs{dtou}~(if $\hbox{<dir>}=1$), \cs{utod}~(if $\hbox{<dir>}=11$) と同じ役割を持つ．
利用可能な状況もこれら4命令と同一である．引数<dir>が4,~3, 1,~11のいずれでも無いときの
動作は未定義である．
%</ja>

\end{description}

\subsection{\cs{ltjgetparameter}}
\label{ssec-getpar}
%<*en>
\cs{ltjgetparameter} is a control sequence for acquiring parameters. It
always takes a parameter name as first argument.
%</en>
%<*ja>
\cs{ltjgetparameter} はパラメータの値を取得するための命令であり，
常にパラメータの名前を第一引数にとる．
%</ja>
\begin{LTXexample}
\ltjgetparameter{differentjfm},
\ltjgetparameter{autospacing},
\ltjgetparameter{kanjiskip},
\ltjgetparameter{prebreakpenalty}{`）}.
\end{LTXexample}

%<*en>
\emph{The return value of\/ \cs{ltjgetparameter} is
always a string}. This is outputted by \texttt{tex.write()}, so any
character other than space~``\texttt{\char32}''~(\texttt{U+0020}) has the category code
12~(other), while the space has 10~(space).
%</en>
%<*ja>
\emph{\cs{ltjgetparameter} の戻り値は常に文字列である．}
これは\texttt{tex.write()}によって出力しているためで，空白「\texttt{\char32}」
(\texttt{U+0020})を除いた文字のカテゴリーコードは全て12~(other)となる．
一方，空白のカテゴリーコードは10~(space)である．
%</ja>

\begin{itemize}
\item
%<*en>
If first argument is one of the
following, no  additional argument is needed.
%</en>
%<*ja>
第1引数が次のいずれかの場合には，追加の引数は必要ない．
%</ja>
\begin{quote}
\sffamily
jcharwidowpenalty, yjabaselineshift, yalbaselineshift, autospacing, autoxspacing,\\
kanjiskip, xkanjiskip, differentjfm, direction
\end{quote}
%<*en>
Note that \verb+\ltjgetparameter{autospacing}+~and~\verb+\ltjgetparameter{autoxspacing}+
returns 1 or 0, not
\texttt{true}~nor~\texttt{false}.
%</en>
%<*ja>
\verb+\ltjgetparameter{autospacing}+ と \verb+\ltjgetparameter{autoxspacing}+ は，
\texttt{true}や\texttt{false}を返すの\emph{ではなく}，
1と0のいずれかを返すことに注意，
%</ja>

\item
%<*en>
If first argument is one of the
following, an additional argument---a character code, for example---is needed.
%</en>
%<*ja>
第1引数が次のいずれかの場合には，さらに文字コードを第二引数としてとる．
%</ja>
\begin{quote}
\sffamily
kcatcode, prebreakpenalty, postbreakpenalty, jaxspmode, alxspmode
\end{quote}
%<*en>
\verb+\ltjgetparameter{jaxspmode}{...}+~and~\verb+\ltjgetparameter{alxspmode}{...}+
returns 0,~1, 2,~or~3, instead of \texttt{preonly} etc.
%</en>
%<*ja>
\verb+\ltjgetparameter{jaxspmode}{...}+ や \verb+\ltjgetparameter{alxspmode}{...}+\
は，\texttt{preonly} などといった文字列ではなく，0から3までの値を返す．
%</ja>

\item
%<*en>
\verb+\ltjgetparameter{jacharrange}{+<range>\verb+}+ returns \texttt{0}
if ``characters which belong to the character range~<range> are \textbf{JAchar}'',
\texttt{1} if ``\dots~are \textbf{ALchar}''.
Although there is no character range~$-1$, specifying $-1$ to <range> does not cause an
      error (returns 1).
%</en>
%<*ja>
\verb+\ltjgetparameter{jacharrange}{+<range>\verb+}+ は，<range>が\textbf{JAchar}達の
範囲ならば0を，そうでなければ1を返す．「$-1$番の文字範囲」は存在しないが，<range>に$-1$を
指定してもエラーは発生しない（1を返す）．
%</ja>

\item
%<*en>
For an integer~<digit> between 0~and~9,
     \verb+\ltjgetparameter{kansujichar}{+<digit>\verb+}+ returns the character code
of the result of \cs{kansuji}<digit>.
%</en>
%<*ja>
0--9の数<digit>に対して，
\verb+\ltjgetparameter{kansujichar}{+<digit>\verb+}+ は，\cs{kansuji}<digit>で出力され
     る文字の文字コードを返す．
%</ja>

\item
%<*en>
\verb+\ltjgetparameter{adjustdir}+ returns a integer which represents
the direction of the surrounding vertical list.
As \Param{direction}, the return value 1 means \emph{down-to-up} direction,
3 means \emph{tate} direction (vertical typesetting),
and 4 means \emph{yoko} direction (horizontal typesetting).
%</en>
%<*ja>
\verb+\ltjgetparameter{adjustdir}+ は，周囲のvboxの組方向（言い換えれば，
\cs{vadjust} で用いられる組方向）を表す数値を返す．
\Param{direction}と同様に，1は \cs{dtou} 方向を，
3は縦組みを，4は横組みを表す．
%</ja>

\item
%<*en>
For an integer~<reg\_num> between 0~and~65535,
\verb+\ltjgetparameter{boxdim}{+<reg\_num>\verb+}+ returns the direction of
\cs{box}<reg\_num>. If this box register is void, the returned value is zero.
%</en>
%<*ja>
0--65535の数<reg\_num>に対して，
\verb+\ltjgetparameter{boxdim}{+<reg\_num>\verb+}+ は，\cs{box}<reg\_num>に
格納されているボックスの組方向を表す．もしこのレジスタが空の場合は，0が返される．
%</ja>

\item
%<*en>
The following parameter names \emph{cannot be specified} in \cs{ltjgetparameter}.
%</en>
%<*ja>
次のパラメータ名を \cs{ltjgetparameter} に指定することはできない．
%</ja>
\begin{quote}
\sffamily
jatextfont, jascriptfont, jascriptscriptfont, jacharrange
\end{quote}

\item
%<*en>
\verb+\ltjgetparameter{chartorange}{+<chr\_code>\verb+}+ returns
the range number which <chr\_code> belongs to
(although there is no parameter named ``chartorange'').

If <chr\_code> is between 0 and 127, this <chr\_code> does not belong to
any character range. In this case,
      \verb+\ltjgetparameter{chartorange}{+<chr\_code>\verb+}+
returns $-1$.

Hence, one can know whether <chr\_code> is \textbf{JAchar} or not
by the following:
%</en>
%<*ja>
\verb+\ltjgetparameter{chartorange}{+<chr\_code>\verb+}+ によって
<chr\_code>の属する文字範囲の番号を知ることができる．

<chr\_code>に0--127の値を指定した場合（このとき，<chr\_code>が属する
文字範囲は存在しない）は$-1$が返る．

そのため，<chr\_code>が\textbf{JAchar}か\textbf{ALchar}かは
次で知ることができる：
%</ja>
\begin{quote}
\ttfamily \verb+\ltjgetparameter{jacharrange}{\ltjgetparameter{chartorange}{+%
  <chr\_code>\verb+}}+\\\null\hfill\verb+% 0 if JAchar, 1 if ALchar+
\end{quote}

\end{itemize}




%<en>\section{Other Commands for plain \TeX\ and \LaTeXe}
%<ja>\section{plainでも\LaTeX でも利用可能なその他の命令}
%<en>\subsection{Commands for Compatibility with \pTeX}
%<ja>\subsection{\pTeX 互換用命令}

%<*en>
The following commands are implemented for compatibility with \pTeX.
Note that the former five commands don't support JIS~X~0213, but only JIS~X~0208.
The last \cs{kansuji} converts an integer into its Chinese numerals.
%</en>
%<*ja>
以下の命令は\pTeX との互換性のために実装されている．そのため，JIS~X~0213には対応せず，
\pTeX と同じようにJIS~X~0208の範囲しかサポートしていない．
%</ja>
\begin{center}
\cs{kuten}, \cs{jis}, \cs{euc}, \cs{sjis}, \cs{jis}, \cs{kansuji}
\end{center}
%<*en>
These six commands takes an internal integer, and returns a \emph{string}.
%</en>
%<*ja>
これら6命令は内部整数を引数とするが，実行結果は\textbf{文字列}であることに注意．
%</ja>
\begin{LTXexample}
\newcount\hoge
\hoge="2423 %"
\the\hoge, \kansuji\hoge\\
\jis\hoge, \char\jis\hoge\\
\kansuji1701
\end{LTXexample}

%<*en>
To change characters of Chinese numerals for each digit, set \Param{kansujichar} parameter:
\begin{LTXexample}
\ltjsetparameter{kansujichar={1,`壹}}
\ltjsetparameter{kansujichar={7,`漆}}
\ltjsetparameter{kansujichar={0,`零}}
\kansuji1701
\end{LTXexample}
%</en>


\subsection{\cs{inhibitglue}}
%<*en>
\cs{inhibitglue} suppresses the insertion of \textbf{JAglue}.
The following is an example, using a special JFM that there will be a glue between
the beginning of a box and ``あ'', and also between ``あ''~and~``ウ''.
%</en>
%<*ja>
\cs{inhibitglue} は\textbf{JAglue}の挿入を抑制する．
以下は，ボックスの始めと「あ」の間，「あ」「ウ」の間にグルーが入る特別なJFMを用いた例で
ある．
%</ja>

\begin{LTXexample}[width=0.4\textwidth]
\jfont\g=file:KozMinPr6N-Regular.otf:jfm=test \g
\fbox{\hbox{あウあ\inhibitglue ウ}}
\inhibitglue\par\noindent あ1
\par\inhibitglue\noindent あ2
\par\noindent\inhibitglue あ3
\par\hrule\noindent あoff\inhibitglue ice
\end{LTXexample}

%<*en>
With the help of this example, we remark the specification of \cs{inhibitglue}:
%</en>
%<*ja>
この例を援用して，\cs{inhibitglue} の仕様について述べる．
%</ja>
\begin{itemize}
%<*en>
\item The call of \cs{inhibitglue} in the (internal) vertical mode is
      simply ignored.
%</en>
%<*ja>
\item \cs{inhibitglue} の垂直モード中での呼び出しは意味を持たない．
4行目の入力で有効にならないのは，\cs{inhibitglue} の時点では垂直モードであり，
\cs{noindent} の時点で水平モードになるからである．
%</ja>

%<*en>
\item The call of \cs{inhibitglue} in the (restricted) horizontal
      mode is only effective on the spot; does not get over boundary of
      paragraphs. Moreover, \cs{inhibitglue} cancels ligatures and
      kernings, as shown in the last line of above example.
%</en>
%<*ja>
\item \cs{inhibitglue} の（制限された）水平モード中での呼び出しはその場でのみ
  有効であり，段落の境界を乗り越えない．
  さらに，\cs{inhibitglue} は上の例の最終行のように（欧文における）リガチャとカーニングを
  打ち消す．これは，\cs{inhibitglue} が内部的には「現在のリスト中にwhatsitノードを
  追加する」ことを行なっているからである．
%</ja>

%<*en>
\item The call of \cs{inhibitglue} in math mode is just ignored.
%</en>
%<*ja>
\item \cs{inhibitglue} を数式モード中で呼び出した場合はただ無視される．
%</ja>

%<*ja>
\item \LaTeX で\LuaTeX-ja を使用する場合は，
\cs{inhibitglue} の代わりとして \verb+\<+ を使うことができる．
既に \verb+\<+ が定義されていた場合は，\LuaTeX-ja の読み込みで強制的に上書きされるので
注意すること．
%</ja>
\end{itemize}


\subsection{\cs{ltjdeclarealtfont}}
\label{ssec-altfont}
%<*en>
Using \cs{ltjdeclarealtfont}, one can ``compose'' more than one Japanese fonts.
This \cs{ltjdeclarealtfont} uses in the following form:
\begin{quote}
\ttfamily \textbackslash ltjdeclarealtfont<base\_font\_cs><alt\_font\_cs>{<range>}
\end{quote}
where  <base\_font\_cs>~and~<alt\_font\_cs> are defined by \cs{jfont}.
Its meaning is
\begin{quote}
If the current Japanese font is <base\_font\_cs>, characters which belong to <range>
is typeset by another Japanese font <alt\_font\_cs>, instead of <base\_font\_cs>.
\end{quote}

<range> is a comma-separated list of character codes, but also accepts negative integers:
$-n$~($n≥1$) means that all characters of character classes~$n$, with respect to JFM used
by <base\_font\_cs>. Note that characters which do not exist in <alt\_font\_cs> are
ignored.

For example, if \cs{hoge} uses \texttt{jfm-ujis.lua}, the standard JFM of \LuaTeX-ja,
then
\begin{verbatim}
\ltjdeclarealtfont\hoge\piyo{"3000-"30FF, {-1}-{-1}}
\end{verbatim}
does
\begin{quote}
If the current Japanese font is \cs{hoge}, \texttt{U+3000}--\texttt{U+30FF}
and characters in class~1 (ideographic opening brackets)
are typeset by \cs{piyo}.
\end{quote}
%</en>
%<*ja>
\cs{jfont} の書式を見ればわかるように，基本的には\LuaTeX-jaにおける1つの和文フォントに
使用出来る「実際のフォント」は1つである．
しかし，\cs{ltjdeclarealtfont} を用いると，この原則から外れることができる．

\cs{ltjdeclarealtfont} は以下の書式で使用する：
\begin{quote}
\ttfamily \textbackslash ltjdeclarealtfont<base\_font\_cs><alt\_font\_cs>{<range>}
\end{quote}
これは「現在の和文フォント」が<base\_font\_cs>であるとき，
<range>に属する文字は<alt\_font\_cs>を用いて組版される，という意味である．
\begin{itemize}
 \item <base\_font\_cs>, <alt\_font\_cs>は
\cs{jfont} によって定義された和文フォントである．
 \item <range>は文字コードの範囲を表すコンマ区切りのリストであるが，
   例外として負数$-n$は「<base\_font\_cs>のJFMの文字クラス$n$に属する全ての文字」
   を意味する．

<range>中に<alt\_font\_cs>中に実際には存在しない文字が指定された場合は，
その文字に対する設定は無視される．
\end{itemize}

例えば，\cs{hoge} のJFMが\LuaTeX-ja標準の
\ \texttt{jfm-ujis.lua} であった場合，
\begin{verbatim}
\ltjdeclarealtfont\hoge\piyo{"3000-"30FF, {-1}-{-1}}
\end{verbatim}
は「\cs{hoge} を利用しているとき，
\texttt{U+3000}--\texttt{U+30FF}と
文字クラス1（開き括弧類）中の文字だけは \cs{piyo} を用いる」
ことを設定する．\verb+{-1}-{-1}+ という変わった指定の仕方をしているのは，
普通に \texttt{-1} と指定したのでは正しく$-1$と読み取られないという
マクロの都合による．
%</ja>



%<en>\section{Commands for \LaTeXe}
%<ja>\section{\LaTeXe 用の命令}

%<en>\subsection{Patch for NFSS2}
%<ja>\subsection{NFSS2へのパッチ}
\label{ssec-nfsspat}

%<*en>
Japanese patch for NFSS2 in \LuaTeX-ja
is based on \texttt{plfonts.dtx} which plays the same role in \pLaTeXe.
We will describe
commands which are not described in Subsection~\ref{ssec-chgfnt}.
%</en>
%<*ja>
\LuaTeX-jaのNFSS2への日本語パッチは
\pLaTeXe で同様の役割を果たす \texttt{plfonts.dtx} をベースに，
和文エンコーディングの管理等をLuaで書きなおしたものである．
ここでは\ref{ssec-chgfnt}節で述べていなかった命令について
記述しておく．
%</ja>

\begin{cslist}%
\item[\normalfont\bfseries %
%<ja>追加の長さ変数達
%<en>additonal dimensions
]
%<*en>
Like \pLaTeXe, \LuaTeX-ja defines the following dimensions
for information of current Japanese font:
%</en>
%<*ja>
\pLaTeXe と同様に，\LuaTeX-jaは「現在の和文フォントの情報」を格納する長さ変数
%</ja>
\begin{quote}
 \cs{cht}~(height), \cs{cdp}~(depth), \cs{cHT}~(sum of former two),\\
 \cs{cwd}~(width), \cs{cvs}~(lineskip), \cs{chs}~(equals to \cs{cwd})
\end{quote}
%<en>and its \cs{normalsize} version:
%<ja>と，その \cs{normalsize} 版である
\begin{quote}
 \cs{Cht}~(height), \cs{Cdp}~(depth),
 \cs{Cwd}~(width), \\\cs{Cvs}~(equals to \cs{baselineskip}),
 \cs{Chs}~(equals to \cs{cwd})%
%<en>.
\end{quote}
%<*ja>
を定義している．なお，\cs{cwd} と \cs{zw}，また
\cs{cHT} と \cs{zh} は一致しない可能性がある．なぜなら，
\cs{cwd},~\cs{cHT} は「あ」の寸法から決定されるのに対し，
\cs{zw} と \cs{zh} はJFMに指定された値に過ぎないからである．
%</ja>
%<*en>
Note that \cs{cwd}~and~\cs{cHT} may  differ from \cs{zw}~and~\cs{zh}
respectively.
On the one hand the former dimensions are determined from the character ``あ'',
but on the other hand \cs{zw}~and~\cs{zh} are specified by JFM.
%</en>


\item[\cs{DeclareYokoKanjiEncoding}\{<encoding>\}\{<text-settings>\}\{<math-settings>\}]
%<en>\ \\[\dimexpr-\medskipamount-2\baselineskip\relax]
%<ja>\ \\[\dimexpr-2\baselineskip\relax]
\item[\cs{DeclareTateKanjiEncoding}\{<encoding>\}\{<text-settings>\}\{<math-settings>\}]

%<*en>
In NFSS2 under \LuaTeX-ja, distinction between alphabetic font families
	     and Japanese font families are only made by their
	     encodings. For example, encodings OT1 and T1 are for
	     alphabetic font families, and a Japanese font family cannot
	     have these encodings. These command define a new encoding
	     scheme for Japanese font families.
%</en>
%<*ja>
\LuaTeX-jaのNFSS2においては，欧文フォントファミリと和文フォントファミリは
そのエンコーディングによってのみ区別される．
例えば，OT1とT1のエンコーディングは欧文フォントファミリに対するものであり，
和文フォントファミリはこれらのエンコーディングを持つことはできない．
これらコマンドは横組用・縦組用和文フォントのための新しいエンコーディングを
それぞれ定義する．
%</ja>

\item[\cs{DeclareKanjiEncodingDefaults}\{<text-settings>\}\{<math-settings>\}]
%<en>\ \\[\dimexpr-\medskipamount-2\baselineskip\relax]
%<ja>\ \\[\dimexpr-2\baselineskip\relax]
\item[\cs{DeclareKanjiSubstitution}\{<encoding>\}\{<family>\}\{<series>\}\{<shape>\}]
%<en>\ \\[\dimexpr-\medskipamount-2\baselineskip\relax]
%<ja>\ \\[\dimexpr-2\baselineskip\relax]
\item[\cs{DeclareErrorKanjiFont}\{<encoding>\}\{<family>\}\{<series>\}\{<shape>\}\{<size>\}]

%<*en>
The above 3~commands are just the counterparts for \cs{DeclareFontEncodingDefaults} and~others.
%</en>
%<*ja>
上記3つのコマンドはちょうど \cs{DeclareFontEncodingDefaults} などに対応するものである．
%</ja>

\item[\cs{reDeclareMathAlphabet}\{<unified-cmd>\}\{<al-cmd>\}\{<ja-cmd>\}]

% ToDo: en
%<*ja>
和文・欧文の数式用フォントファミリを一度に変更する命令を作成する．
具体的には，欧文数式用フォントファミリ変更の命令<al-cmd>（\cs{mathrm} 等）と，和文数式用フォ
	     ントファミリ変更の命令<ja-cmd>（\cs{mathmc} 等）の2つを同時に行う命令として
	     <unified-cmd>を（再）定義する．実際の使用では<unified-cmd>と
	     <al-cmd>に同じものを指定する，すなわち，<al-cmd>で和文側も変
	     更させるようにするのが一般的と思われる．

本命令は
\begin{center}\tt
<unified-cmd>\{<arg>\}\quad$\longrightarrow$\quad
(<al-cmd>の1段展開結果)\{<ja-cmd>の1段展開結果)\{<arg>\}\}
\end{center}
と定義を行うので，使用には注意が必要である：
%<en>\vspace{-\medskipamount}
\begin{itemize}
\item <al-cmd>,~<ja-cmd>は既に定義されていなければならない．
      \cs{reDeclareMathAlphabet}\\の後に
両命令の内容を再定義しても，<unified-cmd>の内容にそれは反映されない．
\item <al-cmd>,~<ja-cmd>に\verb+\@mathrm+などと \texttt{@} をつけた命令を指定した時の動作は保証できない．
\end{itemize}
%</ja>

\item[\cs{DeclareRelationFont}\{<ja-encoding>\}\{<ja-family>\}\{<ja-series>\}\{<ja-shape>\}\\*
  \null\hfill\{<al-encoding>\}\{<al-family>\}\{<al-series>\}\{<al-shape>\}]
%<*en>
This command sets the ``accompanied'' alphabetic font family (given by the latter 4~arguments)
with respect to a Japanese font family given by the former 4~arguments.
%</en>
%<*ja>
いわゆる「従属欧文」を設定するための命令である．前半の4引数で表される和文フォントファミリに対して，
そのフォントに対応する「従属欧文」のフォントファミリを後半の4引数により与える．
%</ja>
\item[\cs{SetRelationFont}]
%<*en>
This command is almost same as \cs{DeclareRelationFont}, except that this command does a local
assignment, where \cs{DeclareRelationFont} does a global assignment.
%</en>
%<*ja>
このコマンドは \cs{DeclareRelationFont} とローカルな指定であることを除いて
ほとんど同じである（\cs{DeclareRelationFont} はグローバル）．
%</ja>

\item[\cs{userelfont}]
%<*en>
Change current alphabetic font encoding/family/\dots\ to the `accompanied' alphabetic
	     font family with respect to current Japanese font family,
	     which was set by
	     \cs{DeclareRelationFont} or \cs{SetRelationFont}.
Like \cs{fontfamily}, \cs{selectfont} is required to take an effect.
%</en>
%<*ja>
現在の欧文フォントのエンコーディング／ファミリ／…… を，
\cs{DeclareRelationFont} か \cs{SetRelationFont} で指定された
現在の和文フォントファミリに対応する「従属欧文」フォントファミリに変更する．
\cs{fontfamily} のように，有効にするためには \cs{selectfont} が必要である．
%</ja>

\item[\cs{adjustbaseline}]
%<*en>
In \pLaTeXe, \cs{adjustbaseline} sets \cs{tbaselineshift}
to match the vertical center of ``M'' and that of ``あ''  in vertical typesetting:
\[
\text{\cs{tbaselineshift}} \leftarrow
\frac{(h_{\text{M}}+d_{\text{M}}) - (h_{\text{あ}}+d_{\text{あ}})}2
  + d_{\text{あ}} - d_{\text{M}},
\]
where $h_{a}$~and~$d_{a}$ denote the height of ``$a$'' and the depth, respectively.
In \LuaTeX-ja, this \cs{adjustbaseline} does same task.
%</en>
%<*ja>
\pLaTeXe では，\cs{adjustbaseline} は縦組時に「M」と「あ」の中心線を一致させるために，
\cs{tbaselineshift} を設定する役割を持っていた：
\[
\text{\cs{tbaselineshift}} \leftarrow
\frac{(h_{\text{M}}+d_{\text{M}}) - (h_{\text{あ}}+d_{\text{あ}})}2
  + d_{\text{あ}} - d_{\text{M}},
\]
ここで，$h_{a}$,~$d_{a}$はそれぞれ「$a$」の高さ・深さを表す．
\LuaTeX-jaにおいても\cs{adjustbaseline} は同様の処理を行っている．
%</ja>

\item[\cs{fontfamily}\{<family>\}]
%<*en>
As in \LaTeXe, this command changes current font family (alphabetic, Japanese,~\emph{or both})
to <family>. Which family will be changed is determined as follows:
%</en>
%<*ja>
元々の\LaTeXe におけるものと同様に，このコマンドは現在のフォントファミリ（欧文，
和文，\emph{もしくは両方}）を<family>に変更する．
どのファミリが変更されるかは以下のようにして決定される：
%</ja>
\begin{itemize}
%<*en>
\item Let current encoding scheme for Japanese fonts be
      <ja-enc>. Current Japanese font family will be changed to
      <family>, if one of the following two conditions is met:
%</en>
%<*ja>
\item 現在の和文フォントに対するエンコーディングが<ja-enc>であるとしよう．
  現在の和文フォントファミリは，以下の2つの条件のうちの1つが満たされているときに
  <family>に変更される：
%</ja>
\begin{itemize}
%<*en>
\item The family <family> under the encoding <ja-enc> has been already defined by
      \cs{DeclareKanijFamily}.
%</en>
%<*ja>
\item エンコーディング<ja-enc>におけるファミリ<family>が
既に \cs{DeclareKanjiFamily} によって定義されている．
%</ja>
%<*en>
\item A font definition named \texttt{<ja-enc><family>.fd} (the file name is
      all lowercase) exists.
%</en>
%<*ja>
\item フォント定義ファイル\texttt{<ja-enc><family>.fd}（ファイル名は全て小文字）が存在する．
%</ja>
\end{itemize}
%<*en>
\item Let current encoding scheme for alphabetic fonts be
      <al-enc>. For alphabetic font family, the criterion as above is used.
%</en>
%<*ja>
\item 現在の欧文フォントに対するエンコーディングを<al-enc>とする．
  欧文フォントファミリに対しても，上記の基準が用いられる．
%</ja>
%<*en>
\item There is a case which none of the above applies, that is, the font
      family named <family> doesn't seem to be defined neither under the
      encoding <ja-enc>, nor under <al-enc>.
In this case, the default family for font substitution is used for
      alphabetic and Japanese fonts. Note that current encoding will not
      be set to <family>, unlike the original implementation in \LaTeX.
%</en>
%<*ja>
\item 上記のいずれもが適用されない，つまり<family>が<ja-enc>と<al-enc>の
  どちらでも定義されないような場合がある．
  この場合，代替フォントに用いられるデフォルトのフォントファミリが欧文フォントと
  和文フォントに用いられる．\LaTeX のオリジナルの実装とは異なり，
  現在のエンコーディングは<family>には設定されないことに注意する．
%</ja>
\end{itemize}%
%<en>\vspace{-\medskipamount}


\begin{figure}[!tb]
\begin{LTXexample}[pos=b]
\DeclareKanjiFamily{JY3}{edm}{}
\DeclareFontShape{JY3}{edm}{m}{n}    {<-> s*KozMinPr6N-Regular:jfm=ujis;}{}
\DeclareFontShape{JY3}{edm}{m}{green}{<-> s*KozMinPr6N-Regular:jfm=ujis;color=007F00}{}
\DeclareFontShape{JY3}{edm}{m}{blue} {<-> s*KozMinPr6N-Regular:jfm=ujis;color=0000FF}{}
\DeclareAlternateKanjiFont{JY3}{edm}{m}{n}{JY3}{edm}{m}{green}{"4E00-"67FF,{-2}-{-2}}
\DeclareAlternateKanjiFont{JY3}{edm}{m}{n}{JY3}{edm}{m}{blue}{ "6800-"9FFF}
{\kanjifamily{edm}\selectfont
日本国民は、正当に選挙された国会における代表者を通じて行動し、……}
\end{LTXexample}
%<ja>\caption{\cs{DeclareAlternateKanjiFont} の使用例}
%<en>\caption{An example of \cs{DeclareAlternateKanjiFont}}
\label{fig:altkanji}
\end{figure}

\item[\cs{DeclareAlternateKanjiFont}\{<base-encoding>\}\{<base-family>\}\{<base-series>\}\{<base-shape>\}\\
  \null\hfill\{<alt-encoding>\}\{<alt-family>\}\{<alt-series>\}\{<alt-shape>\}\{<range>\}]
%<*ja>
\ref{ssec-altfont}節の\
\cs{ltjdeclarealtfont} と同様に，前半の4引数の
和文フォント（基底フォント）のうち<range>中の文字を
第5から第8引数の和文フォントを使って組むように指示する．
使用例を図\nobreak\ref{fig:altkanji}に載せた．

\begin{itemize}
 \item
\cs{ltjdeclarealtfont} では基底フォント・置き換え先和文フォントはあらかじめ定義されてい
	     ないといけない（その代わり即時発効）であったが，
\cs{DeclareAlternateKanjiFont} の設定が
実際に効力が発揮するのは，書体変更やサイズ変更を行った時，
あるいは（これらを含むが）\cs{selectfont} が実行された時である．
 \item
段落やhboxの最後での設定値が段落／hbox全体にわたって通用する点や，
<range>に負数$-n$を指定した場合，それが「基底フォントの文字クラス$n$に属する文字全体」
と解釈されるのは \cs{ltjdeclarealtfont} と同じである．
\end{itemize}%
%</ja>
%<*en>
As \cs{ltjdeclarealtfont}~(Subsection~\ref{ssec-altfont}),
characters in <range> of the Japanese font (we say the \emph{base font})
which specified by first 4 arguments are typeset
by the Japanese font which specified by fifth to eighth arguments
(we say the \emph{alternate font}).
An example is shown in Figure~\ref{fig:altkanji}.

\begin{itemize}
 \item
In \cs{ltjdeclarealtfont}, the base font and the alternate font must be already defined.
But this \cs{DeclareAlternateKanjiFont} is not so.
In other words, \cs{DeclareAlternateKanjiFont} is effective only after
current Japanese font is changed, or only after \cs{selectfont} is executed.
 \item \dots
\end{itemize}%
\vspace{-\medskipamount}
%</en>
\end{cslist}

%<*en>
As closing this subsection, we shall introduce an example of
\cs{SetRelationFont} and \cs{userelfont}:
%</en>
%<*ja>
この節の終わりに，\cs{SetRelationFont} と \cs{userelfont} の例を
紹介しておこう．\cs{userelfont} の使用によって，「abc」の部分のフォントが
Avant Garde (OT1/pag/m/n) に変わっていることがわかる．
%</ja>
\begin{LTXexample}[width=0.3\textwidth]
\makeatletter
\SetRelationFont{JY3}{\k@family}{m}{n}{OT1}{pag}{m}{n}
  % \k@family: current Japanese font family
\userelfont\selectfont あいうabc
\end{LTXexample}

%<*en>
\section{Addons}
\LuaTeX-ja has several addon packages.
These addons are written as \LaTeX\ packages, but
\Pkg{luatexja-otf} and~\Pkg{luatexja-adjust} can be loaded in plain \LuaTeX\
by \cs{input}.
%</en>
%<*ja>
\section{拡張}
\LuaTeX-jaには（動作には必須ではないが）自由に読み込める拡張が付属している．
これらは\LaTeX のパッケージとして制作しているが，
\Pkg{luatexja-otf}と\Pkg{luatexja-adjust}についてはplain \LuaTeX でも\
\cs{input} で読み込み可能である．
%</ja>
\subsection{\texttt{luatexja-fontspec.sty}}
\label{ssec-fontspec2}
%<*en>
As described in Subsection~\ref{ssec-fontspec}, this optional package
provides the counterparts for several commands defined in the
\Pkg{fontspec} package．
In addition to OpenType font features in the original \Pkg{fontspec},
the following ``font features'' specifications are allowed for
the commands of Japanese version:
%</en>
%<*ja>
\ref{ssec-fontspec}節で述べたように，この追加パッケージは\Pkg{fontspec}
パッケージで定義されているコマンドに対応する和文フォント用のコマンドを提供する．
\Pkg{fontspec}パッケージで指定可能な各種font featureに加えて，和文版のコマンドには
以下の``font feature''を指定することができる：
%</ja>


\begin{cslist}
\item[CID=<name>\textrm{, }JFM=<name>\textrm{, }JFM-var=<name>]

%<*en>
These 3 keys correspond to \texttt{cid}, \texttt{jfm} and
\texttt{jfmvar} keys for \cs{jfont}~and~\cs{tfont} respectively.
See Subsections~\ref{ssec-jfont} and \ref{ssec-psft} for details
 of \texttt{cid}, \texttt{jfm} and
\texttt{jfmvar} keys.

The \texttt{CID} key is effective only when with \texttt{NoEmbed}
described below. The same JFM cannot be used in both horizontal Japanese fonts and
	     vertical Japanese fonts, hence the \texttt{JFM} key 
will be actually used in \texttt{YokoFeatures}~and~\texttt{TateFeatures} keys.
%</en>
%<*ja>
これら3つのキーはそれぞれ \cs{jfont},~\cs{tfont}に対する
\texttt{cid}, \texttt{jfm}, \texttt{jfmvar}キーとそれぞれ対応する．
\texttt{cid}, \texttt{jfm}, \texttt{jfmvar}キーの詳細は\ref{ssec-jfont}節
	     と\ref{ssec-psft}節を参照．

\texttt{CID} キーは下の \texttt{NoEmbed} と合わせて用いられたときのみ有効である．
また，横組用JFMと縦組用JFMは共用できないため，実際に \texttt{JFM} キーを用いる際は
後に述べる\ \texttt{YokoFeatures},~\texttt{TateFeatures}\ の中で用いる
ことになる．
%</ja>

\item[NoEmbed]
%<*en>
By specifying this key, one can use ``name-only'' Japanese font which
will not be embedded in the output PDF file. See Subsection~\ref{ssec-psft}.
%</en>
%<*ja>
これを指定することで，PDFに埋め込まれない「名前だけ」のフォントを指定することが
できる．\ref{ssec-psft}節を参照．
%</ja>

\begin{figure}[!tb]
\begin{LTXexample}
\jfontspec[
  YokoFeatures={Color=007F00},
  TateFeatures={Color=00007F},
  TateFont=KozGoPr6N-Regular
]{KozMinPr6N-Regular}
\parbox<y>{2\zw}[b]{横組のテスト}
\parbox<t>{2\zw}[b]{縦組のテスト}
\end{LTXexample}
%<ja>\caption{\texttt{TateFeatures} 等の使用例}
%<en>\caption{An example of \texttt{TateFeatures} etc.}
\label{fig:yokotate-fontspec}
\end{figure}

\item[TateFeatures=\{<features>\}\textrm{, }TateFont=<font>]
%<en> ...
%<*ja>
%</ja>

\item[YokoFeatures=\{<features>\}]
%<en> ...
%<*ja>
%</ja>


\begin{figure}[!tb]
\begin{LTXexample}[pos=b]
\jfontspec[
  AltFont={
    {Range="4E00-"67FF, Color=007F00},
    {Range="6800-"9EFF, Color=0000FF},
    {Range="3040-"306F, Font=KozGoPr6N-Regular},
  }
]{KozMinPr6N-Regular}
日本国民は、正当に選挙された国会における代表者を通じて行動し、われらとわれらの子孫のために、
諸国民との協和による成果と、わが国全土にわたつて自由のもたらす恵沢を確保し、……
\end{LTXexample}
%<ja>\caption{\texttt{AltFont} の使用例}
%<en>\caption{An example of \texttt{AltFont}}
\label{fig:altkanji-fontspec}
\end{figure}

\item[AltFont]

%<*en>
As \cs{ltjdeclarealtfont}~(Subsection~\ref{ssec-altfont}) and
\cs{DeclareAlternateKanjiFont}~(Subsection~\ref{ssec-nfsspat}),
with this key, one can typeset some Japanese characters
by a different font and/or using different features.
The \texttt{AltFont} feature takes a comma-separated list of comma-separated lists,
as the following:
%</en>
%<*ja>
\ref{ssec-altfont}節の \cs{ltjdeclarealtfont} や，
\ref{ssec-nfsspat}節の \cs{DeclareAlternateKanjiFont} と同様に，
このキーを用いると一部の文字を異なったフォントやfont featureを使って組むことができる．
\texttt{AltFont} キーに指定する値は，次のように二重のコンマ区切りリストである：
%</ja>
\begin{lstlisting}[escapechar=\#]
AltFont = {
  ...
  { Range=#\LARG range>#, #\LARG features>#},
  { Range=#\LARG range>#, Font=#\LARG font~name>#, #\LARG features># },
  { Range=#\LARG range>#, Font=#\LARG font~name># },
  ...
}
\end{lstlisting}
%<*en>
Each sublist should have the \texttt{Range} key
(sublist which does not contain \texttt{Range} key is simply ignored).
A demonstrarion is shown in Figure~\ref{fig:altkanji-fontspec}.
%</en>
%<*ja>
各部分リストには \texttt{Range} キーが必須である（含まれない部分リストは
単純に無視される）．指定例は図\ref{fig:altkanji-fontspec}に示した．
%</ja>
\end{cslist}

%<*ja>
なお，\Pkg{luatexja-fontspec} 読み込み時には和文フォント定義ファイル%
\texttt{<ja-enc><family>.fd}は全く参照されなくなる．
%</ja>


%<*en>
\paragraph{Remark on \texttt{AltFont}, \texttt{YokoFeatures}, \texttt{TateFeatures} keys}
In \texttt{AltFont},~\texttt{YokoFeatures},~\texttt{TateFeatures} keys,
one cannot specify per-shape settings such as \texttt{BoldFeatures}.
For example, 
\begin{lstlisting}
AltFont = {
  { Font=HogeraMin-Light, BoldFont=HogeraMin-Bold, 
    Range="3000-"30FF, BoldFeatures={Color=007F00} }
}
\end{lstlisting}
does \emph{not} work. Instead, one have to write
\begin{lstlisting}
UprightFeatures = {
  AltFont = { { Font=HogeraMin-Light, Range="3000-"30FF, } },
},
BoldFeatures = {
  AltFont =  { { Font=HogeraMin-Bold, Range="3000-"30FF, Color=007F00 } },
}
\end{lstlisting}

On the other hand, \texttt{YokoFeatures}, \texttt{TateFeatures} and  \texttt{TateFont}
keys can be specified in each list in the \texttt{AltFont} key. Also, 
one can specify \texttt{AltFont} inside \texttt{YokoFeatures},~\texttt{TateFeatures}.
%</en>
%<*ja>
\paragraph{\texttt{AltFont}, \texttt{YokoFeatures}, \texttt{TateFeatures} 等の制限}
\texttt{AltFont},~\texttt{YokoFeatures},~\texttt{TateFeatures}の各キーは
シェイプ別に指定されるべきものであり，
内部では \texttt{BoldFeatures} などのシェイプ別の指定は行うことが出来ない．
例えば．
\begin{lstlisting}
AltFont = {
  { Font=HogeraMin-Light, BoldFont=HogeraMin-Bold, 
    Range="3000-"30FF, BoldFeatures={Color=007F00} }
}
\end{lstlisting}
のように指定することは出来ず，
\begin{lstlisting}
UprightFeatures = {
  AltFont = { { Font=HogeraMin-Light, Range="3000-"30FF, } },
},
BoldFeatures = {
  AltFont =  { { Font=HogeraMin-Bold, Range="3000-"30FF, Color=007F00 } },
}
\end{lstlisting}
のように指定しなければならない．

一方，\texttt{AltFont} キー内の各リストでは
\ \texttt{YokoFeatures},~\texttt{TateFeatures} 及び \texttt{TateFont} キーを
指定することは可能であり．また\ \texttt{YokoFeatures},~\texttt{TateFeatures} キーの
中身に \texttt{AltFont} を指定することができる．
%</ja>


\subsection{\texttt{luatexja-otf.sty}}
\label{ssec-ltjotf}
%<*en>
This optional package supports typesetting characters in
Adobe-Japan1 character collection
(or other CID character collection, if the font is supported).
The package \Pkg{luatexja-otf} offers the following 2~low-level
commands:
%</en>
%<*ja>
この追加パッケージはAdobe-Japan1（フォント自身が持っていれば，
別のCID文字セットでも可）の文字の出力をサポートする．
\Pkg{luatexja-otf}は以下の2つの低レベルコマンドを提供する：
%</ja>
\begin{cslist}
\item[\cs{CID}\{<number>\}]
%<*en>
Typeset a character whose CID number is <number>.
%</en>
%<*ja>
CID番号が<number>の文字を出力する．
%</ja>

\item[\cs{UTF}\{<hex\_number>\}]
%<*en>
Typeset a character whose character code is <hex\_number> (in hexadecimal).
This command is similar to \verb+\char"+<hex\_number>,\ %"
but please remind remarks below.
%</en>
%<*ja>
文字コードが（16進で）<hex\_number>の文字を出力する．
このコマンドは \verb+\char"+<hex\_number>と似ているが，下の記述に注意すること．%"
%</ja>
\end{cslist}

%<*ja>
このパッケージは，\texttt{ajmacros.sty}（\Pkg{otf}パッケージ付属のマクロ集，井上浩一氏作）から
漢字コードをUTF8にしたり，plain \LuaTeX でも利用可能するという
修正を加えた \texttt{luatexja-ajmacros.sty} も自動的に読み込む．
そのため，マクロ集にある \verb+\aj半角+ などのマクロもそのまま使用可能である．
%</ja>

%<en>\paragraph{Remarks}
%<ja>\paragraph{注意}
%<*en>
Characters by \cs{CID} and \cs{UTF} commands are different from
ordinary characters in the following points:
%</en>
%<*ja>
\cs{CID} と \cs{UTF} コマンドによって出力される文字は
以下の点で通常の文字と異なる：
%</ja>
\begin{itemize}
%<*en>
\item Always treated as \textbf{JAchar}s.
%</en>
%<*ja>
\item 常に\textbf{JAchar}として扱われる．
%</ja>
%<*en>
\item Processing codes for supporting OpenType features (\textit{e.g.},
      glyph replacement and kerning) by the \Pkg{luaotfload} package
      is not performed to these characters.
%</en>
%<*ja>
\item OpenType feature（例えばグリフ置換やカーニング）をサポートするための
  \Pkg{luaotfload}パッケージのコードはこれらの文字には働かない．
%</ja>
\end{itemize}

%<en>\paragraph{Additional syntax of JFM}
%<ja>\paragraph{JFMへの記法の追加}

%<*en>
The package \Pkg{luatexja-otf} extends the syntax of JFM; the entries of \texttt{
chars} table in JFM now allows a string in the form
\verb+'AJ1-xxx'+, which stands for the character
whose CID number in Adobe-Japan1 is \verb+xxx+.

This extended notation is used in the standard JFM \texttt{jfm-ujis.lua}
to typeset halfwidth Hiragana glyphs (CID~516--598) in halfwidth.
%</en>
%<*ja>
\Pkg{luatexja-otf}パッケージを読み込むと，
JFMの\texttt{chars}テーブルのエントリとして \verb+'AJ1-xxx'+ の形の文字列が
使えるようになる．これはAdobe-Japan1におけるCID番号が \verb+xxx+ の文字を表す．

この拡張記法は，標準JFM~\texttt{jfm-ujis.lua}で，半角ひらがなのグリフ（CID~516--598）を
正しく半角幅で組むために利用されている．
%</ja>

%<*en>
\paragraph{IVS support}
Recent fonts support Ideographic Variation Selector (IVS).
It seems that \Pkg{luaotfload} and \Pkg{fontspec} packages do not support
IVS, so we implemented IVS support in \Pkg{luatexja-otf}.
\emph{IVS support is experimental; if you want to enable this, load
\Pkg{luatexja-otf} and execute the following:}
%</en>
%<*ja>
\paragraph{IVSサポート}
最近のOpenTypeフォントやTrueTypeフォントには，
\texttt{U+E0100}--\texttt{U+E01EF}の範囲の「文字」
（漢字用異体字セレクタ）を後置することによって
字形を指定する仕組み(IVS)が含まれている．
執筆時点の2013年12月では，\Pkg{luaotfload}や\Pkg{fontspec}パッケージ類は
IVSに対応してはいないようである．これらのパッケージで対応してくれるのが理想的だが，
それまでのつなぎとして，\Pkg{luatexja-otf}パッケージ内にIVS対応を仕込んでおいた．

\medskip

\emph{IVS対応は試験的なものである．
有効にするには，\Pkg{luatexja-otf}パッケージを読み込んだ上で以下の命令を実行する%
\footnote{この命令を2回以上実行しても意味がない．}：}
%</ja>
\begin{verbatim}
\directlua{luatexja.otf.enable_ivs()}
\end{verbatim}
%<ja> すると，上の命令を実行した箇所以降では，以下のようにIVSによる字形指定が有効となる．
%<en> After executing the command above, you can use IVS like the following:
\begin{LTXexample}
\Large
\jfontspec{KozMinPr6N-Regular}
奈良県葛󠄀城市と，東京都葛󠄁飾区．\\
こんにちは，渡
邉󠄀邉󠄁邉󠄂邉󠄃邉󠄄
邉󠄅邉󠄆邉󠄇邉󠄈邉󠄉
邉󠄊邉󠄋邉󠄌邉󠄍邉󠄎
さん．
\end{LTXexample}
%<*ja>
左上側の入力においては，漢字用異体字セレクタを明示するため，
例えばVariation~Selector~18 (\texttt{U+E0101})を\IVSB{18}のように表記している．
%</ja>
\medskip

%<*en>
Specifying glyph variants by IVS precedes glyph replacement by font features.
For example, only ``葛'' in ``葛西'' is changed by font features
\texttt{jp78}~or~\texttt{jp90}, which does not followed by any variation selector.
%</en>
%<*ja>
また，IVSによる字形指定は，font featureによるそれに優先されることとした．
下の例において，\texttt{jp78}, \texttt{jp90} 指定で字形が変化した文字は
異体字セレクタが続いていない「葛西」中の「葛」のみである．
%</ja>
\begin{LTXexample}
 \def\TEST#1{%
   {\jfontspec[#1]{KozMinPr6N-Regular}%
   葛󠄀城市，葛󠄁飾区，葛西}\\}
 指定なし：\TEST{}
 \texttt{jp78}：\TEST{CJKShape=JIS1978}
 \texttt{jp90}：\TEST{CJKShape=JIS1990}
\end{LTXexample}

%<*ja>
現状では，\TeX 側のインターフェースとなる \Pkg{luatexja-otf.sty} は一切変更していない
ので，ZRさんによる\Pkg{PXipamjm}パッケージ%
\footnote{\url{https://github.com/zr-tex8r/PXipamjm}. 説明は彼のブログ記事
「pxipamjm パッケージの説明書のような何か(\url{http://d.hatena.ne.jp/zrbabbler/20131221})」
にある．}
にあるような気の利いた命令はまだない．
異体字の一覧表示を行いたい場合は，gitリポジトリ内の \texttt{test/test19-ivs.tex} 中にある
Lua・\TeX コードが参考になるだろう．
%</ja>


\subsection{\texttt{luatexja-adjust.sty}}
\label{ssec-adj}
\begin{figure}[t]
\def\sq{%
  \hbox to 1\zw{\hss\fboxsep=-.5\fboxrule\fbox{%
  　\hskip\dimexpr-.5\zw-.2pt\vrule width.4pt height.08\zw depth.12\zw%
  \hskip\dimexpr.5\zw-.2pt\relax}\hss}}
\def\sb{\hbox to 1\zw{\hss\fboxsep=-.5\fboxrule\fbox{%
  ■\hskip\dimexpr-.5\zw-.2pt\vrule width.4pt height.08\zw depth.12\zw%
  \hskip\dimexpr.5\zw-.2pt\relax}\hss}}
\newbox\gridbox
\def\outbox#1{{\Large%
  \ltjsetparameter{kanjiskip=0pt plus .2\zw minus .2\zw}%
  \setbox\gridbox=\hbox to 20\zw{\sq\sq\sq\sq\sb\sq\sq\sq\sq\sb\sq\sq\sq\sq\sb\sq\sq\sq\sq\sb}%
  \hbox{\textcolor{cyan!50!white}{\copy\gridbox}\hskip-20\zw%
  \vbox{\hsize=20\zw\noindent\leftskip0pt\rightskip0pt\parfillskip0pt#1}\vrule}%
}}

{\centering
\begin{tabular}{lc}
\toprule
no adjustment&\outbox{以上の原理は，「包除原理」とよく呼ばれるが\hskip-.5\zw\null}\\
without priority&%
\ltjdisableadjust
\outbox{以上の原理は，「包除原理」とよく呼ばれるが}%
\ltjenableadjust\\
with priority&%
\outbox{以上の原理は，「包除原理」とよく呼ばれるが}
%<en>\ltjdisableadjust
\\
\bottomrule
\end{tabular}\par}
\smallskip

Note: the value of
\Param{kanjiskip} is 0\,pt${}^{+1/5\,\mathrm{em}}_{-1/5\,\mathrm{em}}$ in this figure,
for making the difference obvious.
%<ja>\caption{行長調整}\label{fig-adj}
%<en>\caption{Line adjustment}\label{fig-adj}
\end{figure}


%<*en>
(see Japanese version of this manual)
%</en>
%<*ja>
\pTeX では，行長調整において優先度の概念が存在しなかったため，図
\ref{fig-adj}上段における半角分の半端は，図\ref{fig-adj}中段のように，鍵
括弧周辺の空白と和文間空白(\Param{kanjiskip})の両方によって負担される．し
かし，「日本語組版処理の要件」\cite{jlreq}やJIS~X~4051~\cite{x4051}におい
ては，このような状況では半端は鍵括弧周辺の空白のみで負担し，その他の和文
文字はベタ組で組まれる（図\ref{fig-adj}下段）ことになっている．この追加
パッケージは\cite{jlreq}や\cite{x4051}における規定のような，優先順位付き
の行長調整を提供する．詳細な仕様については\ref{sec-adjspec}章を参照してほしい．
\begin{itemize}
 \item 優先度付き行長調整は，段落を行分割した後に個々の行について行われるものである．
そのため，行分割の位置は変化することはない．

また，\verb+\hbox to ... {...}+ のような「幅が指定されたhbox」では無効である．
 \item 優先度付き行長調整を行うと，和文処理グルーの自然長は変化しないが，伸び量や縮み量は
一般に変化する．そのため，既に組まれた段落を \cs{unhbox} などを利用して組み直す処理を
行う場合には注意が必要である．
\end{itemize}


\Pkg{luatexja-adjust} は，以下の命令を提供する．これらはすべてグローバルに効力を発揮する．

\begin{cslist}
\item[\cs{ltjdisableadjust}]
優先順位付きの行長調整を無効化する．

\item[\cs{ltjenableadjust}]
優先順位付きの行長調整を有効化する．

\item[\textsf{adjust}\,=<bool>] \cs{ltjsetparameter} で指定可能な追加パラメータであり，
<bool>が\textit{true}なら \cs{ltjenableadjust} を，
そうでなければ \cs{ltjdisableadjust} を実行する．
\end{cslist}
%</ja>

\subsection{\texttt{luatexja-ruby.sty}}
%<*en>
This addon package provides functionality of ``ruby'' (\emph{furigana}) annotations
using callbacks of \LuaTeX-ja.
There is no detailed manual of \Pkg{luatexja-ruby.sty} in English.
(Japanese manual is another PDF file, \url{luatexja-ruby.pdf}.)
%</en>
%<*ja>
この追加パッケージは，\LuaTeX-jaの機能を利用したルビ（振り仮名）の組版機能を提供する．
前後の文字種に応じた前後への自動進入や，
行頭形・行中形・行末形の自動的な使い分けが特徴である．

ルビ組版に設定可能な項目や注意事項が多いため，本追加パッケージの詳細な説明は
使用例と共に \url{luatexja-ruby.pdf}\ という別ファイルに載せている．
この節では簡単な使用方法のみ述べる．
%</ja>

\begin{description}
%<*en>
 \item[Group-ruby]
By default, ruby characters (the second argument of \cs{ruby})
are attached to base characters (the first argument), as one object.
This type of ruby is called \emph{group-ruby}.
%</en>
%<*ja>
 \item[グループルビ] 標準ではグループルビの形で組まれる．第1引数に親文字，
第2引数にルビを記述する．
%</ja>
\begin{LTXexample}[width=0.3\textwidth]
東西線\ruby{妙典}{みようでん}駅は……\\
東西線の\ruby{妙典}{みようでん}駅は……\\
東西線の\ruby{妙典}{みようでん}という駅……\\
東西線\ruby{葛西}{かさい}駅は……
\end{LTXexample}
%<*en>
As the above example, ruby hangover is allowed on the Hiragana before/after
its base characters.
%</en>
%<ja> この例のように，標準では前後の平仮名にルビ全角までかかるようになっている．

%<*en>
\item[Mono-ruby]
To attach ruby characters to each base characters (\emph{mono-ruby}),
one should use \cs{ruby} multiple times:
%</en>
%<*ja>
 \item[モノルビ] 親文字を1文字にするとモノルビとなる．
2文字以上の熟語をモノルビの形で組みたい場合は，面倒でも
その数だけ \cs{ruby} を書く必要がある．
%</ja>
\begin{LTXexample}[width=0.3\textwidth]
東西線の\ruby{妙}{みよう}\ruby{典}{でん}駅は……
\end{LTXexample}

%<*en>
 \item[Jukugo-ruby]
Vertical bar~\verb+|+ denotes a boundary of \emph{groups}.
%</en>
%<*ja>
 \item[熟語ルビ] 引数内の縦棒 \verb+|+ はグループの区切りを表し，
複数グループのルビは熟語ルビとして組まれる．
\cite{x4051}にあるように，
どのグループでも「親文字」が対応するルビ以上の長さの場合は
各グループごとに，そうでないときは全体をまとめて1つのグループルビとして組まれる．
\cite{jlreq}で規定されている組み方とは異なるので注意．
%</ja>
\begin{LTXexample}
\ruby{妙|典}{みよう|でん}\
\ruby{葛|西}{か|さい}\
\ruby{神楽|坂}{かぐら|ざか}
\end{LTXexample}
%<*en>
If there are multiple groups in one \cs{ruby} call,
A linebreak between two groups is allowed.
%</en>
%<ja> 複数ルビではグループとグループの間で改行が可能である．
\begin{LTXexample}[width=0.3\textwidth]
\vbox{\hsize=6\zw\noindent
  \hbox to 2.5\zw{}\ruby{京|急|蒲|田}{けい|きゆう|かま|た}
  \hbox to 2.5\zw{}\ruby{京|急|蒲|田}{けい|きゆう|かま|た}
  \hbox to   3\zw{}\ruby{京|急|蒲|田}{けい|きゆう|かま|た}
}
\end{LTXexample}
\end{description}

%<*en>
If the width of ruby characters are longer than that of base characters,
\cs{ruby} automatically selects the appropriate form
among the line-head form, the line-middle form, and the line-end form.
%</en>
%<*ja>
また，ルビ文字のほうが親文字よりも長い場合は，自動的に
行頭形・行中形・行末形のいずれか適切なものを選択する．
%</ja>
\begin{LTXexample}[width=0.3\textwidth]
\vbox{\hsize=8\zw\noindent
\null\kern3\zw ……を\ruby{承}{うけたまわ}る
     \kern1\zw ……を\ruby{承}{うけたまわ}る\\
\null\kern5\zw ……を\ruby{承}{うけたまわ}る
}
\end{LTXexample}


%<*ja>
\subsection{\texttt{lltjext.sty}}
\pLaTeX では縦組用の拡張として \Pkg{plext} パッケージが用意されていたが，
それを\LuaTeX-ja用に書きなおしたものが本追加パッケージ \Pkg{lltjext} である．

従来の \Pkg{plext} パッケージとの違いは，
{\catcode`\<=12
\begin{itemize}
 \item 組方向オプション \texttt{<y>}（横組），\texttt{<t>}（縦組），
\texttt{<z>}\ の他に\ \texttt{<d>}（dtou方向），\texttt{<u>}（utod方向）を追加した．
\texttt{<z>} と \texttt{<u>} の違いは，\texttt{<z>} が周囲の組方向が縦組のときにしか意味を持たない
       のに対し，\texttt{<u>} にはそのような制限がないことである．

 \item \Pkg{plext} パッケージでは，表組（\texttt{tabular} 環境，\texttt{align} 環境等）や
\texttt{minipage} 環境，\cs{parbox} 命令において，
垂直位置指定 \texttt{[t]},~\texttt{[b]} の挙動が非読み込み時と微妙に変わることがあった．

\Pkg{lltjext} パッケージでは，垂直位置指定が\LaTeXe と同様の挙動（以下に示す）に
なるように修正した．
\begin{itemize}
 \item \texttt{[t]} オプション指定時は，ボックスのベースラインが中身の1行目のベースライン
       （1行目の上に罫線などが来た時は，ボックスの上端）に一致するように配置する．
 \item \texttt{[b]} オプション指定時は，ボックスのベースラインが中身の最終行のベースライン
       （中身の最後が罫線などの時は，ボックスの下端）に一致するように配置する．
 \item それ以外のときは，ボックスの中央が「数式の軸」に一致するように配置する．
\end{itemize}
特に縦組の場合，「数式の軸」は……

 \item 連数字用命令 \cs{rensuji} における位置合わせオプション……
\end{itemize}
}
%</ja>
%<*en>
\subsection{\texttt{lltjext.sty}}
\pLaTeX\ supplies additional macros for vertical writing in the \Pkg{plext} package.
The \Pkg{lltjext} package which we want to describe here is the \LuaTeX-ja
counterpart of the \Pkg{plext} package.
%</en>

%<*ja>
念の為，本 \Pkg{lltjext} パッケージで追加・変更している命令の一覧を載せておく．
\begin{cslist}
\item[tabular\textrm{, }array\textrm{, }minipage環境]
これらの環境は，
\begin{verbatim}
\begin{tabular}<dir>[pos]{table spec} ... \end{tabular}
\begin{array}<dir>[pos]{table spec}   ... \end{array}
\begin{minipage}<dir>[pos]{width}     ... \end{minipage}
\end{verbatim}
のように，組方向オプション \texttt{\<dir\>} が拡張されている．
既に述べたように，組方向オプションに指定できる値は以下の5つであり，
それ以外を指定した時や無指定時は周囲の組方向と同じ組方向になる．
\begin{description}
 \item[y] 横組(\cs{yoko})
 \item[t] 縦組(\cs{tate})
 \item[z] 周囲が縦組の時はutod方向，それ以外はそのまま
 \item[d] dtou方向
 \item[u] utod方向
\end{description}
\item[\cs{parbox}\<<dir>\>{[<pos>]}\{<width>\}\{<contents>\}]
\cs{parbox} 命令も同様に，組方向の指定ができるように拡張されている．

\item[\cs{pbox}\<<dir>\>{[<width>][<pos>]}\{<contents>\}]
組方向<dir>で<contents>の中身をLRモードで組む命令である．
<width>が正の値であるときは，ボックス全体の幅がその値となる．
その際，中身は<pos>の値に従い，左寄せ(\texttt{l})，右揃え(\texttt{r})，
中央揃え（それ以外）される．
\item[picture環境]
図表作成に用いる \texttt{picture} 環境も，
\begin{verbatim}
\begin{picture}<dir>(x_size, y_size)(x_offset,y_offset)
  ...
\end{picture}
\end{verbatim}
と組方向が指定できるように拡張されている．
$x$成分の増加方向は字送り方向，$y$成分の増加方向は行送り方向の\emph{反対方向}となる．
\Pkg{plext} パッケージと同様に
内部ではベースライン補正（\Param{yalbaselineshift}パラメータなど）の影響を受けないように，
\cs{put},~\cs{line}, \cs{vector}, \cs{dashbox}, \cs{oval},~\cs{circle}も
ベースライン補正を受けないように再定義されている．

\item[\cs{rensuji}{[<pos>]}\{<contents>\}\textrm{, }\cs{rensujiskip}]

\item[\cs{Kanji}\{<counter\_name>\}]

\item[\cs{kasen}\{<contents>\}\textrm{, }\cs{bou}\{<contents>\}\textrm{,
		     }\cs{boutenchar}]

\item[参照番号]
\end{cslist}
%</ja>
%<*en>
\begin{cslist}
\item[tabular\textrm{, }array\textrm{, }minipage\textrm{ environments}]
These environments are extended by \texttt{\<dir\>}, which specifies the direction,
as follows:
\begin{verbatim}
\begin{tabular}<dir>[pos]{table spec} ... \end{tabular}
\begin{array}<dir>[pos]{table spec}   ... \end{array}
\begin{minipage}<dir>[pos]{width}     ... \end{minipage}
\end{verbatim}
This option permits one of the following five values. If none of them is specified,
the direction inside the environment is same as that outside the enviromnent.
\begin{description}
 \item[y] \emph{yoko} direction (horizontal writing)
 \item[t] \emph{tate} direction (vertical writing)
 \item[z] \emph{utod} direction if direction outside the env.\ is \emph{tate}.
 \item[d] \emph{dtou} direction
 \item[u] \emph{utod} direction
\end{description}
\item[\cs{parbox}\<<dir>\>{[<pos>]}\{<width>\}\{<contents>\}]
\cs{parbox} command is also extended by \texttt{\<dir\>}.

\item[\cs{pbox}\<<dir>\>{[<width>][<pos>]}\{<contents>\}]
This commands typeset <contents> in LR-mode, in <dir> direction.
If <width> is positive, the width of the box becomes this <width>.
In this case, <contents> will be aligned \dots

\item[picture\textrm{environment}]

\item[\cs{rensuji}{[<pos>]}\{<contents>\}\textrm{, }\cs{rensujiskip}]

\item[\cs{Kanji}\{<counter\_name>\}]

\item[\cs{kasen}\{<contents>\}\textrm{, }\cs{bou}\{<contents>\}\textrm{,
		     }\cs{boutenchar}]

\item[参照番号]
\end{cslist}
%</en>



%<en>\part{Implementations}
%<ja>\part{実装}
\label{part-imp}
%<en>\section{Storing Parameters}
%<ja>\section{パラメータの保持}
\label{sec-para}
%<en>\subsection{Used Dimensions, Attributes and Whatsit Nodes}
%<ja>\subsection{\LuaTeX-jaで用いられるレジスタとwhatsitノード}

%<*en>
Here the following is the list of dimensions and attributes which are used in \LuaTeX-ja.
%</en>
%<*ja>
以下は\LuaTeX-jaで用いられる寸法レジスタ(dimension)，属性レジスタ(attribute)の
リストである．
%</ja>
\begin{list}{}{%
\def\makelabel{\ttfamily}\advance\leftmargin1\zw
\def\dim#1{\item[\textbackslash #1\ \textrm{(dimension)}]}
\def\cnt#1{\item[\textbackslash #1\ \textrm{(counter)}]}
\def\attr#1{\item[\textbackslash #1\ \textrm{(attribute)}]}
}

\dim{jQ}
%<*en>
\cs{jQ} is equal to
			$1\,\textrm{Q}=0.25\,\textrm{mm}$, where ``Q''~(also called ``級'') is
			a unit used in Japanese phototypesetting.
So one should not change the value of this dimension.
%</en>
%<*ja>
\cs{jQ} は写植で用いられた$1\,\textrm{Q}=0.25\,\textrm{mm}$%
（「級」とも書かれる）に等しい．したがって，
この寸法レジスタの値を変更してはならない．
%</ja>

\dim{jH}
%<*en>
There is also a unit called ``歯'' which equals to $0.25\,\textrm{mm}$ and
                         used in Japanese phototypesetting.
This \cs{jH} is the same \cs{dimen} register as \cs{jQ}.
%</en>
%<*ja>
同じく写植で用いられていた単位として「歯」があり，これも$0.25\,\textrm{mm}$と
等しい．この \cs{jH} は \cs{jQ} と同じ寸法レジスタを指す．
%</ja>

\dim{ltj@zw}
%<*en>
A temporal register for the ``full-width'' of current Japanese font.
The command \cs{zw} sets this register to the correct value, and
``return'' this register itself.
%</en>
%<*ja>
現在の和文フォントの「全角幅」を保持する一時レジスタ．
\cs{zw} 命令は，このレジスタを適切な値に設定した後，
「このレジスタ自体を返す」．
%</ja>

\dim{ltj@zh}
%<*en>
A temporal register for the ``full-height'' (usually the sum of height of imaginary body and its depth) of current Japanese font.
The command \cs{zh} sets this register to the correct value, and
``return'' this register itself.
%</en>
%<*ja>
現在の和文フォントの「全角高さ」（通常，高さと深さの和）を保持する一時レジスタ．
\cs{zh} 命令は，このレジスタを適切な値に設定した後，
「このレジスタ自体を返す」．
%</ja>

\attr{jfam}
%<*en>
Current number of Japanese font family for math formulas.
%</en>
%<*ja>
数式用の和文フォントファミリの現在の番号．
%</ja>

\attr{ltj@curjfnt}
%<*en>
The font index of current Japanese font for horizontal direction.
%</en>
%<*ja>
現在の横組用和文フォントのフォント番号．
%</ja>

\attr{ltj@curtfnt}
%<*en>
The font index of current Japanese font for vertical direction.
%</en>
%<*ja>
現在の縦組用和文フォントのフォント番号．
%</ja>

\attr{ltj@charclass}
%<*en>
The character class of Japanese \textit{glyph\_node}.
%</en>
%<*ja>
和文文字の\textit{glyph\_node}の文字クラス．
%</ja>

\attr{ltj@yablshift}
%<*en>
The amount of shifting the baseline of alphabetic fonts in scaled point ($2^{-16}\,\textrm{pt}$).
%</en>
%<*ja>
スケールド・ポイント($2^{-16}\,\textrm{pt}$)を単位とした欧文フォントのベースラインの移動量．
%</ja>

\attr{ltj@ykblshift}
%<*en>
The amount of shifting the baseline of Japanese fonts in scaled point ($2^{-16}\,\textrm{pt}$).
%</en>
%<*ja>
スケールド・ポイント($2^{-16}\,\textrm{pt}$)を単位とした和文フォントのベースラインの移動量．
%</ja>

\attr{ltj@tablshift}
\attr{ltj@tkblshift}

\attr{ltj@autospc}
%<*en>
Whether the auto insertion of \Param{kanjiskip} is allowed at the node.
%</en>
%<*ja>
そのノードで\Param{kanjiskip}の自動挿入が許されるかどうか．
%</ja>

\attr{ltj@autoxspc}
%<*en>
Whether the auto insertion of \Param{xkanjiskip} is allowed at the node.
%</en>
%<*ja>
そのノードで\Param{xkanjiskip}の自動挿入が許されるかどうか．
%</ja>

\attr{ltj@icflag}
%<*en>
An attribute for distinguishing ``kinds'' of a node. One of the following value is
assigned to this attribute:
%</en>
%<*ja>
ノードの「種類」を区別するための属性．以下のうちのひとつが値として割り当てられる：
%</ja>
\begin{description}
\item[\textit{italic} (1)]
%<*en>
Kerns from italic correction (\verb+\/+), or from kerning information of a Japanese font.
These kerns are ``ignored'' in the insertion process of \textbf{JAglue},
unlike explicit \cs{kern}.
%</en>
%<*ja>
イタリック補正(\verb+\/+)によるカーン，
または \Pkg{luaotfload} によって挿入されたフォントのカーニング情報由来のカーン．
これらのカーンは通常の \cs{kern} とは異なり，
\textbf{JAglue}の挿入処理においては透過する．
%</ja>

\item[\textit{packed} (2)]

\item[\textit{kinsoku} (3)]
%<*en>
Penalties inserted for the word-wrapping process (\emph{kinsoku shori}) of Japanese characters.
%</en>
%<ja>禁則処理のために挿入されたペナルティ．
\item[\mathversion{bold}$(\textit{from\_jfm}-2)$--$(\textit{from\_jfm}+2)$~(4--8)]
%<en>Glues/kerns from JFM.
%<ja>JFM由来のグルー／カーン．
\item[\textit{kanji\_skip}~(9), \textit{kanji\_skip\_jfm}~(10)]
%<en>Glues from \Param{kanjiskip}.
%<ja>和文間空白\Param{kanjiskip}を表すグルー．
\item[\textit{xkanji\_skip}~(11), \textit{xkanji\_skip\_jfm}~(12)]
%<en>Glues from \Param{xkanjiskip}.
%<ja>和欧文間空白\Param{xkanjiskip}を表すグルー．
\item[\textit{processed} (13)]
%<en>Nodes which is already processed by \ldots.
%<ja>\LuaTeX-ja の内部処理によって既に処理されたノード．
\item[\textit{ic\_processed} (14)]
%<*en>
Glues from an italic correction, but already processed in the insertion process of \textbf{JAglue}s.
%</en>
%<ja>イタリック補正に由来するグルーであって，既に \textbf{JAglue} 挿入処理にかかったもの．
\item[\textit{boxbdd} (15)]
%<en>Glues/kerns that inserted just the beginning or the ending of an hbox or a paragraph.
%<ja>hboxか段落の最初か最後に挿入されたグルー／カーン．
\end{description}

%<*ja>
また，挿入処理の結果であるリストの最初のノードでは，\verb+\ltj@icflag+ の値に
\textit{processed\_begin\_flag}~(128)が追加される．これによって，\cs{unhbox} が
連続した場合でも「ボックスの境界」が識別できるようになっている．
%</ja>

\attr{ltj@kcat$i$}
%<*en>
Where $i$~is a natural number which is less than~7.
These 7~attributes store bit~vectors indicating which character block is regarded as a block of \textbf{JAchar}s.
%</en>
%<*ja>
$i$は7より小さい自然数．
これら7つの属性レジスタは，どの文字ブロックが\textbf{JAchar}のブロックとして
扱われるかを示すビットベクトルを格納する．
%</ja>

\attr{ltj@dir}
%<*ja>
ボックスにおける組方向を示す．通常のボックスでは
\begin{quote}
 \textit{dir\_dtou} (1), \textit{dir\_tate} (3), 
 \textit{dir\_yoko} (4), \textit{dir\_utod} (11)
\end{quote}
のいずれかであり，これらに次を加えた値をとるボックスが作られることもあ
			 る（\ref{sec-dir-imp}章参照）．
%</ja>
\begin{description}
\item[\textit{dir\_node\_auto} (128)]
%<ja> 異なる組方向に配置するために自動的に作られたボックス．
\item[\textit{dir\_node\_manual} (256)]
%<ja> \cs{ltjsetwd} によって「ボックスの本来の組方向とは異なる組方向での寸法」を
%<ja> 設定したときに，それを記録するためのボックス．
\end{description}
%<ja> \TeX 側から見える値，つまり \verb+\the\ltj@dir+ の値は常に0である．

\end{list}

%<*en>
Furthermore, \LuaTeX-ja uses several user-defined whatsit nodes for
internal processing. All those nodes except \emph{direction} whatsits
store a natural number (hence its \texttt{type} is 100).
\emph{direction} whatsits store a node list, hence its \texttt{type} is 110.
Their \texttt{user\_id} (used for distinguish user-defined whatsits)
are allocated by \texttt{luatexbase.newuserwhatsitid}.
%</en>
%<*ja>
さらに，\LuaTeX-jaはいくつかのuser-defined whatsit nodeを内部処理に用いる．
\textit{direction} whatsitはノードリストを格納するが，
それ以外のwhatsitノードの \texttt{type} は100であり，ノードは自然数を格納している．
user-defined whatsitを識別するための \texttt{user\_id} は\
\texttt{luatexbase.newuserwhatsitid} により確保されており，
下の見出しは単なる識別用でしかない．
%</ja>
\begin{description}
\item[\textit{inhibitglue}]
%<*en>
Nodes for indicating that \cs{inhibitglue} is
	   specified. The \texttt{value} field of these nodes doesn't matter.
%</en>
%<*ja>
\cs{inhibitglue} が指定されたことを示すノード．これらのノードの\
\texttt{value} フィールドは意味を持たない．
%</ja>

\item[\textit{stack\_marker}]
%<*en>
Nodes for \LuaTeX-ja's stack system (see the next
	   subsection). The \texttt{value} field of these nodes is
	   current group level.
%</en>
%<*ja>
\LuaTeX-jaのスタックシステム（次の節を参照）のためのノード．
これらのノードの \texttt{value} フィールドは現在のグループネストレベルを表す．
%</ja>

\item[\textit{char\_by\_cid}]
%<*en>
Nodes for \textbf{JAchar} which the callback process of
	   \Pkg{luaotfload} won't be applied, and the character code is
	   stored in the \texttt{value} field. Each node of this type are
           converted to a \textit{glyph\_node} \emph{after}
	   the callback process of luaotfload.
Nodes of this type is used in \cs{CID}, \cs{UTF} and IVS support.
%</en>
%<*ja>
\Pkg{luaotfload}のコールバックによる処理が適用されない\textbf{JAchar}のためのノードで，
\texttt{value} フィールドに文字コードが格納されている．
この種類のノードはそれぞれが\Pkg{luaotfload}のコールバックの処理の
\emph{後で}\textit{glyph\_node}に変換される．
\cs{CID}, \cs{UTF}やIVS対応処理でこの種類のノードが利用されている．
%</ja>

\item[\textit{replace\_vs}]
%<*en>
Similar to \textit{char\_by\_cid} whatsits above.
These nodes are for \textbf{ALchar} which the callback process of
	   \Pkg{luaotfload} won't be applied.
%</en>
%<*ja>
上の\textit{char\_by\_cid}と同様に，
これらのノードは\Pkg{luaotfload}のコールバックによる処理が適用されない\textbf{ALchar}のた
	   めものである．
%</ja>

\item[\textit{begin\_par}]
%<*en>
Nodes for indicating beginning of a paragraph.
A paragraph which is started by \cs{item} in list-like environments has a horizontal box
for its label before the actual contents. So \dots
%</en>
%<*ja>
「段落の開始」を意味するノード．
list環境，itemize環境などにおいて，\cs{item} で始まる各項目は……
%</ja>

\item[\textit{direction}]

\end{description}

%<*en>
These whatsits will be removed during the process of inserting \textbf{JAglue}s.
%</en>
%<*ja>
これらのwhatsitノードは\textbf{JAglue}の挿入処理の間に取り除かれる．
%</ja>

%<en>\subsection{Stack System of \LuaTeX-ja}
%<ja>\subsection{\LuaTeX-jaのスタックシステム}
\label{ssec-stack}

%<en>\paragraph{Background}
%<ja>\paragraph{背景}
%<*en>
\LuaTeX-ja has its own stack system, and most parameters of \LuaTeX-ja
are stored in it. To clarify the reason, imagine the parameter
\Param{kanjiskip} is stored by a skip, and consider the following
source:
%</en>
%<*ja>
\LuaTeX-jaは独自のスタックシステムを持ち，\LuaTeX-jaのほとんどのパラメータは
これを用いて保持されている．その理由を明らかにするために，
\Param{kanjiskip}パラメータがスキップレジスタで保持されているとし，
以下のコードを考えてみよう：
%</ja>
\begin{LTXexample}
\ltjsetparameter{kanjiskip=0pt}ふがふが.%
\setbox0=\hbox{%
  \ltjsetparameter{kanjiskip=5pt}ほげほげ}
\box0.ぴよぴよ\par
\end{LTXexample}

%<*en>
As described in Subsection~\ref{ssec-param}, the only effective value of
\Param{kanjiskip} in an hbox is the latest value, so the value of
\Param{kanjiskip} which applied in the entire hbox should be 5\,pt.
However, by the implementation method of \LuaTeX, this ``5\,pt'' cannot be
known from any callbacks.  In the \texttt{tex/packaging.w}, which is a
file in the source of \LuaTeX, there are the following codes:
%</en>
%<*ja>
\ref{ssec-param}節で述べたように，あるhboxの中で効力を持つ
\Param{kanjiskip}の値は最後に現れた値のみであり，したがってボックス全体に適用される
\Param{kanjiskip}は5\,ptであるべきである．しかし，\LuaTeX の実
装を観察すると，この5\,ptという長さはどのコールバックからも知ることはできないことがわかる．
\LuaTeX のソースファイルの1つ \texttt{tex/packaging.w} の中に，
以下のコードがある：
%</ja>
\begin{lstlisting}[numbers=left,firstnumber=1226]
void package(int c)
{
    scaled h;                   /* height of box */
    halfword p;                 /* first node in a box */
    scaled d;                   /* max depth */
    int grp;
    grp = cur_group;
    d = box_max_depth;
    unsave();
    save_ptr -= 4;
    if (cur_list.mode_field == -hmode) {
        cur_box = filtered_hpack(cur_list.head_field,
                                 cur_list.tail_field, saved_value(1),
                                 saved_level(1), grp, saved_level(2));
        subtype(cur_box) = HLIST_SUBTYPE_HBOX;
\end{lstlisting}
%<*en>
Notice that \texttt{unsave()} is executed \emph{before}
\texttt{filtered\_hpack()}, where \texttt{hpack\_filter} callback is
executed) here. So ``5\,pt'' in the above source is orphaned at
\texttt{unsave()}, and hence it can't be accessed from \texttt{hpack\_filter}
callback.
%</en>
%<*ja>
\texttt{unsave()} が \texttt{filtered\_hpack()}（これは \texttt{hpack\_filter} コールバックが
実行されるところである）の\emph{前に}実行されていることに注意する．
したがって，上記ソース中で5\,ptは \texttt{unsave()} のところで捨てられ，
\texttt{hpack\_filter} コールバックからはアクセスすることができない．
%</ja>

%<en>\paragraph{Implementation}
%<ja>\paragraph{解決法}

%<*en>
The code of stack system is based on that in a post of Dev-luatex mailing list\footnote{%
\texttt{[Dev-luatex] tex.currentgrouplevel}, a post at 2008/8/19 by Jonathan Sauer.}.
%</en>
%<*ja>
スタックシステムのコードはDev-luatexメーリングリストのある投稿\footnote{%
\texttt{[Dev-luatex] tex.currentgrouplevel}: Jonathan Sauerによる2008/8/19の投稿．}を
ベースにしている．
%</ja>

%<*en>
These are two \TeX\ count registers for maintaining information:
\verb+\ltj@@stack+ for the stack level, and \verb+\ltj@@group@level+ for
the \TeX's group level when the last assignment was done.  Parameters
are stored in one big table named \texttt{charprop\_stack\_table}, where
\texttt{charprop\_stack\_table[$i$]} stores data of stack level~$i$. If
a new stack level is created by \cs{ltjsetparameter}, all data of the
previous level is copied.
%</en>
%<*ja>
情報を保持するために，2つの\TeX の整数レジスタを用いている：
\verb+\ltj@@stack+ にスタックレベル，\verb+\ltj@@group@level+ に最後の代入が
なされた時点での\TeX のグループレベルを保持している．
パラメータは\texttt{charprop\_stack\_table}という名前のひとつの大きなテーブルに
格納される．ここで，\texttt{charprop\_stack\_table[$i$]}はスタックレベル$i$の
データを格納している．もし新しいスタックレベルが \cs{ltjsetparameter} によって
生成されたら，前のレベルの全てのデータがコピーされる．
%</ja>

%<*en>
To resolve the problem mentioned in above paragraph ``Background'', \LuaTeX-ja uses
another trick. When the stack level is about to be increased, a whatsit
node whose type, subtype and value are 44~(\textit{user\_defined}),
\textit{stack\_marker} and the current group level respectively is appended to the current
list (we refer this node by \textit{stack\_flag}). This enables us to
know whether assignment is done just inside a hbox. Suppose that the
stack level is~$s$ and the \TeX's group level is~$t$ just after the hbox
group, then:
%</en>
%<*ja>
上の「背景」で述べた問題を解決するために，\LuaTeX-jaでは次の手法を用いる：
スタックレベルが増加するするとき，type, subtype, valueがそれぞれ
44~(\textit{user\_defined}), \textit{stack\_marker}，そして現在のグループレベルであるwhatsitノード
を現在のリストに付け加える（このノードを\textit{stack\_flag}とする）．
これにより，あるhboxの中で代入がなされたかどうかを知ることが可能
となる．スタックレベルを$s$，そのhbox groupの直後の\TeX のグループレベルを
$t$とすると：
%</ja>
\begin{itemize}
%<*en>
\item If there is no \textit{stack\_flag} node in the list of the contents of the hbox, then
      no assignment was occurred inside the hbox. Hence values of
      parameters at the end of the hbox are stored in the stack
      level~$s$.
%</en>
%<*ja>
\item もしそのhboxの中身を表すリストの中に\textit{stack\_flag}ノードがなければ，
  hboxの中では代入は起こらなかったということになる．
  したがって，そのhboxの終わりにおけるパラメータの値はスタックレベル$s$に
  格納されている．
%</ja>

%<*en>
\item If there is a \textit{stack\_flag} node whose value is~$t+1$, then
      an assignment was occurred just inside the hbox group. Hence
      values of parameters at the end of the hbox are stored in the
      stack level~$s+1$.
%</en>
%<*ja>
\item もし値が$t+1$の\textit{stack\_flag}ノードがあれば，その
  hboxの中で代入が起こったことになる．
  したがって，hboxの終わりにおけるパラメータの値はスタックレベル$s+1$に
  格納されている．
%</ja>

%<*en>
\item If there are \textit{stack\_flag} nodes but all of their values
      are more than~$t+1$, then an assignment was occurred in the box,
      but it is done in more internal group. Hence values of
      parameters at the end of the hbox are stored in the stack
      level~$s$.
%</en>
%<*ja>
\item もし\textit{stack\_flag}ノードがあるがそれらの値が全て$t+1$より大きい
  場合，そのボックスの中で代入が起こったが，それは「より内部の」グループで
  起こったということになる．したがって，hboxの終わりでのパラメータの
  値はスタックレベル$s$に格納されている．
%</ja>
\end{itemize}

%<*en>
Note that to work this trick correctly, assignments to
\verb+\ltj@@stack+ and \verb+\ltj@@group@level+ have to be local always,
regardless the value of \cs{globaldefs}.
To solve this problem, we use another trick: the assignment
\hbox{\verb+\directlua{tex.globaldefs=0}+} is always local.
%</en>
%<*ja>
このトリックを正しく働かせるためには，\verb+\ltj@@stack+ と \verb+\ltj@@group@level+ への
代入は \cs{globaldefs} の値によらず常にローカルでなければならないことに注意する．
この問題は \hbox{\verb+\directlua{tex.globaldefs=0}+}（この代入は常にローカル）を
用いることで解決している．
%</ja>

%<*en>
\subsection{Lua Functions of the Stack System}
In this subsection, we will see how a user use \LuaTeX-ja's stack system to
store some data which obeys the grouping of \TeX.
%</en>
%<*ja>
\subsection{スタックシステムで使用される関数}
本節では，ユーザが\LuaTeX-jaのスタックシステムを使用して，
\TeX のグルーピングに従うような
独自のデータを取り扱う方法を述べる．
%</ja>

%<*en>
The following function can be used to store data into a stack:
\begin{verbatim}
luatexja.stack.set_stack_table(index, <any> data)
\end{verbatim}
Any values which except \texttt{nil}~and~NaN are usable as \textit{index}.
However, a user should use only negative integers or strings as \textit{index},
since natural numbers are used by \LuaTeX-ja itself.
Also, whether \textit{data} is stored locally or globally
is determined by \texttt{luatexja.isglobal}
(stored globally if and only if \texttt{luatexja.isglobal == 'global'}).
%</en>
%<*ja>
スタックに値を設定するには，以下のLua関数を呼び出せば良い：
\begin{verbatim}
luatexja.stack.set_stack_table(<any> index, <any> data)
\end{verbatim}
直感的には，スタックテーブル中のインデックス\textit{index}の値を\textit{data}にする，という意味である．
\textit{index}の値としては \texttt{nil} とNaN以外の任意の値を使えるが，
自然数は\LuaTeX-jaが使用する（将来の拡張用も含む）ので，
ユーザが使用する場合は負の整数値か文字列の値にすることが望ましい．
また，ローカルに設定されるかグローバルに設定されるかは，\texttt{luatexja.isglobal} の値に依存する
（グローバルに設定されるのは，\texttt{luatexja.isglobal == 'global'} であるちょうどその時）．
%</ja>

%<*en>
Stored data can be obtained as the return value of
\begin{verbatim}
luatexja.stack.get_stack_table(index, <any> default, <number> level)
\end{verbatim}
where \textit{level} is the stack level, which is usually the value of \verb+\ltj@@stack+,
and \textit{default} is the default value which will be returned if no values are stored
in the stack table whose level is \textit{level}.
%</en>
%<*ja>
スタックの値は，
\begin{verbatim}
luatexja.stack.get_stack_table(<any> index, <any> default, <number> level)
\end{verbatim}
の戻り値で取得できる．\textit{level}はスタックレベルであり，
通常は \verb+\ltj@@stack+ の値を指定することになるだろう．
\textit{default}はレベル\textit{level}のスタックに値が設定されていなかった場合に
返すデフォルト値である．
%</ja>

\begin{figure}[tb]
\begin{lstlisting}[numbers=left, firstnumber=380]
\protected\def\ltj@setpar@global{%
  \relax\ifnum\globaldefs>0\directlua{luatexja.isglobal='global'}%
    \else\directlua{luatexja.isglobal=''}\fi
}
\protected\def\ltjsetparameter#1{%
  \ltj@setpar@global\setkeys[ltj]{japaram}{#1}\ignorespaces}
\protected\def\ltjglobalsetparameter#1{%
  \relax\ifnum\globaldefs<0\directlua{luatexja.isglobal=''}%
    \else\directlua{luatexja.isglobal='global'}\fi%
  \setkeys[ltj]{japaram}{#1}\ignorespaces}
\end{lstlisting}
%<ja>\caption{パラメータ設定命令の定義}
%<en>\caption{Definiton of parameter setting commands}
\label{fig:setpar-def}
\end{figure}

%<*en>
\subsection{Extending Parameters}
Keys for \cs{ltjsetparameter}~and~\cs{ltjgetparameter} can be extended,
as in \Pkg{luatexja-adjust}.
%</en>
%<*ja>
\subsection{パラメータの拡張}
ここでは，\Pkg{luatexja-adjust}で行なっているように，
\cs{ltjsetparameter},~\cs{ltjgetparameter}に指定可能なキーを追加する方法
を述べる．
%</ja>

%<*en>
\paragraph{Setting parameters}
Figure~\ref{fig:setpar-def} shows the ``most outer'' definition of
two commands,
\cs{ltjsetparameter} and \cs{ltjglobalsetparameter}.
Most important part is the last \cs{setkeys},
which is offered by the \Pkg{xkeyval} package.

Hence, to add a key in \cs{ltjsetparameter}, one only have to add a key
whose prefix is \texttt{ltj} and whose family is \texttt{japaram}, as the following.
\begin{verbatim}
\define@key[ltj]{japaram}{...}{...}
\end{verbatim}

\cs{ltjsetparameter}~and~\cs{ltjglobalsetparameter} automatically sets
\texttt{luatexja.isglobal}. Its meaning is the following.
\begin{align}
 \texttt{luatexja.isglobal} =
\begin{cases}
 \texttt{'global'}&\text{global}\\
 \texttt{''}&\text{local}
\end{cases}
\end{align}
This is determined not only by command name
(\cs{ltjsetparameter}~or~\cs{ltjglobalsetparameter}),
but also by the value of \cs{globaldefs}.
%</en>
%<*ja>
\paragraph{パラメータの設定}
\cs{ltjsetparameter} と，\cs{ltjglobalsetparameter} の定義は図\ref{fig:setpar-def}の
のようになっている．
本質的なのは最後の \cs{setkeys} で，これは\Pkg{xkeyval}パッケージの提供する命令である．

このため，\cs{ltjsetparameter} に指定可能なパラメータを追加するには，
<prefix>を \texttt{ltj}，<family>を \texttt{japaram} としたキーを
\begin{verbatim}
\define@key[ltj]{japaram}{...}{...}
\end{verbatim}
のように定義すれば良いだけである．
なお，パラメータ指定がグローバルかローカルかどうかを示す \texttt{luatexja.isglobal} が，
\begin{align}
 \texttt{luatexja.isglobal} =
\begin{cases}
 \texttt{'global'}&\text{パラメータ設定はグローバル}\\
 \texttt{''}&\text{パラメータ設定はローカル}
\end{cases}
\end{align}
として自動的にセットされる\footnote{命令が \cs{ltjglobalsetparameter} かどうかだけでは
なく，実行時の \cs{globaldefs} の値にも依存して定まる．}．
%</ja>

%<*en>
\paragraph{Getting parameters}
\cs{ltjgetparameter} is implemented by a Lua script.

For parameters that do not need additional arguments, one only have to
define a function in the table \verb+luatexja.unary_pars+.
For example, with the following function, 
\verb+\ltjgetparameter{hoge}+ returns a \emph{string} \texttt{42}.
\begin{lstlisting}[numbers=left]
function luatexja.unary_pars.hoge (t)
  return 42
end
\end{lstlisting}
Here the argument of \verb+luatexja.unary_pars.hoge+ is
the stack level of \LuaTeX-ja's stack system (see Subsection~\ref{ssec-stack}).

On the other hand, for parameters that need an additional argument
(this must be an integer), one have to define a function in
\verb+luatexja.binary_pars+ first. For example,
\begin{lstlisting}[numbers=left]
function luatexja.binary_pars.fuga (c, t)
  return tostring(c) .. ', ' .. tostring(42)
end
\end{lstlisting}
Here the first argument $t$ is the stack level, as before.
The second argument $c$ is just the second argument of \cs{ltjgetparameter}.

For parameters that need an additional argument, one also have to 
execute the \TeX\ code like
\begin{verbatim}
\ltj@@decl@array@param{fuga}
\end{verbatim}
to indicate that ``the parameter \texttt{fuga} needs an additional argument''.
%</en>
%<*ja>
\paragraph{パラメータの取得}
一方，\cs{ltjgetparameter} はLuaスクリプトによって実装されている．
値を取得するのに追加引数の要らないパラメータについては，\verb+luatexja.unary_pars+\
内に処理内容を記述した関数を定義すれば良い．例えば，Luaスクリプトで
\begin{lstlisting}[numbers=left]
function luatexja.unary_pars.hoge (t)
  return 42
end
\end{lstlisting}
を実行すると，\verb+\ltjgetparameter{hoge}+ は \texttt{42} という\emph{文字列}を返す．
関数 \verb+luatexja.unary_pars.hoge+ の引数$t$は，\ref{ssec-stack}節で述べた
\LuaTeX-jaのスタックシステムにおけるスタックレベルである．
戻り値はいかなる値であっても，最終的には文字列として出力されることに注意．

一方，追加引数（\emph{数値しか許容しない}）が必要なパラメータについては，
まずLuaスクリプトで処理内容の本体を記述しておく：
\begin{lstlisting}[numbers=left]
function luatexja.binary_pars.fuga (c, t)
  return tostring(c) .. ', ' .. tostring(42)
end
\end{lstlisting}
引数$t$は，先に述べた通りのスタックレベルである．一方，引数$c$は\
\cs{ltjgetparameter} の第2引数を表す数値である．
しかしこれだけでは駄目で，
\begin{verbatim}
\ltj@@decl@array@param{fuga}
\end{verbatim}
を実行し，\TeX インターフェース側に
「\verb+\ltjgetparameter{fuga}+ は追加引数が必要」ということを通知する必要がある．
%</ja>

%<en>\section{Linebreak after a Japanese Character}
%<ja>\section{和文文字直後の改行}
\label{sec-lbreak}
%<en>\subsection{Reference: Behavior in \pTeX}
%<ja>\subsection{参考：\pTeX の動作}
%<*en>
In~\pTeX, a line break after a Japanese character doesn't emit a space,
since words are not separated by spaces in Japanese writings. However,
this feature isn't fully implemented in \LuaTeX-ja due to the
specification of callbacks in~\LuaTeX. To clarify the difference between
\pTeX~and~\LuaTeX, We briefly describe the handling of a line break in~\pTeX, in
this subsection.

\pTeX's input processor can be described in terms of a finite state
automaton, as that of~\TeX\ in~Section~2.5 of~\cite{texbytopic}. The
internal states are as follows:
\begin{itemize}
\item State~$N$: new line
\item State~$S$: skipping spaces
\item State~$M$: middle of line
\item State~$K$: after a Japanese character
\end{itemize}
The first three states---$N$,~$S$, and~$M$---are as same as \TeX's input
processor.  State~$K$ is similar to state~$M$, and is entered after
Japanese characters.  The diagram of state transitions are indicated in
Figure~\ref{fig-ptexipro}.  Note that \pTeX\ doesn't leave state~$K$
after ``beginning/ending of a group'' characters.
%</en>

%<*ja>
欧文では文章の改行は単語間でしか行わない．そのため，\TeX では，（文字の直後の）改行は
空白文字と同じ扱いとして扱われる．一方，和文ではほとんどどこでも改行が可能なため，
\pTeX では和文文字の直後の改行は単純に無視されるようになっている．

このような動作は，\pTeX が\TeX からエンジンとして拡張されたことによって可能になったことである．
\pTeX の入力処理部は，\TeX におけるそれと同じように，有限オートマトンとして記述することができ，
以下に述べるような4状態を持っている．

\begin{itemize}
\item State~$N$: 行の開始．
\item State~$S$: 空白読み飛ばし．
\item State~$M$: 行中．
\item State~$K$: 行中（和文文字の後）．
\end{itemize}
また，状態遷移は，図\ref{fig-ptexipro}のようになっており，図中の数字は
カテゴリーコードを表している．最初の3状態は\TeX の入力処理部と同じであり，
図中から状態$K$と「$j$」と書かれた矢印を取り除けば，\TeX の入力処理部と同
じものになる．

この図から分かることは，
\begin{quote}
行が和文文字（とグループ境界文字）で終わっていれば，改行は無視される
\end{quote}
ということである．
%</ja>

\begin{figure}[!tb]
\let\sp\textvisiblespace\small
\begin{minipage}{.6\textwidth}%
\begin{center}
\unitlength=6.5mm\sf\mathversion{bold}
\begin{tikzpicture}[
  ->, auto, shorten >=1pt
]
\node [shape=rectangle, font=\scriptsize] (init) at (2,7) {start};
\node [shape=circle,draw, fill=blue!20] (newline) at (4,7) {$N$};
\node [shape=circle,draw, fill=blue!20] (midline) at (4,4) {$M$};
\node [shape=circle,draw, fill=blue!20] (skipspc) at (8,7) {$S$};
\node [shape=circle,draw, fill=red!20]  (kanji) at (8,4) {$K$};
\node [shape=rectangle,draw, fill=green!20] (scanacs) at (6,8) {scan a c.s.};
\node (endk) at (8,2.5) {} ;
\node (endm) at (4,2.5) {} ;
\node (ends) at (8,8.5) {} ;
\node (endn) at (4,8.5) {} ;
\begin{scope}[font=\scriptsize]
\path (newline) edge [bend right]    node [left]{G, O} (midline)
      (init)    edge                 node {} (newline)
      (midline) edge [bend right=10] node {10} (skipspc)
      (skipspc) edge [bend right]    node [left,right=10,above=7]{G, O} (midline)
      (skipspc) edge [loop right]    node {10} (skipspc)
      (newline) edge [loop right]    node {10} (newline)
      (scanacs) edge [bend left]     node [left=3,below]{$(*)$} (skipspc)
      (scanacs) edge [bend right]    node [right=30,above=20]{$(*)$} (midline)
      (midline) edge                 node {5\ [\sp]} (endm)
      (midline) edge [loop left]     node {G, O} (midline)
      (skipspc) edge                 node [right] {5} (ends)
      (newline) edge                 node {5 [\cs{par}]} (endn);
\begin{scope}[red]
\path (newline) edge [bend right]    node [right=25,below=3]{J} (kanji)
      (midline) edge                 node [below]{J} (kanji)
      (kanji)   edge [bend left]     node {O} (midline)
      (kanji)   edge                 node {10} (skipspc)
      (kanji)   edge [loop right]    node {G, J} (kanji)
      (skipspc) edge [bend left]     node {J} (kanji)
      (kanji)   edge                 node {5} (endk)
;
\end{scope}
\end{scope}
\end{tikzpicture}
\end{center}
\end{minipage}%
\begin{minipage}{.4\textwidth}
\begin{description}
\item[\textsf{G}] Beginning of group (usually \verb+{+)\\
 and ending of group (usually \verb+}+).
\item[\textsf{J}] Japanese characters.
\item[\textsf{5}] \textit{end-of-line} (usually \verb+^+\verb+^J+).
\item[\textsf{10}] space (usually \sp).
\item[\textsf{O}] other characters, whose category code is in $\{3,4,6,7,8,11,12,13\}$.
\item[\textsf{[\sp]}, \textsf{[\cs{par}]}]
emits a space, or~\cs{par}.
\end{description}
\end{minipage}
\begin{itemize}
\item We omitted about category codes
9~(\textit{ignored}), 14~(\textit{comment}), and~15~(\textit{invalid})
from the above diagram. We also ignored the input like ``\verb+^+\verb+^A+'' or ``\verb+^+\verb+^df+''.
\item When a character whose category code is 0 (\textit{escape character}) is seen by \TeX,
the input processor scans a control sequence (\textsf{scan a c.s.}).
These paths are not shown in the above diagram.

After that, the state is changed to State~$S$ (skipping blanks) in most cases, but
to State~$M$ (middle of line) sometimes.
\end{itemize}
%<en>\caption{State transitions of \pTeX's input processor}
%<ja>\caption{\pTeX の入力処理部の状態遷移}
\label{fig-ptexipro}
\end{figure}


%<en>\subsection{Behavior in \LuaTeX-ja}
%<ja>\subsection{\LuaTeX-jaの動作}
%<*en>
States in the input processor of \LuaTeX\ is the same as that of \TeX,
and they can't be customized by any callbacks. Hence, we can only use
\verb+process_input_buffer+ and \verb+token_filter+ callbacks for to
suppress a space by a line break which is after Japanese characters.

However, \verb+token_filter+ callback cannot be used either, since a
character in category code 5~(\textit{end-of-line}) is converted into an space
token \emph{in the input processor}.  So we can use only the
\verb+process_input_buffer+ callback.  This means that suppressing a
space must be done \emph{just before} an input line is read.

Considering these situations, handling of an end-of-line in \LuaTeX-ja are as follows:
\begin{quote}
A character \texttt{U+FFFFF} (its category code is set to 14~(\textit{comment}) by
\LuaTeX-ja) is appended to an input line, \emph{before \LuaTeX\ actually
process it}, if and only if the following three conditions are satisfied:
\begin{enumerate}
\item The category code of \cs{endlinechar}%
\footnote{Usually, it is $\langle$\textit{return}$\rangle$
      (whose character code is 13).} is 5~(\textit{end-of-line}).
\item The category code of \texttt{U+FFFFF} itself is 14~(\textit{comment}).
\item The input line matches the following ``regular expression'':
\[
  (\text{any char})^*(\textbf{JAchar})
  \bigl(\{\text{catcode}=1\}\cup\{\text{catcode}=2\}\bigr)^*
\]
\end{enumerate}
\end{quote}

\paragraph{Remark}
The following example shows the major difference from the behavior of \pTeX.
\begin{LTXexample}
\fontspec[Ligatures=TeX]{TeX Gyre Termes}
\ltjsetparameter{autoxspacing=false}
\ltjsetparameter{jacharrange={-6}}xあ
y\ltjsetparameter{jacharrange={+6}}zい
u
\end{LTXexample}
It is not strange that ``あ'' does not printed in the above output.
This is because \TeX\ Gyre\ Termes does not contain ``あ'', and because
``あ'' in line~3 is considered as an \textbf{ALchar}.

Note that there is no space before ``y'' in the output, but
there is a space before ``u''. This follows from following reasons:
\begin{itemize}
\item When line~3 is processed by \texttt{process\_input\_buffer} callback,
``あ'' is considered as an \textbf{JAchar}.
Since  line~3 ends with an \textbf{JAchar},
the comment character \texttt{U+FFFFF} is appended to this line,
and hence the linebreak immediately after this line is ignored.
\item When line~4 is processed by \texttt{process\_input\_buffer} callback,
``い'' is considered as an \textbf{ALchar}.
Since  line~4 ends with an \textbf{ALchar}, the linebreak immediately after this line
emits a space.
\end{itemize}
%</en>

%<*ja>
\LuaTeX の入力処理部は\TeX のそれと全く同じであり，コールバックによりユーザが
カスタマイズすることはできない．このため，改行抑制の目的でユーザが利用で
きそうなコールバックとしては，\verb+process_input_buffer+や
\verb+token_filter+に限られてしまう．しかし，\TeX の入力処理部をよく見る
と，後者も役には経たないことが分かる：改行文字は，入力処理部によってトー
クン化される時に，カテゴリーコード10の32番文字へと置き換えられてしまうた
め，\verb+token_filter+で非標準なトークン読み出しを行おうとしても，空白文
字由来のトークンと，改行文字由来のトークンは区別できないのだ．

すると，我々のとれる道は，\verb+process_input_buffer+を用いて
\LuaTeX の入力処理部に引き渡される前に入力文字列を編集するというものしかない．
以上を踏まえ，\LuaTeX-jaにおける「和文文字直後の改行抑制」の処理は，次のようになっている：

\begin{quote}
各入力行に対し，\emph{その入力行が読まれる前の内部状態で}
以下の3条件が満たされている場合，\LuaTeX-jaは\texttt{U+FFFFF}の文字
\footnote{この文字はコメント文字として扱われるように\LuaTeX-ja内部で設定をしている．}
を末尾に追加する．よって，その場合に改行は空白とは見做されないこととなる．
\begin{enumerate}
\item \cs{endlinechar}の文字\footnote{普通は，改行文字（文字コード13番）である．}
のカテゴリーコードが5~(\textit{end-of-line})である．
\item \texttt{U+FFFFF}のカテゴリーコードが14~(\textit{comment})である．
\item 入力行は次の「正規表現」にマッチしている：
\[
  (\text{any char})^*(\textbf{JAchar})
  \bigl(\{\text{catcode}=1\}\cup\{\text{catcode}=2\}\bigr)^*
\]
\end{enumerate}
\end{quote}

この仕様は，前節で述べた\pTeX の仕様にできるだけ近づけたものとなっている．条件1.は，
\texttt{verbatim}系環境などの日本語対応マクロを書かなくてすませるためのものである．

しかしながら，\pTeX と完全に同じ挙動が実現できたわけではない．
次のように，和文文字の範囲を変更したちょうどその行においては挙動が異なる：
\begin{LTXexample}
\fontspec[Ligatures=TeX]{TeX Gyre Termes}
\ltjsetparameter{autoxspacing=false}
\ltjsetparameter{jacharrange={-6}}xあ
y\ltjsetparameter{jacharrange={+6}}zい
u
\end{LTXexample}
上ソース中の「あ」は欧文文字扱いであり．
ここで使用している欧文フォント\TeX\ Gyre Termesは「あ」を含まない．
よって，出力に「あ」は現れないことは不思議ではない．
それでも，\pTeX とまったく同じ挙動を示すならば，出力は
「\hbox{\ltjsetparameter{autoxspacing=false}x yzいu}」となるはずである．しかし，実際には
上のように異なる挙動となっているが，それは以下の理由による：
\begin{itemize}
\item 3行目を \texttt{process\_input\_buffer} で処理する時点では，
      「あ」は和文文字扱いである．よって3行目は和文文字で終わることになり，
      コメント文字 \texttt{U+FFFFF} が追加される．
      よって，直後の改行文字は無視されることになり，空白は入らない．
\item 4行目を \texttt{process\_input\_buffer} で処理する時点では，
      「い」は欧文文字扱いである．よって4行目は欧文文字で終わることになり，
      直後の改行文字は空白に置き換わる．
\end{itemize}
このため，トラブルを避けるために，和文文字の範囲を\cs{ltjsetparameter}で編集した場合，
その行はそこで改行するようにした方がいいだろう．
%</ja>

%<*ja>

%<en>\section{Insertion of JFM glues, \Param{kanjiskip} and \Param{xkanjiskip}}
%<ja>\section{JFMグルーの挿入，\Param{kanjiskip}と\Param{xkanjiskip}}
\label{sec-jfmglue}
%<en>\subsection{Overview}
%<ja>\subsection{概要}

\LuaTeX-jaにおける \textbf{JAglue} の挿入方法は，\pTeX のそれとは全く異なる．
\pTeX では次のような仕様であった：
\begin{itemize}
\item JFMグルーの挿入は，和文文字を表すトークンを元に水平リストに（文字を表す）<char\_node>を
追加する過程で行われる．
\item \Param{xkanjiskip}の挿入は，hboxへのパッケージングや行分割前に行われる．
\item \Param{kanjiskip}はノードとしては挿入されない．パッケージングや行分割の計算時に
「和文文字を表す2つの<char\_node>の間には\Param{kanjiskip}がある」ものとみなされる．
\end{itemize}
しかし，\LuaTeX-jaでは，hboxへのパッケージングや行分割前に全ての
\textbf{JAglue}，即ちJFMグルー・\Param{xkanjiskip}・\Param{kanjiskip}の
3種類を一度に挿入することになっている．これは，\LuaTeX において欧文の合字・
カーニング処理がノードベースになったことに対応する変更である．

\LuaTeX-jaにおける\textbf{JAglue}挿入処理では，次節で定義する
「クラスタ」を単位にして行われる．大雑把にいうと，「クラスタ」は文字とそれに付随す
るノード達（アクセント位置補正用のカーンや，イタリック補正）をまとめたもの
であり，2つのクラスタの間には，ペナルティ，\cs{vadjust}，whatsitなど，行組版
には関係しないものがある．


%<en>\subsection{Definition of a Cluster}
%<ja>\subsection{「クラスタ」の定義}

\def\OA{$\text{\sf O}_{\text{\sf A}}$}
\def\OB{$\text{\sf O}_{\text{\sf B}}$}
\begin{defn}
%<*en>
A \emph{cluster} is a list of consecutive nodes in one of the following forms,
with the \textit{id} of it:
%</en>
%<*ja>
\emph{クラスタ}は以下の形のうちのどれかひとつをとる連続的なノードのリストである：
%</ja>
\begin{enumerate}
%<*en>
\item Nodes whose value of\ \verb+\ltj@icflag+ is in $[3,15)$.  These
      nodes come from a hbox which is already packaged, by unpackaging
      (\cs{unhbox}).
      The \textit{id} is \textit{id\_pbox}.
%</en>
%<*ja>
\item その \verb+\ltj@icflag+ の値が$[3,15)$に入るノードのリスト．
  これらのノードはある既にパッケージングされたhboxから \cs{unhbox} で
  アンパックされたものである．
  その\textit{id}は\textit{id\_pbox}である．
%</ja>

%<*en>
\item A inline math formula, including two \textit{math\_node}s at the boundary of it.
      The \textit{id} is \textit{id\_math}.
%</en>
%<*ja>
\item インライン数式でその境界に2つの\textit{math\_node}を含むもの．
  その\textit{id}は\textit{id\_math}である．
%</ja>

%<*en>
\item A \textit{glyph\_node}~$p$ with nodes which relate with it:
%</en>
%<*ja>
\item \textit{glpyh\_node}~$p$とそれに関係するノード：
%</ja>
\begin{enumerate}
%<*en>
\item A kern for the italic correction of~$p$.
%</en>
%<*ja>
\item $p$のイタリック補正のためのカーン．
%</ja>

%<*en>
\item An accent attached to $p$ by \cs{accent}.
%</en>
%<*ja>
\item \cs{accent} による$p$に付随したアクセント．
%</ja>
\end{enumerate}
\[
\overbrace{%
 \Node{kern}{$\mathit{subtype}=2$}\longrightarrow
\left\{\begin{array}{c}
\Node{glyph}{accent}\\\noalign{\medskip}
\Node{hbox}{accent (shifted vert.)}
\end{array}\right\}\longrightarrow
\Node{kern}{$\mathit{subtype}=2$}}^{\text{(a)}}
\longrightarrow
\Node{glyph}{$p$}\longrightarrow
\overbrace{%
\Node{kern}{italic corr.}}^{\text{(b)}}
\]

%<*en>
The \textit{id} is \textit{id\_jglyph} or
\textit{id\_glyph}, according to whether the \textit{glyph\_node}
represents a Japanese character or not.
%</en>
%<*ja>
\textit{id}は\textit{glyph\_node}が和文文字を表すかどうかによって
\textit{id\_jglyph}，もしくは\textit{id\_glyph}となる．
%</ja>

%<*en>
\item An box-like node, that is, an hbox, a vbox, a rule (\cs{vrule}) and an \textit{unset\_node}.
The \textit{id} is \textit{id\_hlist} if the node is an
      hbox which is not shifted vertically, or \textit{id\_box\_like}
      otherwise.
%</en>
%<*ja>
\item ボックス様のノード，つまり水平ボックス，垂直ボックス，罫線 (\cs{vrule})，
  そして\textit{unset\_node}．
  その\textit{id}は垂直に移動していないhboxならば\textit{id\_hlist}，
  そうでなければ\textit{id\_box\_like}となる．
%</ja>

%<*en>
\item A glue, a kern whose subtype is not 2~(\textit{accent}), and a discretionary break.
The \textit{id} is \textit{id\_glue}, \textit{id\_kern}
      and \textit{id\_disc}, respectively.
%</en>
%<*ja>
\item グルー，subtypeが 2~(\textit{accent})ではないカーン，そして任意改行．
  その\textit{id}はそれぞれ\textit{id\_glue}, \textit{id\_kern}，そして
  \textit{id\_disc}である．
%</ja>
\end{enumerate}
%<*en>
Let \textit{Np}, \textit{Nq} and \textit{Nr} denote a cluster.
%</en>
%<*ja>
以下では\textit{Np}, \textit{Nq}, \textit{Nr}でクラスタを表す．
%</ja>
\end{defn}

\paragraph{\textit{id}の意味}
$\mathit{Np}.\mathit{id}$の意味を述べるとともに，
「先頭の文字」を表す\textit{glyph\_node}~$\mathit{Np}.\mathit{head}$と，
「最後の文字」を表す\textit{glyph\_node}~$\mathit{Np}.\mathit{tail}$を次のように定義する．
直感的に言うと，\textit{Np}は$\mathit{Np}.\mathit{head}$で始まり$\mathit{Np}.\mathit{tail}$で終わるような単語，
と見做すことができる．これら$\mathit{Np}.\mathit{head}$, $\mathit{Np}.\mathit{tail}$は
説明用に準備した概念であって，実際のLuaコード中にそのように書かれているわけではないことに注意．

\begin{description}
\item[\textit{id\_jglyph}] 和文文字．\\
$\mathit{Np}.\mathit{head}$, $\mathit{Np}.\mathit{tail}$は，その和文文字を表している
\textit{glyph\_node}そのものである．
\item[\textit{id\_glyph}] 和文文字を表していない\textit{glyph\_node}~$p$．\\
多くの場合，$p$は欧文文字を格納しているが，「ffi」などの合字によって作られた
\textit{glyph\_node}である可能性もある．
前者の場合，$\mathit{Np}.\mathit{head}$,~$\mathit{Np}.\mathit{tail} = p$である．
一方，後者の場合，
\begin{itemize}
\item $\mathit{Np}.\mathit{head}$は，
合字の構成要素の先頭→（その\textit{glyph\_node}における）合字の構成要素の先頭→……
と再帰的に検索していってたどり着いた\textit{glyph\_node}である．
\item $\mathit{Np}.\mathit{last}$は，同様に末尾→末尾→と検索してたどり着いた\textit{glyph\_node}である．
\end{itemize}
\item[\textit{id\_math}] インライン数式．\\
便宜的に，$\mathit{Np}.\mathit{head}$, $\mathit{Np}.\mathit{tail}$ともに
「文字コード$-1$の欧文文字」とおく．
\item[\textit{id\_hlist}] 縦方向にシフトされていないhbox．\\
この場合，$\mathit{Np}.\mathit{head}$, $\mathit{Np}.\mathit{tail}$はそれぞれ$p$の内容を表すリストの，
先頭・末尾のノードである．
\begin{itemize}
\item 状況によっては，\TeX ソースで言うと
\begin{verbatim}
\hbox{\hbox{abc}...\hbox{\lower1pt\hbox{xyz}}}
\end{verbatim}
のように，$p$の内容が別のhboxで開始・終了している可能性も十分あり得る．そのような場合，
$\mathit{Np}.\mathit{head}$, $\mathit{Np}.\mathit{tail}$の算出は，
\emph{垂直方向にシフトされていない}hboxの
場合だけ内部を再帰的に探索する．例えば上の例では，$\mathit{Np}.\mathit{head}$は文字「a」を表すノードであり，
一方$\mathit{Np}.\mathit{tail}$は垂直方向にシフトされたhbox，
\verb+\lower1pt\hbox{xyz}+ に対応するノードである．
\item また，先頭にアクセント付きの文字がきたり，末尾にイタリック補正用のカーンが
来ることもあり得る．この場合は，クラスタの定義のところにもあったように，それらは無視して算出を行う．
\item 最初・最後のノードが合字によって作られた\textit{glyph\_node}のときは，それぞれに対して\textit{id\_glyph}%
と同様に再帰的に構成要素をたどっていく．
\end{itemize}
\item[\textit{id\_pbox}] 「既に処理された」ノードのリストであり，これらのノードが二度処理を受けないために
まとめて1つのクラスタとして取り扱うだけである．
\textit{id\_hlist}と同じ方法で$\mathit{Np}.\mathit{head}$, $\mathit{Np}.\mathit{tail}$を算出する，
\item[\textit{id\_disc}] discretionary break (\verb+\discretionary{pre}{post}{nobreak}+).\\
\textit{id\_hlist}と同じ方法で$\mathit{Np}.\mathit{head}$, $\mathit{Np}.\mathit{tail}$を算出するが，
第3引数の \texttt{nobreak}（行分割が行われない時の内容）を使う．言い換えれば，ここで行分割が発生した時の状況は
全く考慮に入れない．
\item[\textit{id\_box\_like}] \textit{id\_hlist}とならないboxや，rule．\\
この場合は，$\mathit{Np}.\mathit{head}$, $\mathit{Np}.\mathit{tail}$のデータは利用されないので，2つの算出は無意味である．
敢えて明示するならば，$\mathit{Np}.\mathit{head}$, $\mathit{Np}.\mathit{tail}$は共にnil値である．
\item[他] 以上にない\textit{id}に対しても，$\mathit{Np}.\mathit{head}$, $\mathit{Np}.\mathit{tail}$の算出は無意味．
\end{description}

\paragraph{クラスタの別の分類}
さらに，JFMグルー挿入処理の実際の説明により便利なように，\textit{id}とは別のクラスタの分類を行っておく．
挿入処理では2つの隣り合ったクラスタの間に
空白等の実際の挿入を行うことは前に書いたが，ここでの説明では，問題にしているクラスタ\textit{Np}は「後ろ側」のクラスタである
とする．「前側」のクラスタについては，以下の説明で\textit{head}が\textit{last}に置き換わることに注意すること．
\begin{description}
\item[和文A] リスト中に直接出現している和文文字．
\textit{id}が\textit{id\_jglyph}であるか，\\
\textit{id}が\textit{id\_pbox}であって$\mathit{Np}.\mathit{head}$が\textbf{JAchar}であるとき．

\item[和文B] リスト中のhboxの中身の先頭として出現した和文文字．和文Aとの違いは，これの前に
JFMグルーの挿入が行われない（\Param{xkanjiskip},~\Param{kanjiskip}は入り得る）ことである．\\
\textit{id}が\textit{id\_hlist}か\textit{id\_disc}であって$\mathit{Np}.\mathit{head}$が\textbf{JAchar}であるとき．

\item[欧文] リスト中に直接／hboxの中身として出現している欧文文字．次の3つの場合が該当：
\begin{itemize}
\item \textit{id}が\textit{id\_glyph}である．
\item \textit{id}が\textit{id\_math}である．
\item \textit{id}が\textit{id\_pbox}か\textit{id\_hlist}か\textit{id\_disc}であって，$\mathit{Np}.\mathit{head}$が\textbf{ALchar}．
\end{itemize}
\item[箱] box，またはそれに類似するもの．次の2つが該当：
\begin{itemize}
\item \textit{id}が\textit{id\_pbox}か\textit{id\_hlist}か\textit{id\_disc}であって，$\mathit{Np}.\mathit{head}$が\textit{glyph\_node}でない．
\item \textit{id}が\textit{id\_box\_like}である．
\end{itemize}

\end{description}

\subsection{段落／hboxの先頭や末尾}
\paragraph{先頭部の処理}
まず，段落／hboxの一番最初にあるクラスタ\textit{Np}を探索する．
hboxの場合は何の問題もないが，段落の場合では以下のノード達を事前に読み飛ばしておく：
\begin{itemize}
\item \cs{parindent} 由来のhbox($\mathit{subtype}=3$)
\item \textit{subtype}が44~(\textit{user\_defined})でないようなwhatsit
\end{itemize}
これは，\cs{parindent}由来のhboxがクラスタを構成しないようにするためである．

次に，\textit{Np}の直前に空白$g$を必要なら挿入する：
\begin{enumerate}
\item この処理が働くような\textit{Np}は\textsf{和文A}である．
\item 問題のリストが字下げありの段落（\cs{parindent} 由来のhboxあり）の場合は，
この空白$g$は「文字コード \texttt{'parbdd'} の文字」と\textit{Np}の間に入るグルー／カーンである．
\item そうでないとき（\verb+noindent+ で開始された段落やhbox）は，
$g$は「文字コード \texttt{'boxbdd'} の文字」と\textit{Np}の間に入るグルー／カーンである．
\end{enumerate}
ただし，もし$g$がglueであった場合，この挿入によって\textit{Np}による行分割が新たに可能になるべきではない．
そこで，以下の場合には，$g$の直前に \cs{penalty10000} を挿入する：
\begin{itemize}
\item 問題にしているリストが段落であり，かつ
\item \textit{Np}の前には予めペナルティがなく，$g$はglue．
\end{itemize}

\paragraph{末尾の処理}
末尾の処理は，問題のリストが段落のものかhboxのものかによって異なる．
後者の場合は容易い：最後のクラスタを\textit{Nq}とおくと，\textit{Nq}と「文字コード\
\texttt{'boxbdd'} の文字」の間に入るグルー／カーンを，
\textit{Nq}の直後に挿入するのみである．

一方．前者（段落）の場合は，リストの末尾は常に \cs{penalty10000} と，
\cs{parfillskip} 由来のグルーが存在する．%よって，最後のクラスタ\textit{Np}は
%この \cs{parfillskip} 由来のグルーとなり，実質的な中身の最後はその1つ前のクラスタ\textit{Nq}となる．
段落の最後の「通常の和文文字${}+{}$句点」が独立した行となるのを防ぐために，
\Param{jcharwidowpenalty}の値の分だけ適切な場所のペナルティを増やす．

ペナルティ量を増やす場所は，\textit{head}が\textbf{JAchar}であり，
かつその文字の\Param{kcatcode}が偶数であるような
最後のクラスタの直前にあるものたちである%
\footnote{大雑把に言えば，\Param{kcatcode}が奇数であるような\textbf{JAchar}%
を約物として考えていることになる．
\Param{kcatcode}の最下位ビットはこの\Param{jcharwidowpenalty}用にのみ利用される．}．

\subsection{概観と典型例：2つの「和文A」の場合}
\label{ssec-cluster-wa}
先に述べたように，2つの隣り合ったクラスタ，\textit{Nq}と\textit{Np}の間には，
ペナルティ，\cs{vadjust}，whatsitなど，行組版には関係しないものがある．模式的に表すと，
\[
 \Node{cluster}{\textit{Nq}}\longrightarrow
\overbrace{
\Node{penalty}{$p$}\longrightarrow \cdots\longrightarrow \Node{whatsit}{}}^{\textrm{(a)}}
\longrightarrow \Node{cluster}{\textit{Np}}
\]
のようになっている．間の(a)に相当する部分には，何のノードもない場合ももちろんあり得る．
そうして，JFMグルー挿入後には，この2クラスタ間は次のようになる：
\[
 \Node{cluster}{\textit{Nq}}\longrightarrow%\Node{kern}{左空白}\longrightarrow
\overbrace{
\Node{penalty}{$p+x$}\longrightarrow \cdots\longrightarrow
\Node{whatsit}{}}^{\textrm{(a)}}\longrightarrow
\Node{glue or kern}{\raisebox{-.2\zw}{右空白}}\longrightarrow
\Node{cluster}{\textit{Np}}
\]

以後，\emph{典型的な例として，クラスタ\textit{Nq}と\textit{Np}が共に\textsf{\textmd{和文A}}である場合を見ていこう，}
この場合が全ての場合の基本となる．

\paragraph{「右空白」の算出}
まず，「右空白」にあたる量を算出する．通常はこれが，隣り合った2つの和文文字間に入る空白量となる．
\begin{description}
\item[JFM由来{[M]}] JFMの文字クラス指定によって入る空白を以下によって求める．この段階で空白量が未定義（未指定）だった場合，
      デフォルト値\Param{kanjiskip}を採用することとなるので，次へ．
\begin{enumerate}
\item もし両クラスタの間で \cs{inhibitglue} が実行されていた場合（証としてwhatsitノードが自動挿入される），
      代わりに\Param{kanjiskip}が挿入されることとなる．次へ．
\item \textit{Nq}と\textit{Np}が同じJFM・同じ\texttt{jfmvar}キー・同じサイズの和文フォントであったならば，
      共通に使っているJFM内で挿入される空白（グルーかカーン）が決まっているか調べ，決まっていればそれを採用．
\item 1.でも2.でもない場合は，JFM・\texttt{jfmvar}・サイズの3つ組は\textit{Nq}と\textit{Np}で異なる．
この場合，まず
\[
\vcenter{\halign{\hfil$#:={}$&\inhibitglue#\inhibitglue\cr
gb&(\textit{Nq}と「使用フォントが\textit{Nq}のそれと同じで，\hfil\cr
\omit&\quad 文字コードが\textit{Np}のそれの文字」との間に入るグルー／カーン)\hfil\cr
ga&(\inhibitglue 「使用フォントが\textit{Np}のそれと同じで，\hfil\cr
\omit&\quad 文字コードが\textit{Nq}のそれの文字」と\textit{Np}との間に入るグルー／カーン)\hfil\cr
}}
\]
として，前側の文字のJFMを使った時の空白（グルー／カーン）と，後側の文字のJFMを使った時のそれを求める．

$\mathit{gb}$,~$\mathit{ga}$それぞれに対する<ratio>の値を$d_b$,~$d_a$とする．
\begin{itemize}
\item
$\mathit{ga}$と$\mathit{gb}$の両方が未定義であるならば，JFM由来のグルーは挿入されず，
\Param{kanjiskip}を採用することとなる．
どちらか片方のみが未定義であるならば，次のステップでその未定義の方は長さ0のkernで，<ratio>の値は0であるかのように扱われる．
\item
\Param{diffrentjfm}の値が \texttt{pleft}, \texttt{pright},
      \texttt{paverage} のとき，
<ratio>の指定に従って比例配分を行う．
JFM由来のグルー／カーンは以下の値となる：
\[
 f\left(\frac{1-d_b}2\textit{gb} + \frac{1+d_b}2\textit{ga},
\frac{1-d_a}2\textit{gb} + \frac{1+d_a}2\textit{ga}\right)
\]
ここで．$f(x,y)$は
\[
 f(x,y)=\begin{cases}
x&\text{if\ }\Param{diffrentjfm}=\texttt{pleft};\\
y&\text{if\ }\Param{diffrentjfm}=\texttt{pright};\\
(x+y)/2&\text{if\ }\Param{diffrentjfm}=\texttt{paverage};
\end{cases}.
\]
\item
\Param{differentjfm}がそれ以外の値の時は，<ratio>の値は無視され，JFM由来のグルー／カーンは以下の値となる：
\[
 f(\textit{gb},\textit{ga})
\]
ここで．$f(x,y)$は
\[
 f(x,y)=\begin{cases}
\min(x,y)&\text{if\ }\Param{diffrentjfm}=\texttt{small};\\
\max(x,y)&\text{if\ }\Param{diffrentjfm}=\texttt{large};\\
(x+y)/2&\text{if\ }\Param{diffrentjfm}=\texttt{average};\\
x+y&\text{if\ }\Param{diffrentjfm}=\texttt{both};
\end{cases}.
\]
\end{itemize}
\end{enumerate}

例えば，
\begin{verbatim}
\jfont\foo=psft:Ryumin-Light:jfm=ujis;-kern
\jfont\bar=psft:GothicBBB-Medium:jfm=ujis;-kern
\jfont\baz=psft:GothicBBB-Medium:jfm=ujis;jfmvar=piyo;-kern
\end{verbatim}
という3フォントを考え，
\[
 \overbrace{\Node{glyph}{\cs{ foo}, `あ'}}^{p}
\longrightarrow \overbrace{\Node{glyph}{\cs{bar}, `い'}}^{q}
\longrightarrow \overbrace{\Node{glyph}{\cs{baz}, `う'}}^{r}
\]
という3ノードを考える（それぞれ単独でクラスタをなす）．
この場合，$p$と$q$の間は，実フォントが異なるにもかかわらず2.の状況となる一方で，
$q$と$r$の間は（実フォントが同じなのに）\texttt{jfmvar} キーの内容が異なるので3.の状況となる．
\item[\Param{kanjiskip}~{[K]}] 上の[M]において空白が定まらなかった場合，
以下で定めた量「右空白」として採用する．
この段階においては，\cs{inhibitglue} は効力を持たないため，
結果として，2つの和文文字間には常に何らかのグルー／カーンが挿入されることとなる．
\begin{enumerate}
\item 両クラスタ（厳密には$\mathit{Nq}.\mathit{tail}$，$\mathit{Np}.\mathit{head}$）の中身の文字コードに対する
\Param{autospacing}パラメタが両方ともfalseだった場合は，長さ0のglueとする．
\item ユーザ側から見た\Param{kanjiskip}パラメタの自然長が$\cs{maxdimen}=(2^{30}-1)\,{\rm sp}$で
なければ，\Param{kanjiskip}パラメタの値を持つglueを採用する．
\item 2.でない場合は，\textit{Nq}, \textit{Np}で使われているJFMに指定されている\Param{kanjiskip}の値を用いる．
どちらか片方のクラスタだけが和文文字（\textsf{和文A}・\textsf{和文B}）のときは，そちらのクラスタで使われている
JFM由来の値だけを用いる．もし両者で使われているJFMが異なった場合は，上の[M]~3.と同様の方法を用いて調整する．
\end{enumerate}
\end{description}
%\paragraph{「左空白」の算出とそれに伴う補正}
%「左空白」は過去のバージョンでは定義していたが，このバージョンでは
%挿入は一切行われない（機能自体削除している）．
%しかし，仕様は流動的であり，将来復活する可能性もあるため，マニュアル中の記述は今のところ極力変更しない．
\paragraph{禁則用ペナルティの挿入}
まず，
\[
 a:=(\text{\textit{Nq}{\footnotemark}の文字に対する\Param{postbreakpenalty}の値})
+(\text{\textit{Np}{\footnotemark}の文字に対する\Param{prebreakpenalty}の値})
\]
とおく\footnotetext{厳密にはそれぞれ$\mathit{Nq}.\mathit{tail}$，$\mathit{Np}.\mathit{head}$．}．
ペナルティは通常$[-10000,10000]$の整数値をとり，また$\pm 10000$は正負の無限大を意味することになっているが，この$a$の
算出では単純な整数の加減算を行う．

$a$は禁則処理用に\textit{Nq}と\textit{Np}の間に加えられるべきペナルティ量である．
\begin{description}
\item[P-normal~{[PN]}]
\textit{Nq}と\textit{Np}の間の(a)部分にペナルティ(\textit{penalty\_node})があれば処理は簡単である：
それらの各ノードにおいて，ペナルティ値を（$\pm 10000$を無限大として扱いつつ）$a$だけ増加させればよい．
また，$10000 + (-10000) = 0$としている．

少々困るのは，(a)部分にペナルティが存在していない場合である．
直感的に，補正すべき量$a$が0でないとき，その値をもつ\textit{penalty\_node}を作って
「右空白」の（もし未定義なら\textit{Np}の）直前に挿入……
ということになるが，実際には僅かにこれより複雑である．
\begin{itemize}
\item 「右空白」がカーンであるとき，
それは「\textit{Nq}と\textit{Np}の間で改行は許されない」ことを意図している．そのため，
この場合は$a\neq 0$であってもペナルティの挿入はしない．
\item そうでないないときは，$a\neq 0$ならば\textit{penalty\_node}を作って挿入する．
%\item 「左空白」がカーンとしてきっちり定義されている時（このとき，「右空白」はカーンでない），
%この「左空白」の直後での行分割を許容しないといけないので，$a=0$であっても
%\textit{penalty\_node}を作って挿入する．
%\item 以上のどれでもないときは，$a\neq 0$ならば\textit{penalty\_node}を作って挿入する．
\end{itemize}
\end{description}

\def\gkf#1#2#3{\sf$\displaystyle\vphantom{\Bigg(}%
  \frac{\hbox to 4\zw{\hss#2\hss}}{\hbox{#3}}$}
\begin{table}[t]
%<en>\caption{Summary of JFM glues}
%<ja>\caption{JFM グルーの概要}
\label{tab-jfmglue}
%<en>\medskip
\begin{center}
\small
\begin{tabular}{c|cccccc}
\toprule
{\bf\textit{Np}}↓&\sf 和文A&\sf 和文B&\sf 欧文&\sf 箱&\sf glue&\sf kern\\\midrule
\sf 和文A&
\gkf{E}{M→K}{PN}&
\gkf{---}{\OA →K}{PN}&
\gkf{---}{\OA →X}{PN}&
\gkf{---}{\OA}{PA}&
\gkf{---}{\OA}{PN}&
\gkf{---}{\OA}{PS}\\
\sf 和文B&
\gkf{E}{\OB→K}{PA}&
\gkf{---}{K}{PS}&
\gkf{---}{X}{PS}\\
\sf 欧文&
\gkf{E}{\OB →X}{PA}&
\gkf{---}{X}{PS}\cr
\sf 箱&\gkf{E}{\OB}{PA}\\
\sf glue&\gkf{E}{\OB}{PN}\\
\sf kern&\gkf{E}{\OB}{PS}\\
\bottomrule
\end{tabular}
\end{center}
\begin{quote}
%<*en>
In the table above, {\small\gkf{E}{M→K}{PN}} means that
%</en>
%<*ja>
上の表において，{\small\gkf{E}{M→K}{PN}}は次の意味である：
%</ja>
\begin{enumerate}
%<*en>
\item To determine the ``right-space'', \LuaTeX-ja first attempts by the method ``\textsf{JFM-origin~[M]}''.
If this attempt fails, \LuaTeX-ja use the method ``\textsf{\Param{kanjiskip}~[K]}''.
%</en>
%<*ja>
\item 「右空白」を決めるために，\LuaTeX-ja はまず「JFM由来{[M]}」の方法を試みる．
  これが失敗したら，\LuaTeX-ja は「\Param{kanjiskip}~{[K]}」の方法を試みる．
%</ja>

% %<*en>
% \item The ``left space'' between \textit{Nq}~and~\textit{Np} is
%   determined by the method ``\textsf{line-end~[E]}''.
% %</en>
% %<*ja>
% \item \textit{Nq} と \textit{Np} の間の「左空白」は「\textsf{line-end~[E]}」の
%   方法で決定される．
% %</ja>

%<*en>
\item \LuaTeX-ja adopts the method ``\textsf{P-normal~[PN]}'' to adjust the penalty
  between two clusters for \emph{kinsoku shori}.
%</en>
%<*ja>
\item \LuaTeX-jaは2つのクラスタの間の禁則処理用のペナルティを設定するために「\textsf{P-normal~[PN]}」の方法を採用する．
%</ja>
\end{enumerate}
\end{quote}
\end{table}

\subsection{その他の場合}
本節の内容は表\ref{tab-jfmglue}にまとめてある．

\paragraph{和文Aと欧文の間}
\textit{Nq}が\textsf{和文A}で，\textit{Np}が\textsf{欧文}の場合，JFMグルー挿入処理は次のようにして行われる．
\begin{itemize}
\item 「右空白」については，まず以下に述べる\textsf{Boundary-B~[\OB]}により空白を決定しようと試みる．
それが失敗した場合は，\textsf{\Param{xkanjiskip}~[X]}によって定める．
%\item 「左空白」については，既に述べた\textsf{line-end~[E]}をそのまま採用する．それに伴う「右空白」の補正も%同じ．
\item 禁則用ペナルティも，以前述べた\textsf{P-normal~[PN]}と同じである．
\end{itemize}
\begin{description}
\item[Boundary-B~{[\OB]}] 和文文字と「和文でないもの」との間に入る空白を以下によって求め，
未定義でなければそれを「右空白」として採用する．
\textsf{JFM-origin~[M]}の変種と考えて良い．
これによって定まる空白の典型例は，和文の閉じ括弧と欧文文字の間に入る半角アキである．
\begin{enumerate}
\item もし両クラスタの間で \cs{inhibitglue} が実行されていた場合%
（証としてwhatsitノードが自動挿入される），「右空白」は未定義．
\item そうでなければ，
\textit{Nq}と「文字コードが {\tt'jcharbdd'} の文字」との間に入るグルー／カーンとして定まる．
\end{enumerate}
\item[\Param{xkanjiskip}~{[X]}]
この段階では，\textsf{\Param{kanjiskip}~[K]}のときと同じように，
以下で定めた量を「右空白」として採用する．
\cs{inhibitglue} は効力を持たない．
\begin{enumerate}
\item 以下のいずれかの場合は，\Param{xkanjiskip}の挿入は抑止される．しかし，実際には行分割を許容するために，長さ0のglueを採用する：
\begin{itemize}
\item 両クラスタにおいて，それらの中身の文字コードに対する\Param{autoxspacing}パラメタが共にfalseである．
\item \textit{Nq}の中身の文字コードについて，「直後への\Param{xkanjiskip}の挿入」が禁止されている
（つまり，\Param{jaxspmode}~(or \Param{alxspmode})パラメタが2以上）．
\item \textit{Np}の中身の文字コードについて，「直前への\Param{xkanjiskip}の挿入」が禁止されている
（つまり，\Param{jaxspmode}~(or \Param{alxspmode})パラメタが偶数）．
\end{itemize}
\item ユーザ側から見た\Param{xkanjiskip}パラメタの自然長が$\cs{maxdimen}=(2^{30}-1)\,{\rm sp}$で
なければ，\Param{xkanjiskip}パラメタの値を持つglueを採用する．
\item 2.でない場合は，\textit{Nq}, \textit{Np}（\textsf{和文A}/\textsf{和文B}なのは片方だけ）
で使われているJFMに指定されている\Param{xkanjiskip}の値を用いる．
\end{enumerate}
\end{description}

\paragraph{欧文と和文Aの間}
\textit{Nq}が\textsf{欧文}で，\textit{Np}が\textsf{和文A}の場合，JFMグルー挿入処理は上の場合とほぼ同じである．
\textsf{和文A}のクラスタが逆になるので，\textsf{Boundary-A~[\OA]}の部分が変わるだけ．
\begin{itemize}
\item 「右空白」については，まず以下に述べる\textsf{Boundary-A~[\OA]}により空白を決定しようと試みる．
それが失敗した場合は，\textsf{\Param{xkanjiskip}~[X]}によって定める．
%\item \textit{Nq}が和文でないので，「左空白」は算出されない．
\item 禁則用ペナルティは，以前述べた\textsf{P-normal~[PN]}と同じである．
\end{itemize}
\begin{description}
\item[Boundary-A~{[\OA]}] 「和文でないもの」と和文文字との間に入る空白を以下によって求め，
未定義でなければそれを「右空白」として採用する．
\textsf{JFM-origin~[M]}の変種と考えて良い．
これによって定まる空白の典型例は，欧文文字と和文の開き括弧との間に入る半角アキである．
\begin{enumerate}
\item もし両クラスタの間で \cs{inhibitglue} が実行されていた場合（証としてwhatsitノードが自動挿入される），次へ．
\item そうでなければ，
「文字コードが {\tt'jcharbdd'} の文字」と\textit{Np}との間に入るグルー／カーンとして定まる．
\end{enumerate}
\end{description}

\paragraph{和文Aと箱・グルー・カーンの間}
\textit{Nq}が\textsf{和文A}で，\textit{Np}が\textsf{箱}・グルー・カーンのいずれかであった場合，
両者の間に挿入されるJFMグルーについては同じ処理である．しかし，そこでの行分割に対する仕様が異なるので，
ペナルティの挿入処理は若干異なったものとなっている．

\begin{itemize}
\item 「右空白」については，既に述べた\textsf{Boundary-B~[\OB]}により空白を決定しようと試みる．
それが失敗した場合は，「右空白」は挿入されない．
%\item 「左空白」については，既に述べた\textsf{line-end~[E]}の算出方法をそのまま採用する．それに伴う「右空白」の補正も同じ．
\item 禁則用ペナルティの処理は，後ろのクラスタ\textit{Np}の種類によって異なる．
なお，$\mathit{Np}.\mathit{head}$は無意味であるから，
「$\mathit{Np}.\mathit{head}$に対する\Param{prebreakpenalty}の値」は0とみなされる．言い換えれば，
\[
 a:=(\text{\textit{Nq}の文字に対する\Param{postbreakpenalty}の値}).
\]
\begin{description}
\item[箱] \textit{Np}が\textsf{箱}であった場合は，両クラスタの間での行分割は
（明示的に両クラスタの間に \cs{penalty10000} があった場合を除き）いつも許容される．そのため，
ペナルティ処理は，後に述べる\textsf{P-allow~[PA]}が\textsf{P-normal~[PN]}の代わりに用いられる．
\item[グルー] \textit{Np}がグルーの場合，ペナルティ処理は\textsf{P-normal~[PN]}を用いる．
\item[カーン] \textit{Np}がカーンであった場合は，両クラスタの間での行分割は
（明示的に両クラスタの間にペナルティがあった場合を除き）許容されない．
ペナルティ処理は，後に述べる\textsf{P-suppress~[PS]}を使う．
\end{description}
これらの\textsf{P-normal~[PN]}，\textsf{P-allow~[PA]}，\textsf{P-suppress~[PS]}の違いは，
\textit{Nq}と\textit{Np}の間（以前の図だと(a)の部分）にペナルティが存在しない場合にのみ存在する．
\end{itemize}

\begin{description}
\item[P-allow~{[PA]}]
\textit{Nq}と\textit{Np}の間の(a)部分にペナルティがあれば，\textsf{P-normal~[PN]}と同様に，
それらの各ノードにおいてペナルティ値を$a$だけ増加させる．

(a)部分にペナルティが存在していない場合，
\LuaTeX-ja は\textit{Nq}と\textit{Np}の間の行分割を可能にしようとする．
そのために，以下の場合に$a$をもつ\textit{penalty\_node}を作って
「右空白」の（もし未定義なら\textit{Np}の）直前に挿入する：
\begin{itemize}
\item 「右空白」がグルーでない（カーンか未定義）であるとき．
%\item 「左空白」がカーンとしてきっちり定義されている時．
\end{itemize}

\item[P-suppress~{[PS]}]
\textit{Nq}と\textit{Np}の間の(a)部分にペナルティがあれば，\textsf{P-normal~[PN]}と同様に，
それらの各ノードにおいてペナルティ値を$a$だけ増加させる．

(a)部分にペナルティが存在していない場合，
\textit{Nq}と\textit{Np}の間の行分割は元々不可能のはずだったのであるが，
\LuaTeX-ja はそれをわざわざ行分割可能にはしない．
そのため，「右空白」がglueであれば，その直前に \cs{penalty10000} を挿入する．
\end{description}

なお，「右空白」はカーンの%，「左空白」は未定義の
\[
 \overbrace{\Node{glyph}{`あ'}}^{\mathit{Nq}}\longrightarrow \overbrace{\Node{glue}{1\,pt}}^{\mathit{Np}}
\]
のような状況を考える．
このとき，$a$，即ち「あ」の\Param{postbreakpenalty}がいかなる値であっても，
この2クラスタ間は最終的に
\begin{equation}
 \overbrace{\Node{glyph}{`あ'}}^{\mathit{Nq}}\longrightarrow
\Node{kern}{右空白}\longrightarrow \overbrace{\Node{glue}{1\,pt}}^{\mathit{Np}}
\label{eq-gref}
\end{equation}
となり，$a$分のペナルティは挿入されないことに注意して欲しい．
\Param{postbreakpenalty}は（$a$は）殆どの場合が非負の値と考えられ，そのような場合では
\eqref{eq-gref}と
\[
 \overbrace{\Node{glyph}{`あ'}}^{\mathit{Nq}}\longrightarrow
\Node{penalty}{$a$}\longrightarrow
\Node{kern}{右空白}\longrightarrow \overbrace{\Node{glue}{1\,pt}}^{\mathit{Np}}
\]
との間に差異は生じない%
\footnote{kern$\rightarrow$glueが1つの行分割可能点(行分割に伴うペナルティは0)
であるため，たとえ$a=10000$であっても，\textit{Nq}と\textit{Np}の間で行分割を禁止することはできない．}．

\paragraph{箱・グルー・カーンと和文Aの間}
\textit{Np}が\textsf{箱}・グルー・カーンのいずれかで，\textit{Np}が\textsf{和文A}であった場合は，
すぐ上の（\textit{Nq}と\textit{Np}の順序が逆になっている）場合と同じである．
%が，「左空白」がなくなることにのみ注意．
\begin{itemize}
\item 「右空白」については，既に述べた\textsf{Boundary-A~[\OA]}により空白を決定しようと試みる．
それが失敗した場合は，「右空白」は挿入されない．
%\item \textit{Nq}が和文でないので，「左空白」は算出されない．
\item 禁則用ペナルティの処理は，\textit{Nq}の種類によって異なる．
$\mathit{Nq}.\mathit{tail}$は無意味なので，
\[
 a:=(\text{\textit{Np}の文字に対する\Param{prebreakpenalty}の値}).
\]
\begin{description}
\item[箱] \textit{Nq}が\textsf{箱}の場合は，\textsf{P-allow~[PA]}を用いる．
\item[グルー] \textit{Nq}がグルーの場合は，\textsf{P-normal~[PN]}を用いる．
\item[カーン] \textit{Nq}がカーンの場合は，\textsf{P-suppress~[PS]}を用いる．
\end{description}
\end{itemize}

\paragraph{和文Aと和文Bの違い}
先に述べたように，\textsf{和文B}はhboxの中身の先頭（or 末尾）として出現している
和文文字である．リスト内に直接ノードとして現れている和文文字（\textsf{和文A}）との違いは，
\begin{itemize}
\item \textsf{和文B}に対しては，JFMの文字クラス指定から定まる空白
\textsf{JFM-origin~[M]}，\textsf{Boundary-A~[\OA]}，\textsf{Boundary-B~[\OB]}）の挿入は行われない．
%「左空白」の算出も行われない．
例えば，
\begin{itemize}
\item 片方が\textsf{和文A}，もう片方が\textsf{和文B}のクラスタの場合，
\textsf{Boundary-A~[\OA]}または\textsf{Boundary-B~[\OB]}の挿入を試み，それがダメなら
\Param{kanjiskip}~\textsf{[K]}の挿入を行う．
\item \textsf{和文B}の2つのクラスタの間には，\Param{kanjiskip}~\textsf{[K]}が自動的に入る．
\end{itemize}
\item \textsf{和文B}と箱・グルー・カーンが隣接したとき（どちらが前かは関係ない），間にJFMグルー・ペナルティの挿入は一切しない．
\item \textsf{和文B}と\textsf{和文B}，また\textsf{和文B}と\textsf{欧文}とが隣接した時は，禁則用ペナルティ挿入処理は
\textsf{P-suppress~[PS]}が用いられる．
\item \textsf{和文B}の文字に対する\Param{prebreakpenalty},~\Param{postbreakpenalty}の値は使われず，0として計算される．
\end{itemize}


次が具体例である：
\begin{LTXexample}
あ．\inhibitglue A\\
\hbox{あ．}A\\
あ．A
\end{LTXexample}
\begin{itemize}
\item 1行目の\cs{inhibitglue}は\textsf{Boundary-B~[\OB]}の処理のみを抑止するので，ピリオドと「A」の間には
\Param{xkanjiskip}（四分アキ）が入ることに注意．
\item 2行目のピリオドと「A」の間においては，前者が\textsf{和文B}となる（hboxの中身の末尾として登場しているから）ので，
そもそも\textsf{Boundary-B~[\OB]}の処理は行われない．よって，\Param{xkanjiskip}が入ることとなる．
\item 3行目では，ピリオドの属するクラスタは\textsf{和文A}である．これによって，
ピリオドと「A」の間には\textsf{Boundary-B~[\OB]}由来の半角アキが入ることになる．
\end{itemize}
%</ja>

%<en>\section{Patch for the \Pkg{listings} Package}
%<ja>\section{\Pkg{listings} パッケージへの対応}

%<*en>
It is well-known that the \Pkg{listings} package outputs weird results
for Japanese input.
The \Pkg{listings} package makes most of letters active and assigns
output command for each letter~(\cite{listings}).
But Japanese characters are not included in these activated letters.
For \pTeX{} series, there is no method to make Japanese characters active;
a patch \Pkg{jlisting.sty}~(\cite{jlisting}) resolves the problem forcibly.
%</en>
%<*ja>
\Pkg{listings} パッケージが，そのままでは日本語をまともに出力できないこと
はよく知られている．きちんと整形して出力するために，\Pkg{listings}パッケー
ジは内部で「ほとんどの文字」をアクティブにし，各文字に対してその文字の出
力命令を割り当てている(\cite{listings})．
しかし，そこでアクティブにする文字の中に，和文文
字がないためである．\pTeX 系列では，和文文字をアクティブにする手法がなく，
\Pkg{jlisting.sty} というパッチ(\cite{jlisting})を用いることで無理やり解決していた．
%</ja>

%<*en>
In \LuaTeX-ja, the problem is resolved by using the \verb+process_input_buffer+ callback.
The callback function inserts the output command (active character \texttt{U+FFFFF})
before each letter above \texttt{U+0080}.
This method can omits the process to make all Japanese characters active
(most of the activated characters are not used in many cases).
%</en>
%<*ja>
\LuaTeX-jaでは，\verb+process_input_buffer+ コールバックを利用することで，
「各行に出現する\texttt{U+0080}以降の文字に対して，それらの出力命令を前置する」
という方法をとっている．出力命令としては，アクティブ文字化した \texttt{U+FFFFF} を用いている．
これにより，（入力には使用されていないかもしれない）和文文字をもすべてアクティブ化する手間もなく，
見通しが良い実装になっている．
%</ja>


%<*en>
If the \Pkg{listings} package  and \LuaTeX-ja were loaded,
then the patch \Pkg{lltjp-listings} is loaded automatically at \verb+\begin{document}+.
%</en>
%<*ja>
\LuaTeX-ja で利用される \Pkg{listings} パッケージへのパッチ \Pkg{lltjp-listings} は，
\Pkg{listings} と\LuaTeX-jaを読み込んでおけば，
\verb+\begin{document}+ の箇所において自動的に読み込まれるので，通常はあまり
意識する必要はない．
%</ja>

%<en>\subsection{Notes}
%<ja>\subsection{注意}
%<*en>
\paragraph{Escaping to \LaTeX}
We used the \verb+process_input_buffer+ callback to output \textbf{JAchar}s.
But it has a drawback; any commands whose name contains a \textbf{JAchar}
cannot be used in any ``escape to \LaTeX''.

Consider the following input:
%</en>
%<*ja>
\paragraph{\LaTeX へのエスケープ}
日本語対応を行うために \verb+process_input_buffer+ を使用したことで，
\texttt{texcl},~\texttt{escapeinside}といった\emph{「\LaTeX へのエスケープ」中では，
\textbf{JAchar}を名称の一部に含む制御綴は使用不可能}である．
例えば次のような入力を考えよう：
%</ja>
\begin{verbatim*}
\begin{lstlisting}[escapechar=\#]
#\ほげ xぴよ#
\end{lstlisting}
\end{verbatim*}
%<en>The line~2 is transformed by the callback to
%<ja>ここで，2行目は \verb+process_input_buffer+ の作用により，
\begin{lstlisting}[showspaces, escapechar=\!]
#\!\IVSA FFFFF!ほ!\IVSA FFFFF!げ x!\IVSA FFFFF!ぴ!\IVSA FFFFF!よ#
\end{lstlisting}
%<*en>
before the line is actually processed.
In the escape (between the character ``\verb+#+''),
the category code of \texttt{U+FFFFF} is set to 9~(\emph{ignored}).
Hence the control symbol ``\cs{}\IVSA FFFFF'' will be executed,
instead of ``\verb+\ほげ+''.
%</en>
%<*ja>
と変換されてから，実際の処理に回される．
「\verb+#+」で挟まれた「\LaTeX へのエスケープ」中では\
\texttt{U+FFFFF} のカテゴリーコードは9~(\textit{ignored})となるので，
結局「\verb+\ほげ+」の代わりに
「\cs{}\IVSA FFFFF」というcontrol symbolが実行されることになる．
%</ja>

%<*ja>
\paragraph{異体字セレクタの扱い}
\texttt{lstlisting} 環境などの内部にある異体字セレクタを扱うため，
\Pkg{lltjp-listings} では \texttt{vsraw} と \texttt{vscmd} という2つのキーを追加した．
しかし，\Pkg{lltjp-listings} が実際に読み込まれるのは \verb+\begin{document}+\
のところであるので，プリアンブル内ではこれらの追加キーは使用できない．

\texttt{vsraw}は，ブール値の値をとるキーであり，標準ではfalseである．
\begin{itemize}
 \item trueの場合は，異体字セレクタは「直前の文字に続けて」出力される．
もしもIVSサポート（\ref{ssec-ltjotf}節）が有効になっていた場合は，
以下の例（左側は入力，右側はその出力）のようになる．
\begin{LTXexample}
\begin{lstlisting}[vsraw=true]
葛󠄀城市，葛󠄁飾区，葛西
\end{lstlisting}
\end{LTXexample}
\item falseの場合は，異体字セレクタは適当な命令によって「見える形で」出力される．
どのような形で出力されるかを規定するのが \texttt{vscmd} キーであり，
\Pkg{lltjp-listings} の標準設定では以下の例の右側のように出力される．
\begin{LTXexample}
\begin{lstlisting}[vsraw=false,
   vscmd=\ltjlistingsvsstdcmd]
葛󠄀城市，葛󠄁飾区，葛西
\end{lstlisting}
\end{LTXexample}
ちなみに，本ドキュメントでは次のようにしている：
\begin{lstlisting}[numbers=left]
\def\IVSA#1#2#3#4#5{%
  \textcolor{blue}{\raisebox{3.5pt}{\tt%
    \fboxsep=0.5pt\fbox{\tiny \oalign{0#1#2\crcr#3#4#5\crcr}}}}%
}
{\catcode`\%=11
  \gdef\IVSB#1{\expandafter\IVSA\directlua{
    local cat_str = luatexbase.catcodetables['string']
    tex.sprint(cat_str, string.format('%X', 0xE00EF+#1))
}}}
\lstset{vscmd=\IVSB}
\end{lstlisting}
\end{itemize}
既定の出力命令を復活させたい場合は\ \verb+vsraw=\ltjlistingsvsstdcmd+\
とすれば良い．
%</ja>

%<en>\subsection{Class of Characters}
%<ja>\subsection{文字種}

%<en>Roughly speaking, the \Pkg{listings} package processes input as follows:
%<ja>\Pkg{listings} パッケージの内部では，大雑把に言うと
\begin{enumerate}
%<en>\item Collects \textit{letters} and \textit{digits}, which can be used for the name of identifiers.
%<ja>\item 識別子として使える文字 (``letter'',~``digit'') たちを集める．
%<en>\item When reading an \textit{other}, outputs the collected character string (with modification, if needed).
%<ja>\item letterでもdigitでもない文字が現れた時に，収集した文字列を（必要なら修飾して）出力する．
%<en>\item Collects \textit{others}.
%<ja>\item 今度は逆に，letterでない文字たちをletterが現れるまで集める．
%<en>\item When reading a \textit{letter} or a \textit{digit}, outputs the collected character string.
%<ja>\item letterが出現したら集めた文字列を出力する．
%<en>\item Turns back to 1.
%<ja>\item 1.に戻る．
\end{enumerate}
%<*en>
By the above process, line breaks inside of an identifier are blocked.
A flag \verb+\lst@ifletter+ indicates whether the previous character can be used
for the name of identifiers or not.
%</en>
%<*ja>
という処理が行われている．これにより，識別子の途中では行分割が行われないようになっている．
直前の文字が識別子として使えるか否かは \verb+\lst@ifletter+ というフラグに格納されている．
%</ja>

%<*en>
For Japanese characters, line breaks are permitted on both sides
except for brackets, dashes, etc.
Hence the patch \Pkg{lltjp-listings} introduces
a new flag \verb+\lst@ifkanji+, which indicates
whether the previous character is a Japanese character or not.
For illustration, we introduce following classes of characters:
%</en>
%<*ja>
さて，日本語の処理である．殆どの和文文字の前後では行分割が可能であるが，その一方で
括弧類や音引きなどでは禁則処理が必要なことから，\Pkg{lltjp-listings} では，
直前が和文文字であるかを示すフラグ \verb+\lst@ifkanji+ を新たに導入した．
以降，説明のために以下のように文字を分類する：
%</ja>
\begin{center}
\small
\begin{tabular}{lccccc}
\toprule
&Letter&Other&Kanji&Open&Close\\\midrule
\verb+\lst@ifletter+&T&F&T&F&T\\
\verb+\lst@ifkanji+&F&F&T&T&F\\
%<en>Meaning&char in an identifier&other alphabet&%
%<en>most of Japanese char&opening brackets&closing brackets\\
%<ja>意図&識別子中の文字&その他欧文文字&殆どの和文文字&開き括弧類&閉じ括弧類\\
\bottomrule
\end{tabular}
\end{center}
%<*en>
Note that \textit{digits} in the \Pkg{listings} package can be Letter or
Other according to circumstances.
%</en>
%<*ja>
なお，本来の\Pkg{listings} パッケージでの分類``digit''は，
出現状況によって，上の表のLetterとOtherのどちらにもなりうる．
また，KanjiとCloseは \verb+\lst@ifletter+ と \verb+\lst@ifkanji+ の値が一致しているが，
これは間違いではない．
%</ja>

%<*en>
For example, let us consider the case an Open comes after a Letter.
Since an Open represents Japanese open brackets,
it is preferred to be permitted to insert line break after the Letter.
Therefore, the collected character string is output in this case.
%</en>
%<*ja>
例えば，Letterの直後にOpenが来た場合を考える．
文字種Openは和文開き括弧類を想定しているので，Letterの直後では行分割が可能であることが望ましい．
そのため，この場合では，すでに収集されている文字列を出力することで行分割を許容するようにした．
%</ja>

%<*en>
The following table summarizes $5\times 5=25$ cases:
%</en>
%<*ja>
同じように，$5\times 5=25$通り全てについて書くと，次のようになる：
%</ja>
\begin{center}
\small
\begin{tabular}{llccccc}
\toprule
%<*en>
&&\multicolumn{4}{c}{Next}\\\cmidrule(lr){3-7}
&&\hbox to 4em{\hss Letter\hss}&\hbox to 4em{\hss Other\hss}
&\hbox to 4em{\hss Kanji\hss}&\hbox to 4em{\hss Open\hss}&Close\\\midrule
&Letter&collects&\multicolumn{3}{c}{\hrulefill \ outputs\ \hrulefill}&collects\\
&Other&outputs&collects&\multicolumn{2}{c}{\hrulefill \ outputs\ \hrulefill}&collects\\
Prev&Kanji&\multicolumn{4}{c}{\hrulefill \ outputs\ \hrulefill}&collects\\
&Open&\multicolumn{5}{c}{\hrulefill \ collects\ \hrulefill}\\
&Close&\multicolumn{4}{c}{\hrulefill \ outputs\ \hrulefill}&collects\\
%</en>
%<*ja>
&&\multicolumn{4}{c}{後ろ側の文字}\\\cmidrule(lr){3-7}
&&\hbox to 4em{\hss Letter\hss}&\hbox to 4em{\hss Other\hss}
&\hbox to 4em{\hss Kanji\hss}&\hbox to 4em{\hss Open\hss}&Close\\\midrule
直&Letter&収集&\multicolumn{3}{c}{\hrulefill \ 出力\ \hrulefill}&収集\\
前&Other&出力&収集&\multicolumn{2}{c}{\hrulefill \ 出力\ \hrulefill}&収集\\
文&Kanji&\multicolumn{4}{c}{\hrulefill \ 出力\ \hrulefill}&収集\\
字&Open&\multicolumn{5}{c}{\hrulefill \ 収集\ \hrulefill}\\
種&Close&\multicolumn{4}{c}{\hrulefill \ 出力\ \hrulefill}&収集\\
%</ja>
\bottomrule
\end{tabular}
\end{center}
%<en>In the above table,
%<ja>上の表において，
\begin{itemize}
%<en>\item ``outputs'' means to output the collected character string (i.e., line breaking is permitted there).
%<ja>\item 「出力」は，それまでに集めた文字列を出力（≒ここで行分割可能）を意味する．

%<en>\item ``collects'' means to append the next character to the collected character string (i.e., line breaking is prohibited there).
%<ja>\item 「収集」は，後側の文字を，現在収集された文字列に追加（行分割不可）を意味する．
\end{itemize}

%<*en>
Characters above \texttt{U+0080} \emph{except Variation Selectors}
are classified into above 5~classes by the following rules:
%</en>
%<*ja>
\texttt{U+0080}以降の\emph{異体字セレクタ以外の}各文字が
Letter, Other, Kanji, Open, Closeのどれに属するかは次によって決まる：
%</ja>
\begin{itemize}
%<en>\item \textbf{ALchar}s above \texttt{U+0080} are classified as Letter.
%<ja>\item （\texttt{U+0080}以降の）\textbf{ALchar}は，すべてLetter扱いである．

%<en>\item \textbf{JAchar}s are classified in the order as follows:
%<ja>\item \textbf{JAchar}については，以下の順序に従って文字種を決める：
\begin{enumerate}
%<en>\item Characters whose \Param{prebreakpenalty} is greater than or equal to 0 are classified as Open.
%<ja>\item \Param{prebreakpenalty}が0以上の文字はOpen扱いである．

%<en>\item Characters whose \Param{postbreakpenalty} is greater than or equal to 0 are classified as Close.
%<ja>\item \Param{postbreakpenalty}が0以上の文字はClose扱いである．

%<en>\item Characters that don't satisfy the above two conditions are classified as Kanji.
%<ja>\item 上の3条件のどちらにも当てはまらなかった文字は，Kanji扱いである．
\end{enumerate}
\end{itemize}

%<*en>
The width of halfwidth kana (\texttt{U+FF61}--\texttt{U+FF9F})
is same as the width of \textbf{ALchar};
the width of the other \textbf{JAchar}s is double the width of \textbf{ALchar}.
%</en>
%<*ja>
なお，半角カナ(U+FF61--U+FF9F)以外の\textbf{JAchar}は欧文文字2文字分の幅をとるものとみなされる．
半角カナは欧文文字1文字分の幅となる．
%</ja>

%<*en>
This classification process is executed every time a character appears in
the \texttt{lstlisting} environment or other environments/commands.
%</en>
%<*ja>
これらの文字種決定は，実際に \texttt{lstlisting} 環境などの内部で文字が出てくるたびに行われる．
%</ja>

%<*ja>
\section{和文の行長補正方法}
\label{sec-adjspec}
\Pkg{luatexja-adjust} で提供される優先順位付きの行長調整の詳細を述
べる．大まかに述べると，次のようになる．
\begin{itemize}
\item 通常の\TeX の行分割方法に従って，段落を行分割する．この段階では，行
      長に半端が出た場合，その半端分は\textbf{JAglue}（\Param{xkanjiskip}，
      \Param{kanjiskip}，JFMグルー）と
      それ以外のグルーの全てで（優先順位なく）負担される．
\item その後，\texttt{post\_linebreak\_filter} callbackを使い，\emph{段
      落中の各行ごとに}，行末文字の位置を調整したり，優先度付きの行長調整
      を実現するためにグルーの伸縮度を調整する．
      その処理においては，グルーの自然長と\textbf{JAglue}以外の
      グルーの伸び量・縮み量は変更せず，必要に応じて\textbf{JAglue}の伸び量・縮み量のみを
      変更する設計とした．

\Pkg{luatexja-adjust} の作用は，この処理を行うcallbackを追加するだけであり，
      この章の残りではcallbackでの処理について解説する．
\end{itemize}

\paragraph{準備：合計伸縮量の計算}
グルーの伸縮度（\texttt{plus} や \texttt{minus} で指定されている値）には，
有限値の他に，\texttt{fi}，\texttt{fil}，\texttt{fill}，\texttt{filll}と
いう4つの無限大レベル（後ろの方ほど大きい）があり，行の調整に
\texttt{fi} などの\emph{無限大レベルの伸縮度が用いられている場合は，そ
の行に対しての処理を中止}する．

よって，以降，問題にしている行の行長調整は伸縮度が有限長のグルーを用いて
行われているとして良い．さらに，簡単のため，この行はグルーが広げられている
（自然長で組むと望ましい行長よりの短い）場合しか扱わない．

まず，段落中の行中のグルーを
\begin{itemize}
\item \textbf{JAglue}ではないグルー
\item JFMグルー（優先度\footnote{%
  \ref{ssec-jfm-str}節にあるように，
  各JFMグルーには$-2$から2までの優先度がついている．}%
別にまとめられる）
\item 和欧文間空白(\Param{xkanjiskip})
\item 和文間空白(\Param{kanjiskip})
\end{itemize}
の$1+1+5+1=8$つに類別し，それぞれの種別ごとに
許容されている伸び量（\texttt{stretch}の値）の合計を計算する．
また，行長と自然長との差を\textit{total}とおく．


\subsection{行末文字の位置調整}
行末が文字クラス$n$の\textbf{JAchar}であった場合，
それを動かすことによって，\textit{total}のうち
\textbf{JAglue}が負担する分を少なくしようとする．
この行末文字の左右の移動可能量は，
JFM中にある文字クラス$n$の定義の
\texttt{end\_stretch},~\texttt{end\_shrink}フィールドに
全角単位の値として記述されている．

例えば，行末文字が句点「。」であり，そこで用いられているJFM中に
\begin{verbatim}
  [2] = {
    chars = { '。', ... }, width = 0.5, ...,
    end_stretch = 0.5, end_shrink = 0.5,
  },
\end{verbatim}
という指定があった場合，この行末の句点は
\begin{itemize}
\item 通常の\TeX の行分割処理で「半角以上の詰め」が行われていた場合，
この行中の\textbf{JAglue}の負担を軽減するため，
行末の句点を半角だけ右に移動する（ぶら下げ組を行う）．
\item 通常の\TeX の行分割処理で「半角以上の空き」が行われていた場合，
逆に行末句点を半角左に移動させる（見た目的に全角取りとなる）．
\item 以上のどちらでもない場合，行末句点の位置調整は行わない．
\end{itemize}
となる．

行末文字を移動した場合，その分だけ\textit{total}の値を引いておく．

\subsection{グルーの調整}
\textit{total}の分だけが，行中のグルーの伸び量に応じて負担されることになる．
負担するグルーの優先度は以下の順であり，
できるだけ\Param{kanjiskip}を自然長のままにすることを
試みている．
\begin{enumerate}\def\labelenumi{(\Alph{enumi})}
 \item \textbf{JAglue}以外のグルー
 \item 優先度2のJFMグルー
 \item 優先度1のJFMグルー
 \item 優先度0のJFMグルー
 \item 優先度$-1$のJFMグルー
 \item 優先度$-2$のJFMグルー
 \item \Param{xkanjiskip}
 \item \Param{kanjiskip}
\end{enumerate}
\begin{enumerate}
 \item 行末の和文文字を移動したことで$\textit{total}=0$となれば，
調整の必要はなく，行が格納されているhboxの
\texttt{glue\_set}, \texttt{glue\_sign}, \texttt{glue\_order}を再計算すればよい．
以降，$\textit{total}\neq 0$と仮定する．
 \item \textit{total}が「\textbf{JAglue}以外のグルーの伸び量の合計」（以下，(A)の伸び量の
       合計，と称す）よりも小さければ，
それらのグルーに\textit{total}を負担させ，\textbf{JAglue}達自身は自然長で組むことができる．
よって，以下の処理を行う：
\begin{enumerate}
\item 各\textbf{JAglue}の伸び量を0とする．
\item 行が格納されているhboxの
\texttt{glue\_set}, \texttt{glue\_sign}, \texttt{glue\_order}を再計算する．
これによって，\textit{total}は\textbf{JAglue}以外のグルーによって負担される．
\end{enumerate}
\item \textit{total}が「(A)の伸び量の合計」以上ならば，(A)--(H)のどこまで負担すれば
\textit{total}以上になるかを計算する．
例えば，
\[\catcode`\<=12
 \textit{total} = (\text{(A)--(B)の伸び量の合計}) + p\cdot (\text{(C)の伸び量の合計}),
 \qquad 0\le p<1
\]
であった場合，各グルーは次のように組まれる：
\begin{itemize}
 \item (A),~(B)に属するグルーは各グルーで許された伸び量まで伸ばす．
 \item (C)に属するグルーはそれぞれ$p\times (\text{伸び量})$だけ伸びる．
 \item (D)--(H)に属するグルーは自然長のまま．
\end{itemize}
実際には，前に述べた「設計」に従い，次のように処理している：
\begin{enumerate}
\item (C)に属するグルーの伸び量を$p$倍する．
\item (D)--(H)に属するグルーの伸び量を0とする．
\item 行が格納されているhboxの
\texttt{glue\_set}, \texttt{glue\_sign}, \texttt{glue\_order}を再計算する．
これによって，\textit{total}は\textbf{JAglue}以外のグルーによって負担される．
\end{enumerate}
\item \textit{total}が(A)--(H)の伸び量の合計よりも大きい場合，どうしようもないので
      \verb+^^;+何もしない．
\end{enumerate}

%</ja>

%<*ja>
\section{IVS対応}
\verb+luatexja.otf.enable_ivs()+ を実行し，IVS対応を有効にした状態では，
\verb+pre_linebreak_filter+ や \verb+hpack_filter+ コールバックには
次の4つが順に実行される状態となっている：
\begin{description}
\item[\tt ltj.do\_ivs] \textit{glyph\_node}~$p$の直後に，異体字セレクタ（を表す\textit{glyph\_node}）
が連続した場合に，$p$のフォントに対応したが持つ「異体字情報」に従って出力するグリフを変える．

しかし，単に$p.\textit{char}$を変更するだけでは，後から
font featureの適用（すぐ下）により置換される可能性がある．そのため，
\cs{CID} や \cs{UTF} と同じように，\textit{glyph\_node}~$p$の代わりに
\texttt{user\_id} が\textit{char\_by\_cid}であるようなuser-defined whatsitを用いている．
\item[（\Pkg{luaotfload} によるfont featureの適用）]
\item[\tt ltj.otf] \texttt{user\_id} が\textit{char\_by\_cid}であるようなuser-defined whatsitを
きちんと\textit{glyph\_node}に変換する．この処理は，\cs{CID}, \cs{UTF}やIVSによる置換が，
font featureの適用で上書きされてしまうのを防止するためである．
\item[\tt ltj.main\_process] \textbf{JAglue}の挿入処理（\ref{sec-jfmglue}章）と，
JFMの指定に従って各\textbf{JAchar}の「寸法を補正」することを行う．
\end{description}

問題は各フォントの持っているIVS情報をどのように取得するか，である．
\Pkg{luaotfload} はフォント番号<font\_number>の情報を\
\texttt{fonts.hashes.identifiers[<font\_number>]} 以下に格納している．
しかし，OpenTypeフォントのIVS情報は格納されていないようである%
\footnote{TrueTypeフォントに関しては，
\begin{center}
\texttt{fonts.hashes.idenfiers[<font\_number>]%
  .resources.variants[<selector>][<base\_char>]}
\end{center}
に，<base\_char>番の文字の後に異体字セレクタ<selector>が続いた場合に
出力すべきグリフが書かれてある．}．
%例えば，小塚明朝Pr6N~Rでは，

一方，\LuaTeX 内部の \texttt{fontloader} の返すテーブルには
OpenTypeフォントでもTrueTypeフォントでもIVS情報が格納されている．
具体的には……

そのため，\LuaTeX-jaのIVS対応においては，\LuaTeX 内部の\
\texttt{fontloader} を直接用いることで，フォントのIVS情報を取得している．
20140114.0以降でキャッシュを用いるようにした要因はここにあり，
\texttt{fontloader} の呼び出しでかなり時間を消費することから，
%%% to_table を使わなくしたことで，メモリ使用量は減った
IVS情報をキャッシュに保存することで2回目以降の実行時間を節約している．


\section{複数フォントの「合成」（未完）}

\section{\LuaTeX-jaにおけるキャッシュ}
\Pkg{luaotfload}パッケージが，各TrueType・OpenTypeフォントの情報を
キャッシュとして保存しているのと同様の方法で，
\LuaTeX-jaもいくつかのキャッシュファイルを作成するようになった．
\begin{itemize}
 \item 通常，キャッシュは\texttt{\$TEXMFVAR/luatexja/}以下に保存され，
そこから読み込みが行われる．
 \item 「通常の」テキスト形式のキャッシュ（拡張子は \texttt{.lua}）以外にも，
それをバイナリ形式（バイトコード）に変換したものもサポートしている．
\begin{itemize}
 \item \LuaTeX とLuaJIT\TeX ではバイトコードの形式が異なるため，バイナリ形式の
キャッシュは共有できない．\LuaTeX 用のバイナリキャッシュは \texttt{.luc}，
LuaJIT\TeX 用のは \texttt{.lub} と拡張子を変えることで対応している．
 \item キャッシュを読み込む時，同名のバイナリキャッシュがあれば，
テキスト形式のものよりそちらを優先して読み込む．
 \item テキスト形式のキャッシュが更新/作成される際は，そのバイナリ版も
同時に更新される．
また，（バイナリ版が見つからず）テキスト形式のキャッシュ側が読み込まれたときは，
\LuaTeX-jaはバイナリキャッシュを作成する．
\end{itemize}
\end{itemize}
%</ja>
%<*en>
\section{Cache Management of \LuaTeX-ja}
\LuaTeX-ja creates some cache files to reduce the loading time.
in a similar way to the \Pkg{luaotfload} package:
\begin{itemize}
 \item Cache files are usually stored in (and loaded from)
\texttt{\$TEXMFVAR/luatexja/}.
 \item In addition to caches of the text form (the extension is ``\texttt{.lua}''),
caches of the \emph{binary}, precompiled form are supported.
\begin{itemize}
 \item We cannot share same binary cache for \LuaTeX\ and LuaJIT\TeX.
Hence we distinguish them by their extension, ``\texttt{.luc}'' for \LuaTeX\
and ``\texttt{.lub}'' for LuaJIT\TeX.
 \item In loading a cache, the binary cache precedes
the text form.
 \item When \LuaTeX-ja updates a cache \texttt{hoge.lua},
its binary version is also updated.
\end{itemize}
\end{itemize}
%</en>

%<*ja>
\subsection{キャッシュの使用箇所}

\LuaTeX-ja では以下の3種類のキャッシュを使用している：
\begin{cslist}
\item[ltj-cid-auto-adobe-japan1.lua]
Ryumin-Lightのような非埋め込みフォントの情報を格納しており，
（それらが\LuaTeX-jaの標準和文フォントなので）\LuaTeX-jaの読み込み時に自動で読まれる．
生成には\texttt{UniJIS2004-UTF32-\{H, V\}}, \texttt{Adobe-Japan1-UCS2}という3つの
CMapが必要である．

\pageref{para-cid}ページで述べたように，\texttt{cid}キーを使って
非埋め込みの中国語・韓国語フォントを定義する場合，同様のキャッシュが生成される．
キャッシュの名称，必要となるCMapについては表\ref{tab:cid-cache}を参照して欲しい．

\item[ivs\_***.lua]
フォント``\texttt{***}''における異体字情報を格納している．構造は以下の通り：
%</ja>
%<*en>
\subsection{Use of Cache}

\LuaTeX-ja uses the following cache:
\begin{cslist}
\item[ltj-cid-auto-adobe-japan1.lua]
The font table of a CID-keyed non-embedded Japanese font.
This is loaded in every run.
It is created from two CMaps, \texttt{UniJIS2004-UTF32-H} and
	     \texttt{Adobe-Japan1-UCS2},
and this is why these two CMaps are needed in the first run of \LuaTeX-ja.

Similar caches are created as Table~\ref{tab:cid-cache},
if you specified \texttt{cid} key in \cs{jfont}
to use other CID-keyed non-embedded fonts for Chinese or Korean,
as in Page~\pageref{para-cid}.

\item[ivs\_***.lua]
This file stores the table of Unicode variants in a font ``\texttt{***}''.
The structure of the table is the following:
%</en>

\begin{table}[!tb]
 \centering\small
\caption{\texttt{cid} key and corresponding files}
\label{tab:cid-cache}
\vspace*{\medskipamount}
\begin{tabular}{>{\tt}l>{\tt}l>{\tt}l>{\tt}l}
\toprule
\bf \texttt{cid} key&\bf name of the cache &
\multicolumn{2}{c}{\bf used CMaps}\\
\midrule
Adobe-Japan1-*&ltj-cid-auto-adobe-japan1.lua&UniJIS2004-UTF32-H&Adobe-Japan1-UCS2\\
Adobe-Korea1-*&ltj-cid-auto-adobe-korea1.lua&UniKS-UTF32-H&Adobe-Korea1-UCS2\\
Adobe-GB1-*&ltj-cid-auto-adobe-gb1.lua&UniGB-UTF32-H&Adobe-GB1-UCS2\\
Adobe-CNS1-*&ltj-cid-auto-adobe-cns1.lua&UniCNS-UTF32-H&Adobe-CNS1-UCS2\\
\bottomrule
\end{tabular}
\end{table}

\begin{lstlisting}
return {
 {
  [10955]={    -- U+2ACB "Subset Of Above Not Equal To"
   [65024]=983879, -- <2ACB FE00>
  },
  [37001]={    -- U+9089 "邉"
   [0]=37001,  --   <9089 E0100>
   991049,     --   <9089 E0101>
   ...
  },
  ...
 },
 ["chksum"]="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", -- checksum of the fontfile
 ["version"]=4, -- version of the cache
}
\end{lstlisting}
%<*ja>
\item[ltj-jisx0208.\{luc|lub\}]
\LuaTeX-ja配布中の\texttt{ltj-jisx0208.lua}をバイナリ化したものである．
これはJIS~X~0208とUnicodeとの変換テーブルであり，
\pTeX との互換目的の文字コード変換命令で用いられる．
%</ja>
%<*en>
\item[ltj-jisx0208.\{luc|lub\}]
The binary version of \texttt{ltj-jisx0208.lua}.
This is the conversion table between JIS~X~0208 and Unicode
which is used in Kanji-code conversion commands for compatibility with \pTeX.
%</en>
\end{cslist}

%<*en>
\subsection{Internal}
Cache management system of \LuaTeX-ja is stored in \texttt{luatexja.base}
(\texttt{ltj-base.lua}).
There are three public functions for cache management in \texttt{luatexja.base},
where <filename> stands for the file name \emph{without suffix}:
\begin{cslist}
\item[save\_cache(<filename>, <data>)]
Save a non-nil table <data> into a cache <filename>.
Both the text form <filename>\texttt{.lua} and its binary version
are created or updated.

\item[save\_cache\_luc(<filename>, <data>{[, <serialized\_data>]})]

Same as \texttt{save\_cache}, except that only the binary cache is updated.
The third argument <serialized\_data> is not usually given.
But if this is given, it is treated as a string representation of <data>.

\item[load\_cache(<filename>, <outdate>)]
Load the cache <filename>.
<outdate> is a function which takes one argument (the contents of the cache),
and its return value is whether the cache is outdated.

\texttt{load\_cache} first tries to
read the binary cache <filename>\texttt{.\{luc|lub\}}.
If its contents is up-to-date, \texttt{load\_cache} returns the contents.
If the binary cache is not found or
its contents is outdated, \texttt{load\_cache} tries to
read the text form <filename>\texttt{.lua}.
Hence, the return value of \texttt{load\_cache} is non-nil,
if and only if the updated cache is found.
\end{cslist}
%</en>
%<*ja>
\subsection{内部命令}
\LuaTeX-jaにおけるキャッシュ管理は，\texttt{luatexja.base}~(\texttt{ltj-base.lua})に
実装しており，以下の3関数が公開されている．
ここで，<filename>は保存するキャッシュのファイル名を\emph{拡張子なしで}指定する．
\begin{cslist}
\item[save\_cache(<filename>, <data>)]
nilでない<data>をキャッシュ<filename>に保存する．
テキスト形式の<filename>\texttt{.lua}のみならず，
そのバイナリ版も作成/更新される．

\item[save\_cache\_luc(<filename>, <data>{[, <serialized\_data>]})]

\texttt{save\_cache}と同様だが，バイナリキャッシュのみが更新される．
第3引数<serialized\_data>が与えられた場合，それを
<data>の文字列化表現として使用する．
そのため，<serialized\_data>は普通は指定しないことになるだろう．

\item[load\_cache(<filename>, <outdate>)]
キャッシュ<filename>を読み込む．
<outdate>は1引数（キャッシュの中身）をとる関数であり，
その戻り値は「キャッシュの更新が必要」かどうかを示すブール値でないといけない．

\texttt{load\_cache}は，まずバイナリキャッシュ<filename>\texttt{.\{luc|lub\}}を
読みこむ．もしその内容が「新しい」，つまり<outdate>の評価結果が \texttt{false} なら
\texttt{load\_cache}はこのバイナリキャッシュの中身を返す．
もしバイナリキャッシュが見つからなかったか，「古すぎる」ならばテキスト版
	     <filename>\texttt{.lua}を読み込み，その値を返す．

以上より，\texttt{load\_cache}自体がnilでない値を返すのは，ちょうど「新しい」キャッシュが
見つかった場合である．
\end{cslist}
%</ja>


%<*ja>
\section{縦組の実装}
\label{sec-dir-imp}
\ref{sec-direction}章の最初でも述べたように，
\LuaTeX-jaは横組(\texttt{TLT})で組んだボックスを回転させる方式で
縦組を実装している．

\LuaTeX-jaにおける縦組の実装は
\pTeX における実装(\cite{ptexdoc,ptextug})をベースにしており，……

\subsection{\textit{direction}~whatsit}
\textit{direction}~whatsitとは，\textit{direction}という特定の \verb+user_id+ を持つ
whatsitのことである．このwhatsitは，以下の3つの役割がある．
\begin{enumerate}
\def\labelenumi{(\roman{enumi})}
 \item 「現在作成中のリストの組方向が \cs{tate} 等により変更された」ことを表す．\\
「現在の組方向」は \verb+\ltj@dir@count+ というカウンタに格納されているが，それだけでは
\verb+hpack_filter+コールバックなどから正しく処理対象のリストの組方向を正しく取得すること
       はできない（\ref{ssec-stack}節参照）ため，このように別途whatsitを用いている．
 \item \cs{hbox},~\cs{vbox}によって作成されたボックスの組方向を表す．\\
原則として，ボックスの組方向はattribute \verb+\ltj@dir+ に格納されることになっている．しか
       し，新規に作成されるボックスのattributeをコールバックの内部から制御するには，
\verb+tex.setattribute+ による方法しかなく，これは不安定である．

なお，この役割のdirection whatsitは，次の(iii)の役割も一緒に持っている．
 \item 「異方向における寸法」の記録用．\\
例えば \cs{box0} に横組のボックスが格納されている時，縦組や \cs{dtou} 方向
における寸法値は（(ii)の役割として作成された）direction~whatsitが
格納しているノードリストに格納される．
\end{enumerate}
このように複数の役割をもたせているので，
\begin{verbatim}
% yoko direction
\setbox0=\hbox{\tate B}
\noindent \unhbox0 A
\end{verbatim}
のような場合に，「(ii)の役割の\textit{direction}~whatsitが(i)の役割として認識され，
このリストは縦組とみなされるのではないか？」と思うかもしれない．しかし，
(i)の役割と(ii)の枠割の\textit{direction}~whatsitは \verb+\ltj@icflag+ の値により
区別されているので，そのような混乱は起こらない．

\medskip
(ii)の役割のdirection whatsitは，各ボックスの内容を表すリストの先頭に挿入されるが，
例外が以下の2つある：
\begin{itemize}
 \item \verb+\hbox{}+, \verb+\vbox{}+ といった，
\begin{itemize}
 \item \cs{tate} 等によりボックス内部の組方向を変更していない
 \item ボックスの中身のリストが空である
\end{itemize}
場合は，\LuaTeX の \verb+hpack_filter+, \verb+vpack_filter+ といった
callbackに処理が回らないので，この場合にはdirection whatsitは挿入されない．
 \item \verb+\vtop{...}+ の場合は，先頭にdirection whatsitを置くと
ボックスの高さが正しく設定されない．そのため，この場合に限っては
direction whatsitはリストの2番目に挿入されることとなる．
\end{itemize}

\subsection{異方向のボックスの整合処理}
縦中横など異方向のボックスを配置する場合に，周囲の組方向と大きさを整合させるため，
\LuaTeX-jaでは \verb+\ltj@dir+ が128以降の\textit{hlist\_node}, \textit{vlist\_node}を
用いる．これらは\pTeX における\textit{dir\_node}の役割と同じ果たしており，
この文章中でも\textit{dir\_node}と呼称する．

%</ja>

\begin{thebibliography}{99}
  \addcontentsline{toc}{section}{\refname}
\bibitem{texbytopic}
Victor Eijkhout. \newblock \textit{\TeX\ by Topic, A \TeX nician's Reference}, Addison-Wesley, 1992.
\bibitem{listings} C.\ Heinz, B.\ Moses. \newblock The \textsf{Listings} Package.
\bibitem{uptex} Takuji Tanaka. \newblock
upTeX---Unicode version of pTeX with CJK extensions,
TUG 2013, October 2013.
%<ja>\newblock
%<en>\\\null\hfill
\url{http://tug.org/tug2013/slides/TUG2013_upTeX.pdf}
\bibitem{jlisting} Thor Watanabe. \newblock Listings\ -\ MyTeXpert.
%<en>\newblock
%<ja>\\\null\hfill
\url{http://mytexpert.sourceforge.jp/index.php?Listings}
\bibitem{jlreq}  W3C Japanese Layout Task Force~(ed). \newblock
Requirements for Japanese Text Layout (W3C Working Group Note), 2011, 2012. \newblock
\url{http://www.w3.org/TR/jlreq/}%
%<ja> \\日本語訳の書籍版：W3C日本語組版タスクフォース（編），『W3C技術ノート 日本語組版処理の要件』，東京電機大学出版局，2012．
\bibitem{min10} 乙部厳己．min10フォントについて．\\\null\hfill
\url{http://argent.shinshu-u.ac.jp/~otobe/tex/files/min10.pdf}
\bibitem{x4051} 日本工業規格(Japanese Industrial Standard). JIS~X~4051,
日本語文書の組版方法(Formatting rules for Japanese documents), 1993, 1995, 2004.
\bibitem{ptexdoc} 濱野尚人，田村明史，倉沢良一．\TeX の出版への応用—縦組み機能の組み込み—．
\\\null\hfill\texttt{.../texmf-dist/doc/ptex/base/ptexdoc.pdf}
\bibitem{ptextug} Hisato Hamano. \newblock
\textit{Vertical Typesetting with \TeX}, TUGBoat~\textbf{11}(3), 346--352, 1990.
\end{thebibliography}

\newpage
\appendix

\section{Package versions used in this document}
This document was typeset using the following packages:

\medskip

{\makeatletter\tt\footnotesize
  \def\@pkglist#1{%
    \filename@parse{#1}\def\@temp{sty}
    \ifx\@temp\filename@ext
      \edef\reserved@a{%
        \filename@base.%
        \ifx\filename@ext\relax tex\else\filename@ext\fi}%
      \leavevmode\hskip-13em\hbox to 13em{\filename@area\reserved@a\hss}%
      \csname ver@\reserved@a\endcsname\par
    \fi
  }%
\parindent0pt\leftskip13em
\ltjpkglist

\makeatother}
\end{document}
%</!showexpl>
%<*showexpl>
%%
%% config file for showexpl.sty
%%
%% Copyright The LuaTeX-ja project team, 2012
%%
\ProvidesFile{showexpl.cfg}
  [2012/05/20 v0.01 Definitions for the showexpl package (luatexja)]
\lstset{}
\def\SX@Info{}
\endinput
%</*showexpl>
